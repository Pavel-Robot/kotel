
Boiler_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007038  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08007148  08007148  00017148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007550  08007550  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08007550  08007550  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007550  08007550  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007550  08007550  00017550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007554  08007554  00017554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08007558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003110  20000098  080075f0  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200031a8  080075f0  000231a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030a3c  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005588  00000000  00000000  00050afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00020d12  00000000  00000000  00056085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001958  00000000  00000000  00076d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000049b8  00000000  00000000  000786ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004894  00000000  00000000  0007d0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b651  00000000  00000000  0008193b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5198  00000000  00000000  000acf8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00152124  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c3c  00000000  00000000  00152174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000098 	.word	0x20000098
 800012c:	00000000 	.word	0x00000000
 8000130:	08007130 	.word	0x08007130

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000009c 	.word	0x2000009c
 800014c:	08007130 	.word	0x08007130

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_f2uiz>:
 8000fd4:	0042      	lsls	r2, r0, #1
 8000fd6:	d20e      	bcs.n	8000ff6 <__aeabi_f2uiz+0x22>
 8000fd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fdc:	d30b      	bcc.n	8000ff6 <__aeabi_f2uiz+0x22>
 8000fde:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fe6:	d409      	bmi.n	8000ffc <__aeabi_f2uiz+0x28>
 8000fe8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff4:	4770      	bx	lr
 8000ff6:	f04f 0000 	mov.w	r0, #0
 8000ffa:	4770      	bx	lr
 8000ffc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001000:	d101      	bne.n	8001006 <__aeabi_f2uiz+0x32>
 8001002:	0242      	lsls	r2, r0, #9
 8001004:	d102      	bne.n	800100c <__aeabi_f2uiz+0x38>
 8001006:	f04f 30ff 	mov.w	r0, #4294967295
 800100a:	4770      	bx	lr
 800100c:	f04f 0000 	mov.w	r0, #0
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <Callback01>:
void Callback01(void *argument)
{
  /* USER CODE BEGIN Callback01 */
  //По просшествии таймера Timer_Try, вызовится данный Callback

	Try_count = input.Try_count; //сбрасываем значения попыток
 8001014:	4a02      	ldr	r2, [pc, #8]	; (8001020 <Callback01+0xc>)
 8001016:	4b03      	ldr	r3, [pc, #12]	; (8001024 <Callback01+0x10>)
 8001018:	7b92      	ldrb	r2, [r2, #14]
 800101a:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Callback01 */
}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000004 	.word	0x20000004
 8001024:	20000001 	.word	0x20000001

08001028 <Callback02>:

/* Callback02 function */
void Callback02(void *argument)
{
  /* USER CODE BEGIN Callback02 */
	flag_zero_boiler = 1; //начинаем учитывать, что котел может погаснуть
 8001028:	2201      	movs	r2, #1
 800102a:	4b01      	ldr	r3, [pc, #4]	; (8001030 <Callback02+0x8>)
 800102c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Callback02 */
}
 800102e:	4770      	bx	lr
 8001030:	200008e4 	.word	0x200008e4

08001034 <Callback_test>:
//
//	state_arr[5].state = Sens_a.Thermostat.state;
//	state_arr[5].voltage = Sens_a.Thermostat.voltage;

  /* USER CODE END Callback_test */
}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <StartDefaultTask>:
{
 8001038:	b508      	push	{r3, lr}
    osDelay(1);
 800103a:	2001      	movs	r0, #1
 800103c:	f003 feb4 	bl	8004da8 <osDelay>
  for(;;)
 8001040:	e7fb      	b.n	800103a <StartDefaultTask+0x2>
 8001042:	bf00      	nop

08001044 <StartTask_Sens_Connect>:
{
 8001044:	b508      	push	{r3, lr}
	osDelay(9);
 8001046:	2009      	movs	r0, #9
 8001048:	f003 feae 	bl	8004da8 <osDelay>
  for(;;)
 800104c:	e7fb      	b.n	8001046 <StartTask_Sens_Connect+0x2>
 800104e:	bf00      	nop

08001050 <StartTask_Hopper_Cover>:
{
 8001050:	b508      	push	{r3, lr}
    osDelay(8);
 8001052:	2008      	movs	r0, #8
 8001054:	f003 fea8 	bl	8004da8 <osDelay>
  for(;;)
 8001058:	e7fb      	b.n	8001052 <StartTask_Hopper_Cover+0x2>
 800105a:	bf00      	nop

0800105c <StartTask_T_Screw>:
void Temp_Screw(uint8_t temp){

	if(temp >= 85){

		//1.Выдать сообщение пользователю "Возгорание в трубе шнека"
		name_fail = Overheating_screw_pipe; //Выбираем номер аварии
 800105c:	2501      	movs	r5, #1
{
 800105e:	b580      	push	{r7, lr}
 8001060:	4c05      	ldr	r4, [pc, #20]	; (8001078 <StartTask_T_Screw+0x1c>)
 8001062:	4f06      	ldr	r7, [pc, #24]	; (800107c <StartTask_T_Screw+0x20>)
 8001064:	4e06      	ldr	r6, [pc, #24]	; (8001080 <StartTask_T_Screw+0x24>)
	if(temp >= 85){
 8001066:	7ba3      	ldrb	r3, [r4, #14]
	    osDelay(6);
 8001068:	2006      	movs	r0, #6
 800106a:	2b54      	cmp	r3, #84	; 0x54
		name_fail = Overheating_screw_pipe; //Выбираем номер аварии
 800106c:	bf84      	itt	hi
 800106e:	703d      	strbhi	r5, [r7, #0]
		fail_state_arr[name_fail].Fail_State = 1; //Переводим состояние ошибки в активен (1)
 8001070:	7075      	strbhi	r5, [r6, #1]
 8001072:	f003 fe99 	bl	8004da8 <osDelay>
		Temp_Screw(Sens_a.Temp_Screw.value); //Проверяем на температуру шнек
 8001076:	e7f6      	b.n	8001066 <StartTask_T_Screw+0xa>
 8001078:	200000bc 	.word	0x200000bc
 800107c:	20000a7c 	.word	0x20000a7c
 8001080:	200008d8 	.word	0x200008d8

08001084 <StartTask_Current>:
  osTimerStart(Timer_TryHandle, Try_Time*60000); //Таймер который просто сбрасывает количество попыток реверса Try_count по истечению действия
 8001084:	f64e 2160 	movw	r1, #60000	; 0xea60
{
 8001088:	b508      	push	{r3, lr}
  osTimerStart(Timer_TryHandle, Try_Time*60000); //Таймер который просто сбрасывает количество попыток реверса Try_count по истечению действия
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <StartTask_Current+0x20>)
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <StartTask_Current+0x24>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	6810      	ldr	r0, [r2, #0]
 8001092:	fb03 f101 	mul.w	r1, r3, r1
 8001096:	f003 fee3 	bl	8004e60 <osTimerStart>
    osDelay(7);
 800109a:	2007      	movs	r0, #7
 800109c:	f003 fe84 	bl	8004da8 <osDelay>
  for(;;)
 80010a0:	e7fb      	b.n	800109a <StartTask_Current+0x16>
 80010a2:	bf00      	nop
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000888 	.word	0x20000888

080010ac <StartTask_FanManage>:
{
 80010ac:	e92d 4880 	stmdb	sp!, {r7, fp, lr}


	if((1 <= work_time_sec && 200 >= work_time_sec) && (1 <= not_work_time_sec && 200 >= not_work_time_sec)){


	osDelay(work_time_sec*1000); //время которое работает вентилятор
 80010b0:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 80010b4:	4c21      	ldr	r4, [pc, #132]	; (800113c <StartTask_FanManage+0x90>)
 80010b6:	4d22      	ldr	r5, [pc, #136]	; (8001140 <StartTask_FanManage+0x94>)
 80010b8:	4e22      	ldr	r6, [pc, #136]	; (8001144 <StartTask_FanManage+0x98>)
 80010ba:	4f23      	ldr	r7, [pc, #140]	; (8001148 <StartTask_FanManage+0x9c>)
 80010bc:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800114c <StartTask_FanManage+0xa0>
 80010c0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8001150 <StartTask_FanManage+0xa4>
 80010c4:	b083      	sub	sp, #12
 80010c6:	e005      	b.n	80010d4 <StartTask_FanManage+0x28>
		if(flag_mode_support == 0 && flag_work == 1 && flag_hand_fire == 0){
 80010c8:	7833      	ldrb	r3, [r6, #0]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d02f      	beq.n	800112e <StartTask_FanManage+0x82>
    osDelay(15);
 80010ce:	200f      	movs	r0, #15
 80010d0:	f003 fe6a 	bl	8004da8 <osDelay>
		if(flag_Screw_work == 1){
 80010d4:	7823      	ldrb	r3, [r4, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d1f9      	bne.n	80010ce <StartTask_FanManage+0x22>
		if(flag_mode_support == 0 && flag_work == 1 && flag_hand_fire == 0){
 80010da:	782b      	ldrb	r3, [r5, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f3      	beq.n	80010c8 <StartTask_FanManage+0x1c>
		if(flag_mode_support == 1 && flag_work == 1 && flag_hand_fire == 0){
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d1f4      	bne.n	80010ce <StartTask_FanManage+0x22>
 80010e4:	f896 b000 	ldrb.w	fp, [r6]
 80010e8:	f1bb 0f01 	cmp.w	fp, #1
 80010ec:	d1ef      	bne.n	80010ce <StartTask_FanManage+0x22>
 80010ee:	783b      	ldrb	r3, [r7, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1ec      	bne.n	80010ce <StartTask_FanManage+0x22>
			Blowdown(input.time_fan_work_mode_2, input.time_fan_not_work_mode_2); //Режим продува
 80010f4:	f899 0008 	ldrb.w	r0, [r9, #8]
	if((1 <= work_time_sec && 200 >= work_time_sec) && (1 <= not_work_time_sec && 200 >= not_work_time_sec)){
 80010f8:	1e42      	subs	r2, r0, #1
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	2ac7      	cmp	r2, #199	; 0xc7
 80010fe:	d8e6      	bhi.n	80010ce <StartTask_FanManage+0x22>
 8001100:	f899 2009 	ldrb.w	r2, [r9, #9]
 8001104:	1e51      	subs	r1, r2, #1
 8001106:	b2c9      	uxtb	r1, r1
 8001108:	29c7      	cmp	r1, #199	; 0xc7
 800110a:	d8e0      	bhi.n	80010ce <StartTask_FanManage+0x22>
	osDelay(work_time_sec*1000); //время которое работает вентилятор
 800110c:	fb0a f000 	mul.w	r0, sl, r0
 8001110:	e9cd 2300 	strd	r2, r3, [sp]
 8001114:	f003 fe48 	bl	8004da8 <osDelay>

	flag_pwm_fan = 0;

	osDelay(not_work_time_sec*1000); //Задержку реализуем - вентилятор не работает это время
 8001118:	9a00      	ldr	r2, [sp, #0]
	flag_pwm_fan = 0;
 800111a:	9b01      	ldr	r3, [sp, #4]
	osDelay(not_work_time_sec*1000); //Задержку реализуем - вентилятор не работает это время
 800111c:	fb0a f002 	mul.w	r0, sl, r2
	flag_pwm_fan = 0;
 8001120:	f888 3000 	strb.w	r3, [r8]
	osDelay(not_work_time_sec*1000); //Задержку реализуем - вентилятор не работает это время
 8001124:	f003 fe40 	bl	8004da8 <osDelay>

	flag_pwm_fan = 1;
 8001128:	f888 b000 	strb.w	fp, [r8]

	}
}
 800112c:	e7cf      	b.n	80010ce <StartTask_FanManage+0x22>
		if(flag_mode_support == 0 && flag_work == 1 && flag_hand_fire == 0){
 800112e:	783a      	ldrb	r2, [r7, #0]
 8001130:	2a00      	cmp	r2, #0
 8001132:	d1cc      	bne.n	80010ce <StartTask_FanManage+0x22>
			flag_pwm_fan = 1;
 8001134:	f888 3000 	strb.w	r3, [r8]
 8001138:	e7c9      	b.n	80010ce <StartTask_FanManage+0x22>
 800113a:	bf00      	nop
 800113c:	200008de 	.word	0x200008de
 8001140:	200008e0 	.word	0x200008e0
 8001144:	200008e3 	.word	0x200008e3
 8001148:	200008df 	.word	0x200008df
 800114c:	200008e2 	.word	0x200008e2
 8001150:	20000004 	.word	0x20000004

08001154 <StartTask_T_Gase>:
{
 8001154:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 8001158:	4c1d      	ldr	r4, [pc, #116]	; (80011d0 <StartTask_T_Gase+0x7c>)

	//Если температура дымовых газов больше, чем установил пользователь
	if(temp_now > temp_user){

		//Сообщить об аварии
		name_fail = Temperature_smoke_gas_exceeded; //Выбираем номер аварии
 800115a:	2703      	movs	r7, #3
 800115c:	4d1d      	ldr	r5, [pc, #116]	; (80011d4 <StartTask_T_Gase+0x80>)
 800115e:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80011d8 <StartTask_T_Gase+0x84>
 8001162:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80011dc <StartTask_T_Gase+0x88>
 8001166:	4e1e      	ldr	r6, [pc, #120]	; (80011e0 <StartTask_T_Gase+0x8c>)
	if(number == 1) HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, flag); //1 - off, 0 - on Реле1 на порту B1
 8001168:	f8df a078 	ldr.w	sl, [pc, #120]	; 80011e4 <StartTask_T_Gase+0x90>
 800116c:	e002      	b.n	8001174 <StartTask_T_Gase+0x20>
	osDelay(4);
 800116e:	2004      	movs	r0, #4
 8001170:	f003 fe1a 	bl	8004da8 <osDelay>
	if(input.state_Temp_Gase == 1)
 8001174:	7ee3      	ldrb	r3, [r4, #27]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d1f9      	bne.n	800116e <StartTask_T_Gase+0x1a>
	if(temp_now > temp_user){
 800117a:	88a1      	ldrh	r1, [r4, #4]
 800117c:	8aaa      	ldrh	r2, [r5, #20]
 800117e:	4291      	cmp	r1, r2
 8001180:	d2f5      	bcs.n	800116e <StartTask_T_Gase+0x1a>
	if(flag_work == 1){
 8001182:	f896 b000 	ldrb.w	fp, [r6]
		name_fail = Temperature_smoke_gas_exceeded; //Выбираем номер аварии
 8001186:	f889 7000 	strb.w	r7, [r9]
	if(flag_work == 1){
 800118a:	f1bb 0f01 	cmp.w	fp, #1
		fail_state_arr[name_fail].Fail_State = 1; //Переводим состояние ошибки в активен (1)
 800118e:	f888 3003 	strb.w	r3, [r8, #3]
	if(flag_work == 1){
 8001192:	d1ec      	bne.n	800116e <StartTask_T_Gase+0x1a>
		flag_work = 0; //Указываем, что сейчас система находится в выключенном состоянии
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	465a      	mov	r2, fp
 800119a:	4650      	mov	r0, sl
 800119c:	2102      	movs	r1, #2
 800119e:	7033      	strb	r3, [r6, #0]
 80011a0:	f002 f876 	bl	8003290 <HAL_GPIO_WritePin>
	if(number == 2) HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, flag); //1 - off, 0 - on Реле2 на порту B0
 80011a4:	465a      	mov	r2, fp
 80011a6:	4659      	mov	r1, fp
 80011a8:	4650      	mov	r0, sl
 80011aa:	f002 f871 	bl	8003290 <HAL_GPIO_WritePin>
	flag_pwm_fan = 0; //выкл вентилятор
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	f8df c034 	ldr.w	ip, [pc, #52]	; 80011e8 <StartTask_T_Gase+0x94>
	HAL_GPIO_WritePin(U6_MOC3021M_GPIO_Port, U6_MOC3021M_Pin, flag);
 80011b6:	4650      	mov	r0, sl
 80011b8:	465a      	mov	r2, fp
 80011ba:	2180      	movs	r1, #128	; 0x80
 80011bc:	f88c 3000 	strb.w	r3, [ip]
 80011c0:	f002 f866 	bl	8003290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U7_MOC3021M_GPIO_Port, U7_MOC3021M_Pin, flag);
 80011c4:	465a      	mov	r2, fp
 80011c6:	2140      	movs	r1, #64	; 0x40
 80011c8:	4650      	mov	r0, sl
 80011ca:	f002 f861 	bl	8003290 <HAL_GPIO_WritePin>
}
 80011ce:	e7ce      	b.n	800116e <StartTask_T_Gase+0x1a>
 80011d0:	20000004 	.word	0x20000004
 80011d4:	200000bc 	.word	0x200000bc
 80011d8:	20000a7c 	.word	0x20000a7c
 80011dc:	200008d8 	.word	0x200008d8
 80011e0:	200008e3 	.word	0x200008e3
 80011e4:	40010c00 	.word	0x40010c00
 80011e8:	200008e2 	.word	0x200008e2

080011ec <StartTask_Manage>:
{
 80011ec:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80011f0:	4d40      	ldr	r5, [pc, #256]	; (80012f4 <StartTask_Manage+0x108>)
 80011f2:	4f41      	ldr	r7, [pc, #260]	; (80012f8 <StartTask_Manage+0x10c>)
 80011f4:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80012fc <StartTask_Manage+0x110>
 80011f8:	f8df a104 	ldr.w	sl, [pc, #260]	; 8001300 <StartTask_Manage+0x114>
	if(number == 2) HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, flag); //1 - off, 0 - on Реле2 на порту B0
 80011fc:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8001304 <StartTask_Manage+0x118>
 8001200:	b083      	sub	sp, #12
 8001202:	e008      	b.n	8001216 <StartTask_Manage+0x2a>
	if(flag_mode_support == 1 && flag_work == 1 && flag_hand_fire == 0){
 8001204:	2c01      	cmp	r4, #1
 8001206:	d103      	bne.n	8001210 <StartTask_Manage+0x24>
 8001208:	f899 3000 	ldrb.w	r3, [r9]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d03f      	beq.n	8001290 <StartTask_Manage+0xa4>
    osDelay(1);
 8001210:	2001      	movs	r0, #1
 8001212:	f003 fdc9 	bl	8004da8 <osDelay>
	if(flag_Screw_work == 1){
 8001216:	782b      	ldrb	r3, [r5, #0]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d1f9      	bne.n	8001210 <StartTask_Manage+0x24>
	if(flag_mode_support == 0 && flag_work == 1 && flag_hand_fire == 0){
 800121c:	783c      	ldrb	r4, [r7, #0]
 800121e:	2c00      	cmp	r4, #0
 8001220:	d1f0      	bne.n	8001204 <StartTask_Manage+0x18>
 8001222:	f899 6000 	ldrb.w	r6, [r9]
 8001226:	2e01      	cmp	r6, #1
 8001228:	d1f2      	bne.n	8001210 <StartTask_Manage+0x24>
 800122a:	f89a 3000 	ldrb.w	r3, [sl]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1ee      	bne.n	8001210 <StartTask_Manage+0x24>
		Screw_process_repeate(0, input.time_engine_work_mode_1, input.time_engine_not_work_mode_1, 1);
 8001232:	4b35      	ldr	r3, [pc, #212]	; (8001308 <StartTask_Manage+0x11c>)
 8001234:	7a98      	ldrb	r0, [r3, #10]
 8001236:	f893 b00b 	ldrb.w	fp, [r3, #11]
		if((1 <= work_time_sec && 200 >= work_time_sec) && (1 <= not_work_time_sec && 200 >= not_work_time_sec)){
 800123a:	1e42      	subs	r2, r0, #1
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	2ac7      	cmp	r2, #199	; 0xc7
 8001240:	9001      	str	r0, [sp, #4]
 8001242:	d8e5      	bhi.n	8001210 <StartTask_Manage+0x24>
 8001244:	f10b 32ff 	add.w	r2, fp, #4294967295
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	2ac7      	cmp	r2, #199	; 0xc7
 800124c:	d8e0      	bhi.n	8001210 <StartTask_Manage+0x24>
	if(number == 2) HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, flag); //1 - off, 0 - on Реле2 на порту B0
 800124e:	4631      	mov	r1, r6
 8001250:	4640      	mov	r0, r8
 8001252:	4632      	mov	r2, r6
 8001254:	f002 f81c 	bl	8003290 <HAL_GPIO_WritePin>
	if(number == 1) HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, flag); //1 - off, 0 - on Реле1 на порту B1
 8001258:	4622      	mov	r2, r4
		osDelay(work_time_sec*1000); //время которое работает шнек
 800125a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	if(number == 1) HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, flag); //1 - off, 0 - on Реле1 на порту B1
 800125e:	2102      	movs	r1, #2
 8001260:	4640      	mov	r0, r8
 8001262:	f002 f815 	bl	8003290 <HAL_GPIO_WritePin>
		osDelay(work_time_sec*1000); //время которое работает шнек
 8001266:	9801      	ldr	r0, [sp, #4]
 8001268:	fb04 f000 	mul.w	r0, r4, r0
 800126c:	f003 fd9c 	bl	8004da8 <osDelay>
	if(number == 1) HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, flag); //1 - off, 0 - on Реле1 на порту B1
 8001270:	4632      	mov	r2, r6
 8001272:	2102      	movs	r1, #2
 8001274:	4640      	mov	r0, r8
 8001276:	f002 f80b 	bl	8003290 <HAL_GPIO_WritePin>
	if(number == 2) HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, flag); //1 - off, 0 - on Реле2 на порту B0
 800127a:	4632      	mov	r2, r6
 800127c:	4631      	mov	r1, r6
 800127e:	4640      	mov	r0, r8
 8001280:	f002 f806 	bl	8003290 <HAL_GPIO_WritePin>
		osDelay(not_work_time_sec*1000); //Задержку реализуем - шнек не работает это время
 8001284:	fb04 f00b 	mul.w	r0, r4, fp
 8001288:	f003 fd8e 	bl	8004da8 <osDelay>
	if(flag_mode_support == 1 && flag_work == 1 && flag_hand_fire == 0){
 800128c:	783c      	ldrb	r4, [r7, #0]
 800128e:	e7b9      	b.n	8001204 <StartTask_Manage+0x18>
 8001290:	f89a b000 	ldrb.w	fp, [sl]
 8001294:	f1bb 0f00 	cmp.w	fp, #0
 8001298:	d1ba      	bne.n	8001210 <StartTask_Manage+0x24>
		Screw_process_repeate(0, input.time_engine_work_mode_2, input.time_engine_not_work_mode_2, 1);
 800129a:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <StartTask_Manage+0x11c>)
 800129c:	7b13      	ldrb	r3, [r2, #12]
 800129e:	7b56      	ldrb	r6, [r2, #13]
		if((1 <= work_time_sec && 200 >= work_time_sec) && (1 <= not_work_time_sec && 200 >= not_work_time_sec)){
 80012a0:	1e5a      	subs	r2, r3, #1
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	2ac7      	cmp	r2, #199	; 0xc7
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	d8b2      	bhi.n	8001210 <StartTask_Manage+0x24>
 80012aa:	1e72      	subs	r2, r6, #1
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	2ac7      	cmp	r2, #199	; 0xc7
 80012b0:	d8ae      	bhi.n	8001210 <StartTask_Manage+0x24>
	if(number == 2) HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, flag); //1 - off, 0 - on Реле2 на порту B0
 80012b2:	4621      	mov	r1, r4
 80012b4:	4640      	mov	r0, r8
 80012b6:	4622      	mov	r2, r4
 80012b8:	f001 ffea 	bl	8003290 <HAL_GPIO_WritePin>
	if(number == 1) HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, flag); //1 - off, 0 - on Реле1 на порту B1
 80012bc:	465a      	mov	r2, fp
		osDelay(work_time_sec*1000); //время которое работает шнек
 80012be:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	if(number == 1) HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, flag); //1 - off, 0 - on Реле1 на порту B1
 80012c2:	2102      	movs	r1, #2
 80012c4:	4640      	mov	r0, r8
 80012c6:	f001 ffe3 	bl	8003290 <HAL_GPIO_WritePin>
		osDelay(work_time_sec*1000); //время которое работает шнек
 80012ca:	9b01      	ldr	r3, [sp, #4]
 80012cc:	fb0b f003 	mul.w	r0, fp, r3
 80012d0:	f003 fd6a 	bl	8004da8 <osDelay>
	if(number == 1) HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, flag); //1 - off, 0 - on Реле1 на порту B1
 80012d4:	4622      	mov	r2, r4
 80012d6:	4640      	mov	r0, r8
 80012d8:	2102      	movs	r1, #2
 80012da:	f001 ffd9 	bl	8003290 <HAL_GPIO_WritePin>
	if(number == 2) HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, flag); //1 - off, 0 - on Реле2 на порту B0
 80012de:	4640      	mov	r0, r8
 80012e0:	4622      	mov	r2, r4
 80012e2:	4621      	mov	r1, r4
 80012e4:	f001 ffd4 	bl	8003290 <HAL_GPIO_WritePin>
		osDelay(not_work_time_sec*1000); //Задержку реализуем - шнек не работает это время
 80012e8:	fb0b f006 	mul.w	r0, fp, r6
 80012ec:	f003 fd5c 	bl	8004da8 <osDelay>
 80012f0:	e78e      	b.n	8001210 <StartTask_Manage+0x24>
 80012f2:	bf00      	nop
 80012f4:	200008de 	.word	0x200008de
 80012f8:	200008e0 	.word	0x200008e0
 80012fc:	200008e3 	.word	0x200008e3
 8001300:	200008df 	.word	0x200008df
 8001304:	40010c00 	.word	0x40010c00
 8001308:	20000004 	.word	0x20000004

0800130c <STOP_WORK_ALL.part.0>:
void STOP_WORK_ALL(){
 800130c:	b538      	push	{r3, r4, r5, lr}
		flag_work = 0; //Указываем, что сейчас система находится в выключенном состоянии
 800130e:	2500      	movs	r5, #0
	if(number == 1) HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, flag); //1 - off, 0 - on Реле1 на порту B1
 8001310:	4c0d      	ldr	r4, [pc, #52]	; (8001348 <STOP_WORK_ALL.part.0+0x3c>)
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <STOP_WORK_ALL.part.0+0x40>)
 8001314:	4620      	mov	r0, r4
 8001316:	2201      	movs	r2, #1
 8001318:	2102      	movs	r1, #2
 800131a:	701d      	strb	r5, [r3, #0]
 800131c:	f001 ffb8 	bl	8003290 <HAL_GPIO_WritePin>
	if(number == 2) HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, flag); //1 - off, 0 - on Реле2 на порту B0
 8001320:	2201      	movs	r2, #1
 8001322:	4620      	mov	r0, r4
 8001324:	4611      	mov	r1, r2
 8001326:	f001 ffb3 	bl	8003290 <HAL_GPIO_WritePin>
	flag_pwm_fan = 0; //выкл вентилятор
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <STOP_WORK_ALL.part.0+0x44>)
	HAL_GPIO_WritePin(U6_MOC3021M_GPIO_Port, U6_MOC3021M_Pin, flag);
 800132c:	4620      	mov	r0, r4
 800132e:	2201      	movs	r2, #1
 8001330:	2180      	movs	r1, #128	; 0x80
 8001332:	701d      	strb	r5, [r3, #0]
 8001334:	f001 ffac 	bl	8003290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U7_MOC3021M_GPIO_Port, U7_MOC3021M_Pin, flag);
 8001338:	4620      	mov	r0, r4
}
 800133a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800133e:	2201      	movs	r2, #1
 8001340:	2140      	movs	r1, #64	; 0x40
 8001342:	f001 bfa5 	b.w	8003290 <HAL_GPIO_WritePin>
 8001346:	bf00      	nop
 8001348:	40010c00 	.word	0x40010c00
 800134c:	200008e3 	.word	0x200008e3
 8001350:	200008e2 	.word	0x200008e2

08001354 <StartTask_T_Boiler>:
  osTimerStart(Timer_Boiler_ZeroHandle, input.time_boiler_zero*60000); //Таймер который по истечении начнет учет погас ли бойлер
 8001354:	f64e 2160 	movw	r1, #60000	; 0xea60
{
 8001358:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
  osTimerStart(Timer_Boiler_ZeroHandle, input.time_boiler_zero*60000); //Таймер который по истечении начнет учет погас ли бойлер
 800135c:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8001458 <StartTask_T_Boiler+0x104>
 8001360:	483e      	ldr	r0, [pc, #248]	; (800145c <StartTask_T_Boiler+0x108>)
 8001362:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8001366:	6800      	ldr	r0, [r0, #0]
 8001368:	fb03 f101 	mul.w	r1, r3, r1

		STOP_WORK_ALL();

		//Записать в журнал
		name_fail = Boiler_extinguished; //Выбираем номер аварии
		fail_state_arr[name_fail].Fail_State = 1; //Переводим состояние ошибки в активен (1)
 800136c:	f04f 0a01 	mov.w	sl, #1
		flag_Screw_work = 0; //по сути выключаем шнек
 8001370:	f04f 0900 	mov.w	r9, #0
  osTimerStart(Timer_Boiler_ZeroHandle, input.time_boiler_zero*60000); //Таймер который по истечении начнет учет погас ли бойлер
 8001374:	f003 fd74 	bl	8004e60 <osTimerStart>
 8001378:	4e39      	ldr	r6, [pc, #228]	; (8001460 <StartTask_T_Boiler+0x10c>)
 800137a:	4c3a      	ldr	r4, [pc, #232]	; (8001464 <StartTask_T_Boiler+0x110>)
 800137c:	4d3a      	ldr	r5, [pc, #232]	; (8001468 <StartTask_T_Boiler+0x114>)
 800137e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800146c <StartTask_T_Boiler+0x118>
 8001382:	4f3b      	ldr	r7, [pc, #236]	; (8001470 <StartTask_T_Boiler+0x11c>)
 8001384:	e026      	b.n	80013d4 <StartTask_T_Boiler+0x80>
	if(input.thermostat_onoff == 1){
 8001386:	f89b 3016 	ldrb.w	r3, [fp, #22]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d039      	beq.n	8001402 <StartTask_T_Boiler+0xae>
	if(Sens_a.Temp_Boiler.value  >= input.Temp_Central_Heating + input.Temp_Central_Heating_Hysteresis && flag_mode_support == 0 ){
 800138e:	f89b 3011 	ldrb.w	r3, [fp, #17]
 8001392:	f89b 1012 	ldrb.w	r1, [fp, #18]
 8001396:	8862      	ldrh	r2, [r4, #2]
 8001398:	1858      	adds	r0, r3, r1
 800139a:	4282      	cmp	r2, r0
 800139c:	db0b      	blt.n	80013b6 <StartTask_T_Boiler+0x62>
 800139e:	7828      	ldrb	r0, [r5, #0]
 80013a0:	b9a8      	cbnz	r0, 80013ce <StartTask_T_Boiler+0x7a>
		if(flag_mode_support_onoff == 1) flag_mode_support = 1; //если включен режим поддержки
 80013a2:	f898 0000 	ldrb.w	r0, [r8]
		flag_Screw_work = 0; //по сути выключаем шнек
 80013a6:	f887 9000 	strb.w	r9, [r7]
		if(flag_mode_support_onoff == 1) flag_mode_support = 1; //если включен режим поддержки
 80013aa:	2801      	cmp	r0, #1
 80013ac:	bf08      	it	eq
 80013ae:	7028      	strbeq	r0, [r5, #0]
		flag_pwm_fan = 0; //и вентилятор
 80013b0:	4830      	ldr	r0, [pc, #192]	; (8001474 <StartTask_T_Boiler+0x120>)
 80013b2:	f880 9000 	strb.w	r9, [r0]
	if(Sens_a.Temp_Boiler.value < input.Temp_Central_Heating - input.Temp_Central_Heating_Hysteresis  && flag_mode_support == 0 ){
 80013b6:	1a5b      	subs	r3, r3, r1
 80013b8:	429a      	cmp	r2, r3
 80013ba:	da08      	bge.n	80013ce <StartTask_T_Boiler+0x7a>
 80013bc:	782b      	ldrb	r3, [r5, #0]
 80013be:	b933      	cbnz	r3, 80013ce <StartTask_T_Boiler+0x7a>
		if(flag_mode_support_onoff == 1) flag_mode_support = 1; //если включен режим поддержки
 80013c0:	f898 3000 	ldrb.w	r3, [r8]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	bf08      	it	eq
 80013c8:	702b      	strbeq	r3, [r5, #0]
		flag_Screw_work = 1; //по сути включаем шнек и вентилятор
 80013ca:	f887 a000 	strb.w	sl, [r7]
    osDelay(5);
 80013ce:	2005      	movs	r0, #5
 80013d0:	f003 fcea 	bl	8004da8 <osDelay>
	if(flag_zero_boiler == 1){
 80013d4:	7833      	ldrb	r3, [r6, #0]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d1d5      	bne.n	8001386 <StartTask_T_Boiler+0x32>
	if(Temp_now < Temp_user){
 80013da:	f89b 2000 	ldrb.w	r2, [fp]
 80013de:	78a3      	ldrb	r3, [r4, #2]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d9d0      	bls.n	8001386 <StartTask_T_Boiler+0x32>
	if(flag_work == 1){
 80013e4:	4b24      	ldr	r3, [pc, #144]	; (8001478 <StartTask_T_Boiler+0x124>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d02d      	beq.n	8001448 <StartTask_T_Boiler+0xf4>
		name_fail = Boiler_extinguished; //Выбираем номер аварии
 80013ec:	f04f 0202 	mov.w	r2, #2
 80013f0:	4b22      	ldr	r3, [pc, #136]	; (800147c <StartTask_T_Boiler+0x128>)
 80013f2:	701a      	strb	r2, [r3, #0]
		fail_state_arr[name_fail].Fail_State = 1; //Переводим состояние ошибки в активен (1)
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <StartTask_T_Boiler+0x12c>)
 80013f6:	f883 a002 	strb.w	sl, [r3, #2]
	if(input.thermostat_onoff == 1){
 80013fa:	f89b 3016 	ldrb.w	r3, [fp, #22]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d1c5      	bne.n	800138e <StartTask_T_Boiler+0x3a>
		if(Sens_a.Thermostat.value == flag_thermostat_type && flag_mode_support == 0){
 8001402:	4a20      	ldr	r2, [pc, #128]	; (8001484 <StartTask_T_Boiler+0x130>)
 8001404:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8001406:	7812      	ldrb	r2, [r2, #0]
 8001408:	4291      	cmp	r1, r2
 800140a:	d007      	beq.n	800141c <StartTask_T_Boiler+0xc8>
		if(Sens_a.Thermostat.value != flag_thermostat_type && flag_mode_support == 0 ){
 800140c:	782a      	ldrb	r2, [r5, #0]
 800140e:	b97a      	cbnz	r2, 8001430 <StartTask_T_Boiler+0xdc>
			if(flag_mode_support_onoff == 1) flag_mode_support = 1; //если включен режим поддержки
 8001410:	f898 2000 	ldrb.w	r2, [r8]
 8001414:	2a01      	cmp	r2, #1
 8001416:	d013      	beq.n	8001440 <StartTask_T_Boiler+0xec>
			flag_Screw_work = 1; //по сути включаем шнек и вентилятор
 8001418:	703b      	strb	r3, [r7, #0]
		if(Sens_a.Thermostat.value != flag_thermostat_type && flag_mode_support == 1 ){
 800141a:	e7d8      	b.n	80013ce <StartTask_T_Boiler+0x7a>
		if(Sens_a.Thermostat.value == flag_thermostat_type && flag_mode_support == 0){
 800141c:	782b      	ldrb	r3, [r5, #0]
 800141e:	b963      	cbnz	r3, 800143a <StartTask_T_Boiler+0xe6>
			if(flag_mode_support_onoff == 1) flag_mode_support = 1; //если включен режим поддержки
 8001420:	f898 2000 	ldrb.w	r2, [r8]
 8001424:	2a01      	cmp	r2, #1
 8001426:	d012      	beq.n	800144e <StartTask_T_Boiler+0xfa>
			flag_pwm_fan = 0; //и вентилятор
 8001428:	4a12      	ldr	r2, [pc, #72]	; (8001474 <StartTask_T_Boiler+0x120>)
			flag_Screw_work = 0; //по сути выключаем шнек
 800142a:	703b      	strb	r3, [r7, #0]
			flag_pwm_fan = 0; //и вентилятор
 800142c:	7013      	strb	r3, [r2, #0]
		if(Sens_a.Thermostat.value == flag_thermostat_type && flag_mode_support == 1 ){
 800142e:	e7ce      	b.n	80013ce <StartTask_T_Boiler+0x7a>
		if(Sens_a.Thermostat.value != flag_thermostat_type && flag_mode_support == 1 ){
 8001430:	2a01      	cmp	r2, #1
 8001432:	d1cc      	bne.n	80013ce <StartTask_T_Boiler+0x7a>
			flag_mode_support = 0; //если включен режим поддержки
 8001434:	f885 9000 	strb.w	r9, [r5]
 8001438:	e7c9      	b.n	80013ce <StartTask_T_Boiler+0x7a>
		if(Sens_a.Thermostat.value == flag_thermostat_type && flag_mode_support == 1 ){
 800143a:	2b01      	cmp	r3, #1
 800143c:	d1c7      	bne.n	80013ce <StartTask_T_Boiler+0x7a>
 800143e:	e7c4      	b.n	80013ca <StartTask_T_Boiler+0x76>
			flag_Screw_work = 1; //по сути включаем шнек и вентилятор
 8001440:	703a      	strb	r2, [r7, #0]
			flag_mode_support = 0; //если включен режим поддержки
 8001442:	f885 9000 	strb.w	r9, [r5]
 8001446:	e7c2      	b.n	80013ce <StartTask_T_Boiler+0x7a>
 8001448:	f7ff ff60 	bl	800130c <STOP_WORK_ALL.part.0>
 800144c:	e7ce      	b.n	80013ec <StartTask_T_Boiler+0x98>
			if(flag_mode_support_onoff == 1) flag_mode_support = 1; //если включен режим поддержки
 800144e:	702a      	strb	r2, [r5, #0]
			flag_pwm_fan = 0; //и вентилятор
 8001450:	4a08      	ldr	r2, [pc, #32]	; (8001474 <StartTask_T_Boiler+0x120>)
 8001452:	7013      	strb	r3, [r2, #0]
		if(Sens_a.Thermostat.value == flag_thermostat_type && flag_mode_support == 1 ){
 8001454:	e7b9      	b.n	80013ca <StartTask_T_Boiler+0x76>
 8001456:	bf00      	nop
 8001458:	20000004 	.word	0x20000004
 800145c:	20000884 	.word	0x20000884
 8001460:	200008e4 	.word	0x200008e4
 8001464:	200000bc 	.word	0x200000bc
 8001468:	200008e0 	.word	0x200008e0
 800146c:	200008e1 	.word	0x200008e1
 8001470:	200008de 	.word	0x200008de
 8001474:	200008e2 	.word	0x200008e2
 8001478:	200008e3 	.word	0x200008e3
 800147c:	20000a7c 	.word	0x20000a7c
 8001480:	200008d8 	.word	0x200008d8
 8001484:	20000002 	.word	0x20000002

08001488 <Average_Get_Value_mVolt>:
void Average_Get_Value_mVolt(){
 8001488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t Bf[ADC_CHANNELS_NUM] = {0};
 800148c:	2400      	movs	r4, #0
 800148e:	270a      	movs	r7, #10
void Average_Get_Value_mVolt(){
 8001490:	b087      	sub	sp, #28
 8001492:	4e5f      	ldr	r6, [pc, #380]	; (8001610 <Average_Get_Value_mVolt+0x188>)
	uint32_t Bf[ADC_CHANNELS_NUM] = {0};
 8001494:	e9cd 4400 	strd	r4, r4, [sp]
 8001498:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800149c:	e9cd 4404 	strd	r4, r4, [sp, #16]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, ADC_CHANNELS_NUM);  //измеряем напряжение АЦПшкой
 80014a0:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8001614 <Average_Get_Value_mVolt+0x18c>
 80014a4:	f1a6 090c 	sub.w	r9, r6, #12
 80014a8:	2206      	movs	r2, #6
 80014aa:	4649      	mov	r1, r9
 80014ac:	4640      	mov	r0, r8
 80014ae:	f001 fa31 	bl	8002914 <HAL_ADC_Start_DMA>
		for(uint8_t j = 0; j < ADC_CHANNELS_NUM; j++){ //суммируем
 80014b2:	466d      	mov	r5, sp
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, ADC_CHANNELS_NUM);  //измеряем напряжение АЦПшкой
 80014b4:	4669      	mov	r1, sp
 80014b6:	4a58      	ldr	r2, [pc, #352]	; (8001618 <Average_Get_Value_mVolt+0x190>)
 80014b8:	e000      	b.n	80014bc <Average_Get_Value_mVolt+0x34>
			Bf[j] =  Bf[j] + adcData[j];
 80014ba:	680c      	ldr	r4, [r1, #0]
 80014bc:	f832 3b02 	ldrh.w	r3, [r2], #2
 80014c0:	4423      	add	r3, r4
		for(uint8_t j = 0; j < ADC_CHANNELS_NUM; j++){ //суммируем
 80014c2:	42b2      	cmp	r2, r6
			Bf[j] =  Bf[j] + adcData[j];
 80014c4:	f841 3b04 	str.w	r3, [r1], #4
		for(uint8_t j = 0; j < ADC_CHANNELS_NUM; j++){ //суммируем
 80014c8:	d1f7      	bne.n	80014ba <Average_Get_Value_mVolt+0x32>
	for(uint8_t i = 0; i < SIZE_AVERAGE; i++){ // SIZE_AVERAGE Сколько измерений проводим
 80014ca:	1e7b      	subs	r3, r7, #1
 80014cc:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
 80014d0:	d001      	beq.n	80014d6 <Average_Get_Value_mVolt+0x4e>
			Bf[j] =  Bf[j] + adcData[j];
 80014d2:	9c00      	ldr	r4, [sp, #0]
 80014d4:	e7e8      	b.n	80014a8 <Average_Get_Value_mVolt+0x20>
		   adcVoltage[i] = (uint32_t) (1000*Bf[i] * REFERENCE_VOLTAGE / 4095); //в милливольты пересчитываем
 80014d6:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
 80014da:	a741      	add	r7, pc, #260	; (adr r7, 80015e0 <Average_Get_Value_mVolt+0x158>)
 80014dc:	e9d7 6700 	ldrd	r6, r7, [r7]
 80014e0:	f20f 1b04 	addw	fp, pc, #260	; 0x104
 80014e4:	e9db ab00 	ldrd	sl, fp, [fp]
 80014e8:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800161c <Average_Get_Value_mVolt+0x194>
 80014ec:	ac06      	add	r4, sp, #24
 80014ee:	f855 0b04 	ldr.w	r0, [r5], #4
 80014f2:	fb09 f000 	mul.w	r0, r9, r0
 80014f6:	f7fe ff75 	bl	80003e4 <__aeabi_ui2d>
 80014fa:	4632      	mov	r2, r6
 80014fc:	463b      	mov	r3, r7
 80014fe:	f7fe ffeb 	bl	80004d8 <__aeabi_dmul>
 8001502:	4652      	mov	r2, sl
 8001504:	465b      	mov	r3, fp
 8001506:	f7ff f911 	bl	800072c <__aeabi_ddiv>
 800150a:	f7ff fa95 	bl	8000a38 <__aeabi_d2uiz>
	for (uint8_t i = 0; i < ADC_CHANNELS_NUM; i++){
 800150e:	42ac      	cmp	r4, r5
		   adcVoltage[i] = (uint32_t) (1000*Bf[i] * REFERENCE_VOLTAGE / 4095); //в милливольты пересчитываем
 8001510:	f848 0b04 	str.w	r0, [r8], #4
	for (uint8_t i = 0; i < ADC_CHANNELS_NUM; i++){
 8001514:	d1eb      	bne.n	80014ee <Average_Get_Value_mVolt+0x66>
	Sens_a.Temp_Boiler.voltage = Get_Resist(adcVoltage[5]/SIZE_AVERAGE, 10000);
 8001516:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800161c <Average_Get_Value_mVolt+0x194>
 800151a:	4e41      	ldr	r6, [pc, #260]	; (8001620 <Average_Get_Value_mVolt+0x198>)
 800151c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8001520:	4c40      	ldr	r4, [pc, #256]	; (8001624 <Average_Get_Value_mVolt+0x19c>)
 8001522:	fba6 2303 	umull	r2, r3, r6, r3
	Resist = (((float) Voltage/1000) * Resist_dev) / ( (float) REFERENCE_VOLTAGE - ((float) Voltage/1000) ); //Для сопротивления 100 напряжение 0.035, для 10ком напряжение 1.6
 8001526:	f3c3 00cf 	ubfx	r0, r3, #3, #16
 800152a:	f7ff fbab 	bl	8000c84 <__aeabi_ui2f>
 800152e:	493e      	ldr	r1, [pc, #248]	; (8001628 <Average_Get_Value_mVolt+0x1a0>)
 8001530:	f7ff fcb4 	bl	8000e9c <__aeabi_fdiv>
 8001534:	493d      	ldr	r1, [pc, #244]	; (800162c <Average_Get_Value_mVolt+0x1a4>)
 8001536:	4607      	mov	r7, r0
 8001538:	f7ff fbfc 	bl	8000d34 <__aeabi_fmul>
 800153c:	4639      	mov	r1, r7
 800153e:	4605      	mov	r5, r0
 8001540:	483b      	ldr	r0, [pc, #236]	; (8001630 <Average_Get_Value_mVolt+0x1a8>)
 8001542:	f7ff faed 	bl	8000b20 <__aeabi_fsub>
 8001546:	4601      	mov	r1, r0
 8001548:	4628      	mov	r0, r5
 800154a:	f7ff fca7 	bl	8000e9c <__aeabi_fdiv>
	Sens_a.Temp_Boiler.voltage = Get_Resist(adcVoltage[5]/SIZE_AVERAGE, 10000);
 800154e:	f7ff fd41 	bl	8000fd4 <__aeabi_f2uiz>
 8001552:	b280      	uxth	r0, r0
 8001554:	8020      	strh	r0, [r4, #0]

	float Temp;

	//Temp = 110.644633207656 - 0.0188903879012957 * R + 1.06916019165182 *0.000001 * R * R;

	Temp = -31.03*log(R)+310.39;
 8001556:	f7fe ff45 	bl	80003e4 <__aeabi_ui2d>
 800155a:	f005 fbff 	bl	8006d5c <log>
 800155e:	a324      	add	r3, pc, #144	; (adr r3, 80015f0 <Average_Get_Value_mVolt+0x168>)
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	f7fe ffb8 	bl	80004d8 <__aeabi_dmul>
 8001568:	a323      	add	r3, pc, #140	; (adr r3, 80015f8 <Average_Get_Value_mVolt+0x170>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7fe fdfd 	bl	800016c <__adddf3>
 8001572:	f7ff fa81 	bl	8000a78 <__aeabi_d2f>
	Sens_a.Temp_Boiler.value = Get_Temp_NTC3435(Get_Resist(adcVoltage[5]/SIZE_AVERAGE, 10000)); //Температура котла
 8001576:	f7ff fd2d 	bl	8000fd4 <__aeabi_f2uiz>
 800157a:	4603      	mov	r3, r0
	Sens_a.Current_LM321.voltage = adcVoltage[1]/SIZE_AVERAGE;
 800157c:	f8d8 0004 	ldr.w	r0, [r8, #4]
	Sens_a.Temp_Boiler.value = Get_Temp_NTC3435(Get_Resist(adcVoltage[5]/SIZE_AVERAGE, 10000)); //Температура котла
 8001580:	8063      	strh	r3, [r4, #2]
	Sens_a.Current_LM321.voltage = adcVoltage[1]/SIZE_AVERAGE;
 8001582:	fba6 2000 	umull	r2, r0, r6, r0
 8001586:	f3c0 00cf 	ubfx	r0, r0, #3, #16
 800158a:	80e0      	strh	r0, [r4, #6]
	Current = (VALUE_ZERO_ACS_VOLTAGE - ((float) ACS_Voltage/1000))/(SENSITY_UNIT_CURRENT*1000);
 800158c:	f7ff fb7a 	bl	8000c84 <__aeabi_ui2f>
 8001590:	4925      	ldr	r1, [pc, #148]	; (8001628 <Average_Get_Value_mVolt+0x1a0>)
 8001592:	f7ff fc83 	bl	8000e9c <__aeabi_fdiv>
 8001596:	f7fe ff47 	bl	8000428 <__aeabi_f2d>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	a118      	add	r1, pc, #96	; (adr r1, 8001600 <Average_Get_Value_mVolt+0x178>)
 80015a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015a4:	f7fe fde0 	bl	8000168 <__aeabi_dsub>
 80015a8:	a317      	add	r3, pc, #92	; (adr r3, 8001608 <Average_Get_Value_mVolt+0x180>)
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7ff f8bd 	bl	800072c <__aeabi_ddiv>
 80015b2:	f7ff fa61 	bl	8000a78 <__aeabi_d2f>
	Sens_a.Current_LM321.value = Get_Current_Engine(Sens_a.Current_LM321.voltage); //Ток с LM321
 80015b6:	f7ff fd0d 	bl	8000fd4 <__aeabi_f2uiz>
	Sens_a.Thermostat.voltage = 0; //не считываем напряжение с крышки, только уровень
 80015ba:	2300      	movs	r3, #0
	Sens_a.Current_LM321.value = Get_Current_Engine(Sens_a.Current_LM321.voltage); //Ток с LM321
 80015bc:	4602      	mov	r2, r0
	uint8_t flag = HAL_GPIO_ReadPin(Thermostat_GPIO_Port, Thermostat_Pin);;
 80015be:	2140      	movs	r1, #64	; 0x40
 80015c0:	481c      	ldr	r0, [pc, #112]	; (8001634 <Average_Get_Value_mVolt+0x1ac>)
	Sens_a.Current_LM321.value = Get_Current_Engine(Sens_a.Current_LM321.voltage); //Ток с LM321
 80015c2:	8122      	strh	r2, [r4, #8]
	Sens_a.Thermostat.voltage = 0; //не считываем напряжение с крышки, только уровень
 80015c4:	8563      	strh	r3, [r4, #42]	; 0x2a
	uint8_t flag = HAL_GPIO_ReadPin(Thermostat_GPIO_Port, Thermostat_Pin);;
 80015c6:	f001 fe5d 	bl	8003284 <HAL_GPIO_ReadPin>
	state_arr[5].state = Sens_a.Thermostat.state;
 80015ca:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <Average_Get_Value_mVolt+0x1b0>)
 80015cc:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
	state_arr[5].voltage = Sens_a.Thermostat.voltage;
 80015d0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	state_arr[5].state = Sens_a.Thermostat.state;
 80015d2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
	state_arr[5].voltage = Sens_a.Thermostat.voltage;
 80015d6:	83da      	strh	r2, [r3, #30]
	Sens_a.Thermostat.value = Thermostat_State(); //Термостат
 80015d8:	85a0      	strh	r0, [r4, #44]	; 0x2c
}
 80015da:	b007      	add	sp, #28
 80015dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015e0:	66666666 	.word	0x66666666
 80015e4:	400a6666 	.word	0x400a6666
 80015e8:	00000000 	.word	0x00000000
 80015ec:	40affe00 	.word	0x40affe00
 80015f0:	147ae148 	.word	0x147ae148
 80015f4:	c03f07ae 	.word	0xc03f07ae
 80015f8:	70a3d70a 	.word	0x70a3d70a
 80015fc:	4073663d 	.word	0x4073663d
 8001600:	ba5e353f 	.word	0xba5e353f
 8001604:	3ff20c49 	.word	0x3ff20c49
 8001608:	00000000 	.word	0x00000000
 800160c:	410bf440 	.word	0x410bf440
 8001610:	20000898 	.word	0x20000898
 8001614:	200008e8 	.word	0x200008e8
 8001618:	2000088c 	.word	0x2000088c
 800161c:	20000898 	.word	0x20000898
 8001620:	cccccccd 	.word	0xcccccccd
 8001624:	200000bc 	.word	0x200000bc
 8001628:	447a0000 	.word	0x447a0000
 800162c:	461c4000 	.word	0x461c4000
 8001630:	40533333 	.word	0x40533333
 8001634:	40010800 	.word	0x40010800
 8001638:	20000aa4 	.word	0x20000aa4

0800163c <StartTask_ADC>:
{
 800163c:	b510      	push	{r4, lr}
 800163e:	4c05      	ldr	r4, [pc, #20]	; (8001654 <StartTask_ADC+0x18>)
	priority = osThreadGetPriority(Task_ADCHandle);
 8001640:	6820      	ldr	r0, [r4, #0]
 8001642:	f003 fb9b 	bl	8004d7c <osThreadGetPriority>
	Average_Get_Value_mVolt(); //Снимаем показания с АЦП каналов
 8001646:	f7ff ff1f 	bl	8001488 <Average_Get_Value_mVolt>
    osDelay(20);
 800164a:	2014      	movs	r0, #20
 800164c:	f003 fbac 	bl	8004da8 <osDelay>
  for(;;)
 8001650:	e7f6      	b.n	8001640 <StartTask_ADC+0x4>
 8001652:	bf00      	nop
 8001654:	200000ec 	.word	0x200000ec

08001658 <HAL_GPIO_EXTI_Callback>:
	if (GPIO_Pin == U2_PC817_Pin) {
 8001658:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){ //Вызывается, когда на пине PB9 есть сигнал с PC817
 800165c:	b510      	push	{r4, lr}
	if (GPIO_Pin == U2_PC817_Pin) {
 800165e:	d036      	beq.n	80016ce <HAL_GPIO_EXTI_Callback+0x76>
    if (GPIO_Pin == Encoder_1_Pin || GPIO_Pin == Encoder_2_Pin) {
 8001660:	2804      	cmp	r0, #4
 8001662:	d002      	beq.n	800166a <HAL_GPIO_EXTI_Callback+0x12>
 8001664:	2808      	cmp	r0, #8
 8001666:	d000      	beq.n	800166a <HAL_GPIO_EXTI_Callback+0x12>
}
 8001668:	bd10      	pop	{r4, pc}
	return (uint8_t)((HAL_GPIO_ReadPin(Encoder_1_GPIO_Port, Encoder_1_Pin) << 1)
 800166a:	2104      	movs	r1, #4
 800166c:	4831      	ldr	r0, [pc, #196]	; (8001734 <HAL_GPIO_EXTI_Callback+0xdc>)
 800166e:	f001 fe09 	bl	8003284 <HAL_GPIO_ReadPin>
			| (HAL_GPIO_ReadPin(Encoder_2_GPIO_Port, Encoder_2_Pin)));
 8001672:	2108      	movs	r1, #8
	return (uint8_t)((HAL_GPIO_ReadPin(Encoder_1_GPIO_Port, Encoder_1_Pin) << 1)
 8001674:	4604      	mov	r4, r0
			| (HAL_GPIO_ReadPin(Encoder_2_GPIO_Port, Encoder_2_Pin)));
 8001676:	482f      	ldr	r0, [pc, #188]	; (8001734 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001678:	f001 fe04 	bl	8003284 <HAL_GPIO_ReadPin>
		if (rot_old_state == 3 && rot_new_state == 2) {        // 3 -> 2 transition
 800167c:	492e      	ldr	r1, [pc, #184]	; (8001738 <HAL_GPIO_EXTI_Callback+0xe0>)
		rot_new_state = rot_get_state();
 800167e:	4a2f      	ldr	r2, [pc, #188]	; (800173c <HAL_GPIO_EXTI_Callback+0xe4>)
		if (rot_old_state == 3 && rot_new_state == 2) {        // 3 -> 2 transition
 8001680:	780b      	ldrb	r3, [r1, #0]
			| (HAL_GPIO_ReadPin(Encoder_2_GPIO_Port, Encoder_2_Pin)));
 8001682:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
	return (uint8_t)((HAL_GPIO_ReadPin(Encoder_1_GPIO_Port, Encoder_1_Pin) << 1)
 8001686:	b2c0      	uxtb	r0, r0
		if (rot_old_state == 3 && rot_new_state == 2) {        // 3 -> 2 transition
 8001688:	2b03      	cmp	r3, #3
		rot_new_state = rot_get_state();
 800168a:	7010      	strb	r0, [r2, #0]
		if (rot_old_state == 3 && rot_new_state == 2) {        // 3 -> 2 transition
 800168c:	d04d      	beq.n	800172a <HAL_GPIO_EXTI_Callback+0xd2>
		} else if (rot_old_state == 2 && rot_new_state == 0) { // 2 -> 0 transition
 800168e:	2b02      	cmp	r3, #2
 8001690:	d02b      	beq.n	80016ea <HAL_GPIO_EXTI_Callback+0x92>
		} else if (rot_old_state == 0 && rot_new_state == 1) { // 0 -> 1 transition
 8001692:	2b00      	cmp	r3, #0
 8001694:	d13c      	bne.n	8001710 <HAL_GPIO_EXTI_Callback+0xb8>
 8001696:	2801      	cmp	r0, #1
 8001698:	d041      	beq.n	800171e <HAL_GPIO_EXTI_Callback+0xc6>
		} else if (rot_old_state == 0 && rot_new_state == 2) { // 0 -> 2 transition
 800169a:	2802      	cmp	r0, #2
 800169c:	d028      	beq.n	80016f0 <HAL_GPIO_EXTI_Callback+0x98>
			if(button_mail.mail_state == BUTTON_MAIL_PROCESSED){
 800169e:	4b28      	ldr	r3, [pc, #160]	; (8001740 <HAL_GPIO_EXTI_Callback+0xe8>)
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	b912      	cbnz	r2, 80016aa <HAL_GPIO_EXTI_Callback+0x52>
				button_mail.mail_state = BUTTON_MAIL_UPDATED;
 80016a4:	2401      	movs	r4, #1
				button_mail.button_state = BUTTON_UP;
 80016a6:	709a      	strb	r2, [r3, #2]
				button_mail.mail_state = BUTTON_MAIL_UPDATED;
 80016a8:	801c      	strh	r4, [r3, #0]
    	if (rot_cnt < 0){
 80016aa:	4a26      	ldr	r2, [pc, #152]	; (8001744 <HAL_GPIO_EXTI_Callback+0xec>)
 80016ac:	f992 3000 	ldrsb.w	r3, [r2]
 80016b0:	2b00      	cmp	r3, #0
    	rot_old_state = rot_new_state;
 80016b2:	7008      	strb	r0, [r1, #0]
    	if (rot_cnt < 0){
 80016b4:	db24      	blt.n	8001700 <HAL_GPIO_EXTI_Callback+0xa8>
    	if(rot_cnt > 0){
 80016b6:	d007      	beq.n	80016c8 <HAL_GPIO_EXTI_Callback+0x70>
    		if(button_mail.mail_state == BUTTON_MAIL_PROCESSED){
 80016b8:	4b21      	ldr	r3, [pc, #132]	; (8001740 <HAL_GPIO_EXTI_Callback+0xe8>)
 80016ba:	7819      	ldrb	r1, [r3, #0]
 80016bc:	b921      	cbnz	r1, 80016c8 <HAL_GPIO_EXTI_Callback+0x70>
    			button_mail.mail_state = BUTTON_MAIL_UPDATED;
 80016be:	f240 2001 	movw	r0, #513	; 0x201
    			button_mail.button_state = BUTTON_SHORT_PUSHED;
 80016c2:	2101      	movs	r1, #1
    			button_mail.mail_state = BUTTON_MAIL_UPDATED;
 80016c4:	8018      	strh	r0, [r3, #0]
    			button_mail.button_state = BUTTON_SHORT_PUSHED;
 80016c6:	7099      	strb	r1, [r3, #2]
    	rot_cnt = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	7013      	strb	r3, [r2, #0]
}
 80016cc:	bd10      	pop	{r4, pc}
    HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 80016ce:	2108      	movs	r1, #8
 80016d0:	481d      	ldr	r0, [pc, #116]	; (8001748 <HAL_GPIO_EXTI_Callback+0xf0>)
 80016d2:	f002 fdf1 	bl	80042b8 <HAL_TIM_PWM_Stop>
    if( flag_pwm_fan == 1 ){ //для вкл/выкл вентилятора
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <HAL_GPIO_EXTI_Callback+0xf4>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d1c4      	bne.n	8001668 <HAL_GPIO_EXTI_Callback+0x10>
}
 80016de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //Таймер считает до значения value в  Set_PWM_ZC и отправляет импульс до времени 9000
 80016e2:	2108      	movs	r1, #8
 80016e4:	4818      	ldr	r0, [pc, #96]	; (8001748 <HAL_GPIO_EXTI_Callback+0xf0>)
 80016e6:	f002 bde5 	b.w	80042b4 <HAL_TIM_PWM_Start>
		} else if (rot_old_state == 2 && rot_new_state == 0) { // 2 -> 0 transition
 80016ea:	b1c0      	cbz	r0, 800171e <HAL_GPIO_EXTI_Callback+0xc6>
		} else if (rot_old_state == 2 && rot_new_state == 3) { // 2 -> 3 transition
 80016ec:	2803      	cmp	r0, #3
 80016ee:	d1d6      	bne.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
			rot_cnt--;
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <HAL_GPIO_EXTI_Callback+0xec>)
    	rot_old_state = rot_new_state;
 80016f2:	7008      	strb	r0, [r1, #0]
			rot_cnt--;
 80016f4:	7813      	ldrb	r3, [r2, #0]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	b25b      	sxtb	r3, r3
    	if (rot_cnt < 0){
 80016fa:	2b00      	cmp	r3, #0
			rot_cnt--;
 80016fc:	7013      	strb	r3, [r2, #0]
    	if (rot_cnt < 0){
 80016fe:	dada      	bge.n	80016b6 <HAL_GPIO_EXTI_Callback+0x5e>
    		if(button_mail.mail_state == BUTTON_MAIL_PROCESSED){
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001702:	7819      	ldrb	r1, [r3, #0]
 8001704:	2900      	cmp	r1, #0
 8001706:	d1df      	bne.n	80016c8 <HAL_GPIO_EXTI_Callback+0x70>
    			button_mail.mail_state = BUTTON_MAIL_UPDATED;
 8001708:	2101      	movs	r1, #1
 800170a:	8019      	strh	r1, [r3, #0]
    			button_mail.button_state = BUTTON_SHORT_PUSHED;
 800170c:	7099      	strb	r1, [r3, #2]
 800170e:	e7db      	b.n	80016c8 <HAL_GPIO_EXTI_Callback+0x70>
		} else if (rot_old_state == 1 && rot_new_state == 3) { // 1 -> 3 transition
 8001710:	2b01      	cmp	r3, #1
 8001712:	d1c4      	bne.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
 8001714:	2803      	cmp	r0, #3
 8001716:	d002      	beq.n	800171e <HAL_GPIO_EXTI_Callback+0xc6>
		} else if (rot_old_state == 1 && rot_new_state == 0) { // 1 -> 0 transition
 8001718:	2800      	cmp	r0, #0
 800171a:	d0e9      	beq.n	80016f0 <HAL_GPIO_EXTI_Callback+0x98>
 800171c:	e7bf      	b.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
			rot_cnt++;
 800171e:	4a09      	ldr	r2, [pc, #36]	; (8001744 <HAL_GPIO_EXTI_Callback+0xec>)
 8001720:	7813      	ldrb	r3, [r2, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	b25b      	sxtb	r3, r3
 8001726:	7013      	strb	r3, [r2, #0]
 8001728:	e7c2      	b.n	80016b0 <HAL_GPIO_EXTI_Callback+0x58>
		if (rot_old_state == 3 && rot_new_state == 2) {        // 3 -> 2 transition
 800172a:	2802      	cmp	r0, #2
 800172c:	d0f7      	beq.n	800171e <HAL_GPIO_EXTI_Callback+0xc6>
		} else if (rot_old_state == 3 && rot_new_state == 1) { // 3 -> 1 transition
 800172e:	2801      	cmp	r0, #1
 8001730:	d1b5      	bne.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
 8001732:	e7dd      	b.n	80016f0 <HAL_GPIO_EXTI_Callback+0x98>
 8001734:	40010c00 	.word	0x40010c00
 8001738:	20000a7f 	.word	0x20000a7f
 800173c:	20000a7e 	.word	0x20000a7e
 8001740:	200008d0 	.word	0x200008d0
 8001744:	20000a7d 	.word	0x20000a7d
 8001748:	200009c8 	.word	0x200009c8
 800174c:	200008e2 	.word	0x200008e2

08001750 <START_WORK_ALL_INTEFACES>:
	Set_PWM_ZC_T4C3_Percent_Power(rot_cnt); //устанавливаем мощность вентилятора
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <START_WORK_ALL_INTEFACES+0x3c>)
 8001752:	781b      	ldrb	r3, [r3, #0]
	if(value_power >= 10 && value_power <= 100 ){
 8001754:	f1a3 020a 	sub.w	r2, r3, #10
 8001758:	2a5a      	cmp	r2, #90	; 0x5a
 800175a:	d80d      	bhi.n	8001778 <START_WORK_ALL_INTEFACES+0x28>
		uint16_t value =  90 * (100-value_power) + FINE_SET; //90 * (100-value_power) грубая настройка получается, FINE_TUNING точная может применять только при 10% мощности
 800175c:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <START_WORK_ALL_INTEFACES+0x40>)
 800175e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, value);
 8001762:	490c      	ldr	r1, [pc, #48]	; (8001794 <START_WORK_ALL_INTEFACES+0x44>)
		uint16_t value =  90 * (100-value_power) + FINE_SET; //90 * (100-value_power) грубая настройка получается, FINE_TUNING точная может применять только при 10% мощности
 8001764:	8812      	ldrh	r2, [r2, #0]
 8001766:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800176a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, value);
 800176e:	6809      	ldr	r1, [r1, #0]
		uint16_t value =  90 * (100-value_power) + FINE_SET; //90 * (100-value_power) грубая настройка получается, FINE_TUNING точная может применять только при 10% мощности
 8001770:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, value);
 8001774:	b29b      	uxth	r3, r3
 8001776:	63cb      	str	r3, [r1, #60]	; 0x3c
	if(flag_work == 0){
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <START_WORK_ALL_INTEFACES+0x48>)
 800177a:	781a      	ldrb	r2, [r3, #0]
 800177c:	b92a      	cbnz	r2, 800178a <START_WORK_ALL_INTEFACES+0x3a>
		flag_work = 1; //Указываем, что сейчас система находится во включенном состоянии
 800177e:	2201      	movs	r2, #1
		flag_Screw_work = 1;
 8001780:	4806      	ldr	r0, [pc, #24]	; (800179c <START_WORK_ALL_INTEFACES+0x4c>)
		flag_pwm_fan = 1; //вкл вентилятор
 8001782:	4907      	ldr	r1, [pc, #28]	; (80017a0 <START_WORK_ALL_INTEFACES+0x50>)
		flag_work = 1; //Указываем, что сейчас система находится во включенном состоянии
 8001784:	701a      	strb	r2, [r3, #0]
		flag_Screw_work = 1;
 8001786:	7002      	strb	r2, [r0, #0]
		flag_pwm_fan = 1; //вкл вентилятор
 8001788:	700a      	strb	r2, [r1, #0]
}
 800178a:	4770      	bx	lr
 800178c:	20000a7d 	.word	0x20000a7d
 8001790:	200000b4 	.word	0x200000b4
 8001794:	200009c8 	.word	0x200009c8
 8001798:	200008e3 	.word	0x200008e3
 800179c:	200008de 	.word	0x200008de
 80017a0:	200008e2 	.word	0x200008e2

080017a4 <StartTask_Menu>:
	osTimerStart(myTimer_testHandle, 1);
 80017a4:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <StartTask_Menu+0x80>)
{
 80017a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	osTimerStart(myTimer_testHandle, 1);
 80017aa:	6818      	ldr	r0, [r3, #0]
 80017ac:	2101      	movs	r1, #1
 80017ae:	f003 fb57 	bl	8004e60 <osTimerStart>
	START_WORK_ALL_INTEFACES();
 80017b2:	f7ff ffcd 	bl	8001750 <START_WORK_ALL_INTEFACES>
	flag_work = 1;
 80017b6:	2201      	movs	r2, #1
 80017b8:	4d1b      	ldr	r5, [pc, #108]	; (8001828 <StartTask_Menu+0x84>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800182c <StartTask_Menu+0x88>
 80017c0:	4c1b      	ldr	r4, [pc, #108]	; (8001830 <StartTask_Menu+0x8c>)
 80017c2:	4e1c      	ldr	r6, [pc, #112]	; (8001834 <StartTask_Menu+0x90>)
		input.temp_gase_user = 300; //температура дымовых газов 130-300 (не учитывается первые 15 минут работы котла)
 80017c4:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001838 <StartTask_Menu+0x94>
		input.time_engine_work_mode_2 =5; // Время работы шнека 0-200 с в режиме поддержки
 80017c8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800183c <StartTask_Menu+0x98>
		input.Try_Time = 15; // Время учета попыток (функция Current_Screw) - Если следующая попытка произошла в течении этого времени, то попытка учитывается, диапазон 7-15м
 80017cc:	4f1c      	ldr	r7, [pc, #112]	; (8001840 <StartTask_Menu+0x9c>)
	flag_work = 1;
 80017ce:	702a      	strb	r2, [r5, #0]
 80017d0:	e006      	b.n	80017e0 <StartTask_Menu+0x3c>
		if(input.thermostat_onoff == 1){
 80017d2:	7da3      	ldrb	r3, [r4, #22]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d01d      	beq.n	8001814 <StartTask_Menu+0x70>
	    osDelay(7);
 80017d8:	2007      	movs	r0, #7
 80017da:	f003 fae5 	bl	8004da8 <osDelay>
		if(flag_work == 1 && flag_permit == 1){
 80017de:	782b      	ldrb	r3, [r5, #0]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d1f6      	bne.n	80017d2 <StartTask_Menu+0x2e>
		flag_mode_support_onoff = 0; // включить режим поддеркжи (не путать с другим флагом)
 80017e4:	2200      	movs	r2, #0
		input.time_fan_work_mode_2 = 5; // Время работы вентилятора 0-200 с в режиме поддержки
 80017e6:	f04f 3105 	mov.w	r1, #84215045	; 0x5050505
		input.Temp_Water_Hysteresis = 5; //гистерезис определяет запаздывв ГВС от 1 до 5
 80017ea:	f8df c058 	ldr.w	ip, [pc, #88]	; 8001844 <StartTask_Menu+0xa0>
		input.fan_mode = 0; //выбор типа вентилятора (у конкурентов только 1 тип)
 80017ee:	4816      	ldr	r0, [pc, #88]	; (8001848 <StartTask_Menu+0xa4>)
		input.Temp_Boiler_Zero_User = 40; //температура котла при которой котел отключится (будет считаться погасшим)
 80017f0:	f8df e058 	ldr.w	lr, [pc, #88]	; 800184c <StartTask_Menu+0xa8>
		input.fan_mode = 0; //выбор типа вентилятора (у конкурентов только 1 тип)
 80017f4:	e9c4 c005 	strd	ip, r0, [r4, #20]
		input.Try_Time = 15; // Время учета попыток (функция Current_Screw) - Если следующая попытка произошла в течении этого времени, то попытка учитывается, диапазон 7-15м
 80017f8:	e9c4 8703 	strd	r8, r7, [r4, #12]
		input.Temp_Boiler_Zero_User = 40; //температура котла при которой котел отключится (будет считаться погасшим)
 80017fc:	f8c4 e000 	str.w	lr, [r4]
		input.state_Hopper_Cover = 1;
 8001800:	77a3      	strb	r3, [r4, #30]
		input.temp_gase_user = 300; //температура дымовых газов 130-300 (не учитывается первые 15 минут работы котла)
 8001802:	f8c4 9004 	str.w	r9, [r4, #4]
		flag_mode_support_onoff = 0; // включить режим поддеркжи (не путать с другим флагом)
 8001806:	f88a 2000 	strb.w	r2, [sl]
		input.time_fan_work_mode_2 = 5; // Время работы вентилятора 0-200 с в режиме поддержки
 800180a:	60a1      	str	r1, [r4, #8]
		input.state_Temp_Water = 0;
 800180c:	83a2      	strh	r2, [r4, #28]
			if(input.thermostat_type == 0) flag_thermostat_type = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	7033      	strb	r3, [r6, #0]
			if(input.thermostat_type == 1) flag_thermostat_type = 0;
 8001812:	e7e1      	b.n	80017d8 <StartTask_Menu+0x34>
			if(input.thermostat_type == 0) flag_thermostat_type = 1;
 8001814:	7de3      	ldrb	r3, [r4, #23]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f9      	beq.n	800180e <StartTask_Menu+0x6a>
			if(input.thermostat_type == 1) flag_thermostat_type = 0;
 800181a:	2b01      	cmp	r3, #1
 800181c:	bf04      	itt	eq
 800181e:	2300      	moveq	r3, #0
 8001820:	7033      	strbeq	r3, [r6, #0]
 8001822:	e7d9      	b.n	80017d8 <StartTask_Menu+0x34>
 8001824:	20000a78 	.word	0x20000a78
 8001828:	200008e3 	.word	0x200008e3
 800182c:	200008e1 	.word	0x200008e1
 8001830:	20000004 	.word	0x20000004
 8001834:	20000002 	.word	0x20000002
 8001838:	6428012c 	.word	0x6428012c
 800183c:	0a050505 	.word	0x0a050505
 8001840:	3c053a0f 	.word	0x3c053a0f
 8001844:	00010005 	.word	0x00010005
 8001848:	00010100 	.word	0x00010100
 800184c:	07d00f28 	.word	0x07d00f28

08001850 <Temp_Сentral_Heating>:
void Temp_Сentral_Heating(uint8_t temp){
 8001850:	b510      	push	{r4, lr}
	if(input.pump_mode == 0 || input.pump_mode == 2){
 8001852:	4c16      	ldr	r4, [pc, #88]	; (80018ac <Temp_Сentral_Heating+0x5c>)
 8001854:	7d63      	ldrb	r3, [r4, #21]
 8001856:	f013 02fd 	ands.w	r2, r3, #253	; 0xfd
 800185a:	d105      	bne.n	8001868 <Temp_Сentral_Heating+0x18>
		if(temp >= 40){
 800185c:	2827      	cmp	r0, #39	; 0x27
 800185e:	d915      	bls.n	800188c <Temp_Сentral_Heating+0x3c>
			if(flag_work == 1){
 8001860:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <Temp_Сentral_Heating+0x60>)
 8001862:	7812      	ldrb	r2, [r2, #0]
 8001864:	2a01      	cmp	r2, #1
 8001866:	d011      	beq.n	800188c <Temp_Сentral_Heating+0x3c>
	if(input.pump_mode == 1 || input.pump_mode == 2){
 8001868:	3b01      	subs	r3, #1
 800186a:	2b01      	cmp	r3, #1
 800186c:	d900      	bls.n	8001870 <Temp_Сentral_Heating+0x20>
}
 800186e:	bd10      	pop	{r4, pc}
		if(Sens_a.Temp_Water.value >= 40){
 8001870:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <Temp_Сentral_Heating+0x64>)
 8001872:	8b5b      	ldrh	r3, [r3, #26]
 8001874:	2b27      	cmp	r3, #39	; 0x27
 8001876:	d912      	bls.n	800189e <Temp_Сentral_Heating+0x4e>
			if(flag_work == 1){
 8001878:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <Temp_Сentral_Heating+0x60>)
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	2a01      	cmp	r2, #1
 800187e:	d1f6      	bne.n	800186e <Temp_Сentral_Heating+0x1e>
}
 8001880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(U7_MOC3021M_GPIO_Port, U7_MOC3021M_Pin, flag);
 8001884:	2140      	movs	r1, #64	; 0x40
 8001886:	480c      	ldr	r0, [pc, #48]	; (80018b8 <Temp_Сentral_Heating+0x68>)
 8001888:	f001 bd02 	b.w	8003290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U6_MOC3021M_GPIO_Port, U6_MOC3021M_Pin, flag);
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	480a      	ldr	r0, [pc, #40]	; (80018b8 <Temp_Сentral_Heating+0x68>)
 8001890:	f001 fcfe 	bl	8003290 <HAL_GPIO_WritePin>
	if(input.pump_mode == 1 || input.pump_mode == 2){
 8001894:	7d63      	ldrb	r3, [r4, #21]
 8001896:	3b01      	subs	r3, #1
 8001898:	2b01      	cmp	r3, #1
 800189a:	d8e8      	bhi.n	800186e <Temp_Сentral_Heating+0x1e>
 800189c:	e7e8      	b.n	8001870 <Temp_Сentral_Heating+0x20>
	HAL_GPIO_WritePin(U7_MOC3021M_GPIO_Port, U7_MOC3021M_Pin, flag);
 800189e:	2200      	movs	r2, #0
}
 80018a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018a4:	2140      	movs	r1, #64	; 0x40
 80018a6:	4804      	ldr	r0, [pc, #16]	; (80018b8 <Temp_Сentral_Heating+0x68>)
 80018a8:	f001 bcf2 	b.w	8003290 <HAL_GPIO_WritePin>
 80018ac:	20000004 	.word	0x20000004
 80018b0:	200008e3 	.word	0x200008e3
 80018b4:	200000bc 	.word	0x200000bc
 80018b8:	40010c00 	.word	0x40010c00

080018bc <StartTask_T_Waters>:
{
 80018bc:	b508      	push	{r3, lr}
 80018be:	4c04      	ldr	r4, [pc, #16]	; (80018d0 <StartTask_T_Waters+0x14>)
		Temp_Сentral_Heating(Sens_a.Temp_Water.value);
 80018c0:	7ea0      	ldrb	r0, [r4, #26]
 80018c2:	f7ff ffc5 	bl	8001850 <Temp_Сentral_Heating>
	    osDelay(3);
 80018c6:	2003      	movs	r0, #3
 80018c8:	f003 fa6e 	bl	8004da8 <osDelay>
	for(;;)
 80018cc:	e7f8      	b.n	80018c0 <StartTask_T_Waters+0x4>
 80018ce:	bf00      	nop
 80018d0:	200000bc 	.word	0x200000bc

080018d4 <Sim800_RxCallBack>:
/**
  * Call back function for release read SIM800 UART buffer.
  * @param NONE
  * @return SIM800 answer for command (char answer[64])
*/
void Sim800_RxCallBack(void) {
 80018d4:	b570      	push	{r4, r5, r6, lr}
    rx_buffer[rx_index++] = rx_data;
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <Sim800_RxCallBack+0x68>)
 80018d8:	4e19      	ldr	r6, [pc, #100]	; (8001940 <Sim800_RxCallBack+0x6c>)
 80018da:	7819      	ldrb	r1, [r3, #0]
 80018dc:	7830      	ldrb	r0, [r6, #0]
    info_buffer[info_index++] = rx_data;
 80018de:	4a19      	ldr	r2, [pc, #100]	; (8001944 <Sim800_RxCallBack+0x70>)
    rx_buffer[rx_index++] = rx_data;
 80018e0:	4d19      	ldr	r5, [pc, #100]	; (8001948 <Sim800_RxCallBack+0x74>)
    info_buffer[info_index++] = rx_data;
 80018e2:	7813      	ldrb	r3, [r2, #0]
    rx_buffer[rx_index++] = rx_data;
 80018e4:	1c44      	adds	r4, r0, #1
 80018e6:	5429      	strb	r1, [r5, r0]
    info_buffer[info_index++] = rx_data;
 80018e8:	4818      	ldr	r0, [pc, #96]	; (800194c <Sim800_RxCallBack+0x78>)
    rx_buffer[rx_index++] = rx_data;
 80018ea:	b2e4      	uxtb	r4, r4
    info_buffer[info_index++] = rx_data;
 80018ec:	54c1      	strb	r1, [r0, r3]
 80018ee:	3301      	adds	r3, #1

    if (strstr((char *) rx_buffer, "\r\n") != NULL && rx_index == 2) {
 80018f0:	4628      	mov	r0, r5
 80018f2:	4917      	ldr	r1, [pc, #92]	; (8001950 <Sim800_RxCallBack+0x7c>)
    rx_buffer[rx_index++] = rx_data;
 80018f4:	7034      	strb	r4, [r6, #0]
    info_buffer[info_index++] = rx_data;
 80018f6:	7013      	strb	r3, [r2, #0]
    if (strstr((char *) rx_buffer, "\r\n") != NULL && rx_index == 2) {
 80018f8:	f005 f9c6 	bl	8006c88 <strstr>
 80018fc:	b198      	cbz	r0, 8001926 <Sim800_RxCallBack+0x52>
 80018fe:	2c02      	cmp	r4, #2
 8001900:	d018      	beq.n	8001934 <Sim800_RxCallBack+0x60>
    	rx_index = 0;
    } else if (strstr((char *) rx_buffer, "\r\n") != NULL) {
        memcpy(answer, rx_buffer, sizeof(rx_buffer));
 8001902:	46ac      	mov	ip, r5
        rx_index = 0;
 8001904:	f04f 0e00 	mov.w	lr, #0
        memcpy(answer, rx_buffer, sizeof(rx_buffer));
 8001908:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800190c:	4c11      	ldr	r4, [pc, #68]	; (8001954 <Sim800_RxCallBack+0x80>)
        rx_index = 0;
 800190e:	f886 e000 	strb.w	lr, [r6]
        memcpy(answer, rx_buffer, sizeof(rx_buffer));
 8001912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001914:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001918:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        memset(rx_buffer, 0, sizeof(rx_buffer));
 800191c:	2220      	movs	r2, #32
 800191e:	4671      	mov	r1, lr
 8001920:	4628      	mov	r0, r5
 8001922:	f005 f93f 	bl	8006ba4 <memset>
    }
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
}
 8001926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 800192a:	2201      	movs	r2, #1
 800192c:	4903      	ldr	r1, [pc, #12]	; (800193c <Sim800_RxCallBack+0x68>)
 800192e:	480a      	ldr	r0, [pc, #40]	; (8001958 <Sim800_RxCallBack+0x84>)
 8001930:	f002 bfb4 	b.w	800489c <HAL_UART_Receive_IT>
    	rx_index = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	7033      	strb	r3, [r6, #0]
 8001938:	e7f5      	b.n	8001926 <Sim800_RxCallBack+0x52>
 800193a:	bf00      	nop
 800193c:	20000aa0 	.word	0x20000aa0
 8001940:	20000aa1 	.word	0x20000aa1
 8001944:	20000a74 	.word	0x20000a74
 8001948:	20000a80 	.word	0x20000a80
 800194c:	20000a54 	.word	0x20000a54
 8001950:	0800715c 	.word	0x0800715c
 8001954:	200008b0 	.word	0x200008b0
 8001958:	20000a10 	.word	0x20000a10

0800195c <SIM800_SendCommand>:
  * @param reply to be used to set the correct answer to the command
  * @param delay to be used to the set pause to the reply
  * @return error, 0 is OK
  */
//Отправляем команду, как показано в функции SIM800_SendData
uint8_t SIM800_SendCommand(char *command, char *reply, uint16_t delay) {
 800195c:	b570      	push	{r4, r5, r6, lr}
 800195e:	460c      	mov	r4, r1
 8001960:	4615      	mov	r5, r2
 8001962:	4606      	mov	r6, r0

	//отправим АТ команду
	HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *) command, (uint16_t) strlen(command));
 8001964:	f7fe fbf4 	bl	8000150 <strlen>
 8001968:	4602      	mov	r2, r0
 800196a:	4631      	mov	r1, r6
 800196c:	b292      	uxth	r2, r2
 800196e:	480f      	ldr	r0, [pc, #60]	; (80019ac <SIM800_SendCommand+0x50>)
 8001970:	f002 ff74 	bl	800485c <HAL_UART_Transmit_IT>

    osDelay(delay); //подождем
 8001974:	4628      	mov	r0, r5
 8001976:	f003 fa17 	bl	8004da8 <osDelay>

    //если в ответе answer есть reply  (возврат strstr равен 1)
    if (strstr(answer, reply) != NULL) {
 800197a:	4621      	mov	r1, r4
 800197c:	480c      	ldr	r0, [pc, #48]	; (80019b0 <SIM800_SendCommand+0x54>)
 800197e:	f005 f983 	bl	8006c88 <strstr>
 8001982:	b148      	cbz	r0, 8001998 <SIM800_SendCommand+0x3c>
        rx_index = 0;
 8001984:	2400      	movs	r4, #0
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <SIM800_SendCommand+0x58>)
        //то заполнить rx_buffer нулями
        memset(rx_buffer, 0, sizeof(rx_buffer));
 8001988:	2220      	movs	r2, #32
 800198a:	4621      	mov	r1, r4
 800198c:	480a      	ldr	r0, [pc, #40]	; (80019b8 <SIM800_SendCommand+0x5c>)
        rx_index = 0;
 800198e:	701c      	strb	r4, [r3, #0]
        memset(rx_buffer, 0, sizeof(rx_buffer));
 8001990:	f005 f908 	bl	8006ba4 <memset>

        return 0;  //успешное выполнение команды
 8001994:	4620      	mov	r0, r4
    }
    rx_index = 0;
    memset(rx_buffer, 0, sizeof(rx_buffer));
    return 1;
}
 8001996:	bd70      	pop	{r4, r5, r6, pc}
 8001998:	4601      	mov	r1, r0
    rx_index = 0;
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <SIM800_SendCommand+0x58>)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 800199c:	2220      	movs	r2, #32
 800199e:	4806      	ldr	r0, [pc, #24]	; (80019b8 <SIM800_SendCommand+0x5c>)
    rx_index = 0;
 80019a0:	7019      	strb	r1, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 80019a2:	f005 f8ff 	bl	8006ba4 <memset>
 80019a6:	2001      	movs	r0, #1
}
 80019a8:	bd70      	pop	{r4, r5, r6, pc}
 80019aa:	bf00      	nop
 80019ac:	20000a10 	.word	0x20000a10
 80019b0:	200008b0 	.word	0x200008b0
 80019b4:	20000aa1 	.word	0x20000aa1
 80019b8:	20000a80 	.word	0x20000a80

080019bc <SIM800_Init>:
/**
  * initialization SIM800.
  * @param NONE
  * @return error the number of mistakes, 0 is OK
  */
uint8_t SIM800_Init(void) {
 80019bc:	b538      	push	{r3, r4, r5, lr}

    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);


    //Инициализация, если есть ошибка на команду, то error будет больше нуля
    error += SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY); //Работает ли модуль sim800?
 80019be:	4d0b      	ldr	r5, [pc, #44]	; (80019ec <SIM800_Init+0x30>)
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 80019c0:	2201      	movs	r2, #1
 80019c2:	490b      	ldr	r1, [pc, #44]	; (80019f0 <SIM800_Init+0x34>)
 80019c4:	480b      	ldr	r0, [pc, #44]	; (80019f4 <SIM800_Init+0x38>)
 80019c6:	f002 ff69 	bl	800489c <HAL_UART_Receive_IT>
    error += SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY); //Работает ли модуль sim800?
 80019ca:	4629      	mov	r1, r5
 80019cc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019d0:	4809      	ldr	r0, [pc, #36]	; (80019f8 <SIM800_Init+0x3c>)
 80019d2:	f7ff ffc3 	bl	800195c <SIM800_SendCommand>
    error += SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY); //
 80019d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    error += SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY); //Работает ли модуль sim800?
 80019da:	4604      	mov	r4, r0
    error += SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY); //
 80019dc:	4629      	mov	r1, r5
 80019de:	4807      	ldr	r0, [pc, #28]	; (80019fc <SIM800_Init+0x40>)
 80019e0:	f7ff ffbc 	bl	800195c <SIM800_SendCommand>
 80019e4:	4420      	add	r0, r4

    //error += SIM800_SendCommand("AT+CBC\r\n", "+CBC: 0,61,3895\r\n", CMD_DELAY); //Напряжение на модуле
//    error += SIM800_SendCommand("AT+CSQ\r\n", "SIMCOM_SIM800L\r\n", CMD_DELAY); //Индефикатор модуля

    return error;
}
 80019e6:	b2c0      	uxtb	r0, r0
 80019e8:	bd38      	pop	{r3, r4, r5, pc}
 80019ea:	bf00      	nop
 80019ec:	08007148 	.word	0x08007148
 80019f0:	20000aa0 	.word	0x20000aa0
 80019f4:	20000a10 	.word	0x20000a10
 80019f8:	08007150 	.word	0x08007150
 80019fc:	08007158 	.word	0x08007158

08001a00 <StartTask_SMS>:
{
 8001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1); //Запускаем прием по UART для SIM800
 8001a02:	2201      	movs	r2, #1
 8001a04:	490a      	ldr	r1, [pc, #40]	; (8001a30 <StartTask_SMS+0x30>)
 8001a06:	480b      	ldr	r0, [pc, #44]	; (8001a34 <StartTask_SMS+0x34>)
 8001a08:	f002 ff48 	bl	800489c <HAL_UART_Receive_IT>
uint8_t Sim800_Get_Signal(){

	char pow_char; //переменная для хранения уровня связи
	uint8_t pow_int = 0;

	info_index = 0; //обнуляем индекс
 8001a0c:	2700      	movs	r7, #0
  SIM800_Init();
 8001a0e:	f7ff ffd5 	bl	80019bc <SIM800_Init>
  uint8_t PowSignal = 0;
 8001a12:	4e09      	ldr	r6, [pc, #36]	; (8001a38 <StartTask_SMS+0x38>)

	SIM800_SendCommand("AT+CSQ\r\n", "", CMD_DELAY); //Первый параметр ответа - мощность сигнала rssi (от 10 и выше — нормальная):Второй параметр ответа - частота ошибок по битам ber:
 8001a14:	4d09      	ldr	r5, [pc, #36]	; (8001a3c <StartTask_SMS+0x3c>)
 8001a16:	4c0a      	ldr	r4, [pc, #40]	; (8001a40 <StartTask_SMS+0x40>)
 8001a18:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	4620      	mov	r0, r4
	info_index = 0; //обнуляем индекс
 8001a20:	7037      	strb	r7, [r6, #0]
	SIM800_SendCommand("AT+CSQ\r\n", "", CMD_DELAY); //Первый параметр ответа - мощность сигнала rssi (от 10 и выше — нормальная):Второй параметр ответа - частота ошибок по битам ber:
 8001a22:	f7ff ff9b 	bl	800195c <SIM800_SendCommand>
    osDelay(15);
 8001a26:	200f      	movs	r0, #15
 8001a28:	f003 f9be 	bl	8004da8 <osDelay>
  for(;;)
 8001a2c:	e7f4      	b.n	8001a18 <StartTask_SMS+0x18>
 8001a2e:	bf00      	nop
 8001a30:	20000aa0 	.word	0x20000aa0
 8001a34:	20000a10 	.word	0x20000a10
 8001a38:	20000a74 	.word	0x20000a74
 8001a3c:	0800714c 	.word	0x0800714c
 8001a40:	08007160 	.word	0x08007160

08001a44 <HAL_UART_RxCpltCallback>:
* @param argument: Not used
* @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
          if(huart == &huart3)
 8001a44:	4b02      	ldr	r3, [pc, #8]	; (8001a50 <HAL_UART_RxCpltCallback+0xc>)
 8001a46:	4283      	cmp	r3, r0
 8001a48:	d000      	beq.n	8001a4c <HAL_UART_RxCpltCallback+0x8>
          {
        	  Sim800_RxCallBack();
          }
}
 8001a4a:	4770      	bx	lr
        	  Sim800_RxCallBack();
 8001a4c:	f7ff bf42 	b.w	80018d4 <Sim800_RxCallBack>
 8001a50:	20000a10 	.word	0x20000a10

08001a54 <SystemClock_Config>:
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a54:	2201      	movs	r2, #1
{
 8001a56:	b510      	push	{r4, lr}
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a58:	f44f 3080 	mov.w	r0, #65536	; 0x10000
{
 8001a5c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5e:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001a60:	2105      	movs	r1, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a62:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a64:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001a68:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a6c:	900b      	str	r0, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a6e:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a70:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a72:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a76:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001a7a:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001a82:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a84:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a86:	9305      	str	r3, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a88:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a8a:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a8c:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001a8e:	9213      	str	r2, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a90:	f001 fc14 	bl	80032bc <HAL_RCC_OscConfig>
 8001a94:	b108      	cbz	r0, 8001a9a <SystemClock_Config+0x46>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a96:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <SystemClock_Config+0x44>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa0:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aaa:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aac:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aae:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ab0:	f001 fe30 	bl	8003714 <HAL_RCC_ClockConfig>
 8001ab4:	b108      	cbz	r0, 8001aba <SystemClock_Config+0x66>
 8001ab6:	b672      	cpsid	i
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <SystemClock_Config+0x64>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001aba:	2103      	movs	r1, #3
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001abc:	f44f 7280 	mov.w	r2, #256	; 0x100
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001ac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac4:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ac6:	e9cd 1201 	strd	r1, r2, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001aca:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001acc:	f001 ff02 	bl	80038d4 <HAL_RCCEx_PeriphCLKConfig>
 8001ad0:	b108      	cbz	r0, 8001ad6 <SystemClock_Config+0x82>
 8001ad2:	b672      	cpsid	i
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <SystemClock_Config+0x80>
}
 8001ad6:	b014      	add	sp, #80	; 0x50
 8001ad8:	bd10      	pop	{r4, pc}
 8001ada:	bf00      	nop

08001adc <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	2400      	movs	r4, #0
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8001ae2:	f000 fd55 	bl	8002590 <HAL_Init>
  SystemClock_Config();
 8001ae6:	f7ff ffb5 	bl	8001a54 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aea:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001aee:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af2:	4da9      	ldr	r5, [pc, #676]	; (8001d98 <main+0x2bc>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001af4:	f44f 7a80 	mov.w	sl, #256	; 0x100
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af8:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, Relay2_Pin|Relay1_Pin|GPIO_PIN_12|U7_MOC3021M_Pin
 8001afa:	f241 01c3 	movw	r1, #4291	; 0x10c3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afe:	f043 0310 	orr.w	r3, r3, #16
 8001b02:	61ab      	str	r3, [r5, #24]
 8001b04:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, Relay2_Pin|Relay1_Pin|GPIO_PIN_12|U7_MOC3021M_Pin
 8001b06:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b10:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, Relay2_Pin|Relay1_Pin|GPIO_PIN_12|U7_MOC3021M_Pin
 8001b12:	48a2      	ldr	r0, [pc, #648]	; (8001d9c <main+0x2c0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b14:	f043 0320 	orr.w	r3, r3, #32
 8001b18:	61ab      	str	r3, [r5, #24]
 8001b1a:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1c:	2701      	movs	r7, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1e:	f003 0320 	and.w	r3, r3, #32
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	61ab      	str	r3, [r5, #24]
 8001b32:	69ab      	ldr	r3, [r5, #24]
  hadc1.Init.NbrOfConversion = 6;
 8001b34:	f04f 0906 	mov.w	r9, #6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	9303      	str	r3, [sp, #12]
 8001b3e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b40:	69ab      	ldr	r3, [r5, #24]
  hadc1.Instance = ADC1;
 8001b42:	4e97      	ldr	r6, [pc, #604]	; (8001da0 <main+0x2c4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	f043 0308 	orr.w	r3, r3, #8
 8001b48:	61ab      	str	r3, [r5, #24]
 8001b4a:	69ab      	ldr	r3, [r5, #24]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	9304      	str	r3, [sp, #16]
 8001b52:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, Relay2_Pin|Relay1_Pin|GPIO_PIN_12|U7_MOC3021M_Pin
 8001b54:	f001 fb9c 	bl	8003290 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001b58:	4622      	mov	r2, r4
 8001b5a:	4651      	mov	r1, sl
 8001b5c:	4891      	ldr	r0, [pc, #580]	; (8001da4 <main+0x2c8>)
 8001b5e:	f001 fb97 	bl	8003290 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Thermostat_Pin;
 8001b62:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(Thermostat_GPIO_Port, &GPIO_InitStruct);
 8001b64:	488f      	ldr	r0, [pc, #572]	; (8001da4 <main+0x2c8>)
 8001b66:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = Thermostat_Pin;
 8001b68:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(Thermostat_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f001 fa7b 	bl	8003068 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Relay2_Pin|Relay1_Pin|GPIO_PIN_12|U7_MOC3021M_Pin
 8001b72:	f241 03c3 	movw	r3, #4291	; 0x10c3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	4889      	ldr	r0, [pc, #548]	; (8001d9c <main+0x2c0>)
 8001b78:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = Relay2_Pin|Relay1_Pin|GPIO_PIN_12|U7_MOC3021M_Pin
 8001b7a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	e9cd 7408 	strd	r7, r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b84:	f001 fa70 	bl	8003068 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b88:	220c      	movs	r2, #12
 8001b8a:	4b87      	ldr	r3, [pc, #540]	; (8001da8 <main+0x2cc>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8c:	4883      	ldr	r0, [pc, #524]	; (8001d9c <main+0x2c0>)
 8001b8e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b90:	e9cd 2307 	strd	r2, r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f001 fa67 	bl	8003068 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	4882      	ldr	r0, [pc, #520]	; (8001da4 <main+0x2c8>)
 8001b9c:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9e:	e9cd a707 	strd	sl, r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	e9cd 4809 	strd	r4, r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f001 fa5f 	bl	8003068 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Button_Pin;
 8001baa:	2310      	movs	r3, #16
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001bac:	487b      	ldr	r0, [pc, #492]	; (8001d9c <main+0x2c0>)
 8001bae:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = Button_Pin;
 8001bb0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb2:	e9cd 4708 	strd	r4, r7, [sp, #32]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	f001 fa57 	bl	8003068 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bbe:	4b7b      	ldr	r3, [pc, #492]	; (8001dac <main+0x2d0>)
  HAL_GPIO_Init(U2_PC817_GPIO_Port, &GPIO_InitStruct);
 8001bc0:	4876      	ldr	r0, [pc, #472]	; (8001d9c <main+0x2c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bc2:	e9cd 1307 	strd	r1, r3, [sp, #28]
  HAL_GPIO_Init(U2_PC817_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(U2_PC817_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f001 fa4d 	bl	8003068 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001bce:	4622      	mov	r2, r4
 8001bd0:	2105      	movs	r1, #5
 8001bd2:	2008      	movs	r0, #8
 8001bd4:	f001 f882 	bl	8002cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001bd8:	2008      	movs	r0, #8
 8001bda:	f001 f8bd 	bl	8002d58 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001bde:	4622      	mov	r2, r4
 8001be0:	2105      	movs	r1, #5
 8001be2:	2009      	movs	r0, #9
 8001be4:	f001 f87a 	bl	8002cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001be8:	2009      	movs	r0, #9
 8001bea:	f001 f8b5 	bl	8002d58 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001bee:	4622      	mov	r2, r4
 8001bf0:	2105      	movs	r1, #5
 8001bf2:	2017      	movs	r0, #23
 8001bf4:	f001 f872 	bl	8002cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001bf8:	2017      	movs	r0, #23
 8001bfa:	f001 f8ad 	bl	8002d58 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bfe:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001c00:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c02:	433b      	orrs	r3, r7
 8001c04:	616b      	str	r3, [r5, #20]
 8001c06:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001c08:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c0a:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001c0c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001c12:	f001 f863 	bl	8002cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c16:	200b      	movs	r0, #11
 8001c18:	f001 f89e 	bl	8002d58 <HAL_NVIC_EnableIRQ>
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c1c:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8001c20:	61f3      	str	r3, [r6, #28]
  hadc1.Instance = ADC1;
 8001c22:	4b63      	ldr	r3, [pc, #396]	; (8001db0 <main+0x2d4>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c24:	4630      	mov	r0, r6
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c26:	e9cd 4407 	strd	r4, r4, [sp, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c2a:	f8c6 a008 	str.w	sl, [r6, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c2e:	9409      	str	r4, [sp, #36]	; 0x24
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c30:	7334      	strb	r4, [r6, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c32:	7534      	strb	r4, [r6, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c34:	6074      	str	r4, [r6, #4]
  hadc1.Init.NbrOfConversion = 6;
 8001c36:	f8c6 9010 	str.w	r9, [r6, #16]
  hadc1.Instance = ADC1;
 8001c3a:	6033      	str	r3, [r6, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c3c:	f000 ff1e 	bl	8002a7c <HAL_ADC_Init>
 8001c40:	b108      	cbz	r0, 8001c46 <main+0x16a>
 8001c42:	b672      	cpsid	i
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <main+0x168>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c46:	e9cd 0707 	strd	r0, r7, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c4a:	a907      	add	r1, sp, #28
 8001c4c:	4630      	mov	r0, r6
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001c4e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c52:	f000 fd81 	bl	8002758 <HAL_ADC_ConfigChannel>
 8001c56:	b108      	cbz	r0, 8001c5c <main+0x180>
 8001c58:	b672      	cpsid	i
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <main+0x17e>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c5c:	4630      	mov	r0, r6
 8001c5e:	a907      	add	r1, sp, #28
  sConfig.Channel = ADC_CHANNEL_1;
 8001c60:	9707      	str	r7, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001c62:	f8cd 8020 	str.w	r8, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c66:	f000 fd77 	bl	8002758 <HAL_ADC_ConfigChannel>
 8001c6a:	b108      	cbz	r0, 8001c70 <main+0x194>
 8001c6c:	b672      	cpsid	i
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <main+0x192>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001c70:	2503      	movs	r5, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c72:	4630      	mov	r0, r6
 8001c74:	a907      	add	r1, sp, #28
  sConfig.Channel = ADC_CHANNEL_2;
 8001c76:	f8cd 801c 	str.w	r8, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001c7a:	9508      	str	r5, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c7c:	f000 fd6c 	bl	8002758 <HAL_ADC_ConfigChannel>
 8001c80:	b108      	cbz	r0, 8001c86 <main+0x1aa>
 8001c82:	b672      	cpsid	i
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <main+0x1a8>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001c86:	2404      	movs	r4, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c88:	4630      	mov	r0, r6
 8001c8a:	a907      	add	r1, sp, #28
  sConfig.Channel = ADC_CHANNEL_3;
 8001c8c:	9507      	str	r5, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001c8e:	9408      	str	r4, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c90:	f000 fd62 	bl	8002758 <HAL_ADC_ConfigChannel>
 8001c94:	b108      	cbz	r0, 8001c9a <main+0x1be>
 8001c96:	b672      	cpsid	i
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <main+0x1bc>
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001c9a:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c9c:	4630      	mov	r0, r6
 8001c9e:	a907      	add	r1, sp, #28
  sConfig.Channel = ADC_CHANNEL_4;
 8001ca0:	9407      	str	r4, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001ca2:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ca4:	f000 fd58 	bl	8002758 <HAL_ADC_ConfigChannel>
 8001ca8:	b108      	cbz	r0, 8001cae <main+0x1d2>
 8001caa:	b672      	cpsid	i
  while (1)
 8001cac:	e7fe      	b.n	8001cac <main+0x1d0>
  sConfig.Channel = ADC_CHANNEL_7;
 8001cae:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb0:	4630      	mov	r0, r6
 8001cb2:	a907      	add	r1, sp, #28
  sConfig.Channel = ADC_CHANNEL_7;
 8001cb4:	e9cd 3907 	strd	r3, r9, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb8:	f000 fd4e 	bl	8002758 <HAL_ADC_ConfigChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	b108      	cbz	r0, 8001cc4 <main+0x1e8>
 8001cc0:	b672      	cpsid	i
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <main+0x1e6>
  htim4.Init.Prescaler = 63;
 8001cc4:	213f      	movs	r1, #63	; 0x3f
  htim4.Init.Period = 9000;
 8001cc6:	f242 3228 	movw	r2, #9000	; 0x2328
  htim4.Instance = TIM4;
 8001cca:	4c3a      	ldr	r4, [pc, #232]	; (8001db4 <main+0x2d8>)
 8001ccc:	483a      	ldr	r0, [pc, #232]	; (8001db8 <main+0x2dc>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cce:	e9cd 3307 	strd	r3, r3, [sp, #28]
  htim4.Instance = TIM4;
 8001cd2:	6020      	str	r0, [r4, #0]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cd4:	4620      	mov	r0, r4
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cd6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8001cda:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cde:	9305      	str	r3, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce0:	930d      	str	r3, [sp, #52]	; 0x34
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce2:	60a3      	str	r3, [r4, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce4:	6123      	str	r3, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce6:	61a3      	str	r3, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce8:	9306      	str	r3, [sp, #24]
  htim4.Init.Prescaler = 63;
 8001cea:	6061      	str	r1, [r4, #4]
  htim4.Init.Period = 9000;
 8001cec:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cee:	f002 fc13 	bl	8004518 <HAL_TIM_PWM_Init>
 8001cf2:	b108      	cbz	r0, 8001cf8 <main+0x21c>
 8001cf4:	b672      	cpsid	i
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <main+0x21a>
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8001cf8:	2108      	movs	r1, #8
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f002 fc3a 	bl	8004574 <HAL_TIM_OnePulse_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	b108      	cbz	r0, 8001d08 <main+0x22c>
 8001d04:	b672      	cpsid	i
  while (1)
 8001d06:	e7fe      	b.n	8001d06 <main+0x22a>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d08:	4620      	mov	r0, r4
 8001d0a:	a905      	add	r1, sp, #20
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0c:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d10:	f002 fcfc 	bl	800470c <HAL_TIMEx_MasterConfigSynchronization>
 8001d14:	b108      	cbz	r0, 8001d1a <main+0x23e>
 8001d16:	b672      	cpsid	i
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <main+0x23c>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d1a:	2300      	movs	r3, #0
  sConfigOC.Pulse = 5000;
 8001d1c:	f241 3488 	movw	r4, #5000	; 0x1388
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001d20:	2570      	movs	r5, #112	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d22:	2208      	movs	r2, #8
 8001d24:	4823      	ldr	r0, [pc, #140]	; (8001db4 <main+0x2d8>)
 8001d26:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = 5000;
 8001d28:	e9cd 5407 	strd	r5, r4, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d2c:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d2e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d30:	f002 fc7e 	bl	8004630 <HAL_TIM_PWM_ConfigChannel>
 8001d34:	4604      	mov	r4, r0
 8001d36:	b108      	cbz	r0, 8001d3c <main+0x260>
 8001d38:	b672      	cpsid	i
  while (1)
 8001d3a:	e7fe      	b.n	8001d3a <main+0x25e>
  HAL_TIM_MspPostInit(&htim4);
 8001d3c:	481d      	ldr	r0, [pc, #116]	; (8001db4 <main+0x2d8>)
 8001d3e:	f000 fb05 	bl	800234c <HAL_TIM_MspPostInit>
  hspi2.Instance = SPI2;
 8001d42:	481e      	ldr	r0, [pc, #120]	; (8001dbc <main+0x2e0>)
 8001d44:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <main+0x2e4>)
  hspi2.Init.CRCPolynomial = 10;
 8001d46:	210a      	movs	r1, #10
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d48:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Instance = SPI2;
 8001d4c:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d4e:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d52:	e9c0 4403 	strd	r4, r4, [r0, #12]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d56:	6043      	str	r3, [r0, #4]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d58:	e9c0 4407 	strd	r4, r4, [r0, #28]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d5c:	e9c0 4409 	strd	r4, r4, [r0, #36]	; 0x24
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d60:	6084      	str	r4, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d62:	6144      	str	r4, [r0, #20]
  hspi2.Init.CRCPolynomial = 10;
 8001d64:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d66:	6182      	str	r2, [r0, #24]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d68:	f002 f8f8 	bl	8003f5c <HAL_SPI_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	b108      	cbz	r0, 8001d74 <main+0x298>
 8001d70:	b672      	cpsid	i
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <main+0x296>
  huart3.Instance = USART3;
 8001d74:	4813      	ldr	r0, [pc, #76]	; (8001dc4 <main+0x2e8>)
 8001d76:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <main+0x2ec>)
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d78:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d7c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d80:	6083      	str	r3, [r0, #8]
  huart3.Instance = USART3;
 8001d82:	6002      	str	r2, [r0, #0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d84:	230c      	movs	r3, #12
  huart3.Init.BaudRate = 9600;
 8001d86:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d8a:	6143      	str	r3, [r0, #20]
  huart3.Init.BaudRate = 9600;
 8001d8c:	6042      	str	r2, [r0, #4]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d8e:	f002 fd35 	bl	80047fc <HAL_UART_Init>
 8001d92:	b1d8      	cbz	r0, 8001dcc <main+0x2f0>
 8001d94:	b672      	cpsid	i
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <main+0x2ba>
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40010c00 	.word	0x40010c00
 8001da0:	200008e8 	.word	0x200008e8
 8001da4:	40010800 	.word	0x40010800
 8001da8:	10310000 	.word	0x10310000
 8001dac:	10210000 	.word	0x10210000
 8001db0:	40012400 	.word	0x40012400
 8001db4:	200009c8 	.word	0x200009c8
 8001db8:	40000800 	.word	0x40000800
 8001dbc:	20000970 	.word	0x20000970
 8001dc0:	40003800 	.word	0x40003800
 8001dc4:	20000a10 	.word	0x20000a10
 8001dc8:	40004800 	.word	0x40004800
  hrtc.Instance = RTC;
 8001dcc:	4c68      	ldr	r4, [pc, #416]	; (8001f70 <main+0x494>)
 8001dce:	4a69      	ldr	r2, [pc, #420]	; (8001f74 <main+0x498>)
  RTC_TimeTypeDef sTime = {0};
 8001dd0:	f8ad 0014 	strh.w	r0, [sp, #20]
  hrtc.Instance = RTC;
 8001dd4:	6022      	str	r2, [r4, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001dd6:	f04f 32ff 	mov.w	r2, #4294967295
  RTC_TimeTypeDef sTime = {0};
 8001dda:	f88d 0016 	strb.w	r0, [sp, #22]
  RTC_DateTypeDef DateToUpdate = {0};
 8001dde:	9007      	str	r0, [sp, #28]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8001de0:	60a0      	str	r0, [r4, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001de2:	4620      	mov	r0, r4
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001de4:	6062      	str	r2, [r4, #4]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001de6:	f001 fee1 	bl	8003bac <HAL_RTC_Init>
 8001dea:	4602      	mov	r2, r0
 8001dec:	b108      	cbz	r0, 8001df2 <main+0x316>
 8001dee:	b672      	cpsid	i
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <main+0x314>
  sTime.Hours = 0;
 8001df2:	f88d 0014 	strb.w	r0, [sp, #20]
  sTime.Minutes = 0;
 8001df6:	f88d 0015 	strb.w	r0, [sp, #21]
  sTime.Seconds = 0;
 8001dfa:	f88d 0016 	strb.w	r0, [sp, #22]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001dfe:	a905      	add	r1, sp, #20
 8001e00:	4620      	mov	r0, r4
 8001e02:	f001 ff4f 	bl	8003ca4 <HAL_RTC_SetTime>
 8001e06:	4602      	mov	r2, r0
 8001e08:	b108      	cbz	r0, 8001e0e <main+0x332>
 8001e0a:	b672      	cpsid	i
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <main+0x330>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e0e:	2501      	movs	r5, #1
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8001e10:	4620      	mov	r0, r4
 8001e12:	a907      	add	r1, sp, #28
  DateToUpdate.Year = 0;
 8001e14:	f88d 201f 	strb.w	r2, [sp, #31]
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e18:	f88d 501c 	strb.w	r5, [sp, #28]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001e1c:	f88d 501d 	strb.w	r5, [sp, #29]
  DateToUpdate.Date = 1;
 8001e20:	f88d 501e 	strb.w	r5, [sp, #30]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8001e24:	f001 ffca 	bl	8003dbc <HAL_RTC_SetDate>
 8001e28:	4604      	mov	r4, r0
 8001e2a:	b108      	cbz	r0, 8001e30 <main+0x354>
 8001e2c:	b672      	cpsid	i
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <main+0x352>
  HAL_ADCEx_Calibration_Start(&hadc1); //Калибровка АЦП
 8001e30:	4851      	ldr	r0, [pc, #324]	; (8001f78 <main+0x49c>)
 8001e32:	f000 fec3 	bl	8002bbc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, ADC_CHANNELS_NUM); //Провести измерение с АЦП-1
 8001e36:	2206      	movs	r2, #6
 8001e38:	4950      	ldr	r1, [pc, #320]	; (8001f7c <main+0x4a0>)
 8001e3a:	484f      	ldr	r0, [pc, #316]	; (8001f78 <main+0x49c>)
 8001e3c:	f000 fd6a 	bl	8002914 <HAL_ADC_Start_DMA>
  osKernelInitialize();
 8001e40:	f002 fefe 	bl	8004c40 <osKernelInitialize>
  Timer_TryHandle = osTimerNew(Callback01, osTimerPeriodic, NULL, &Timer_Try_attributes);
 8001e44:	4629      	mov	r1, r5
 8001e46:	4622      	mov	r2, r4
 8001e48:	4b4d      	ldr	r3, [pc, #308]	; (8001f80 <main+0x4a4>)
 8001e4a:	484e      	ldr	r0, [pc, #312]	; (8001f84 <main+0x4a8>)
 8001e4c:	f002 ffc6 	bl	8004ddc <osTimerNew>
 8001e50:	4607      	mov	r7, r0
 8001e52:	4e4d      	ldr	r6, [pc, #308]	; (8001f88 <main+0x4ac>)
  Timer_Boiler_ZeroHandle = osTimerNew(Callback02, osTimerOnce, NULL, &Timer_Boiler_Zero_attributes);
 8001e54:	4622      	mov	r2, r4
 8001e56:	4621      	mov	r1, r4
 8001e58:	4b4c      	ldr	r3, [pc, #304]	; (8001f8c <main+0x4b0>)
 8001e5a:	484d      	ldr	r0, [pc, #308]	; (8001f90 <main+0x4b4>)
  Timer_TryHandle = osTimerNew(Callback01, osTimerPeriodic, NULL, &Timer_Try_attributes);
 8001e5c:	6037      	str	r7, [r6, #0]
  Timer_Boiler_ZeroHandle = osTimerNew(Callback02, osTimerOnce, NULL, &Timer_Boiler_Zero_attributes);
 8001e5e:	f002 ffbd 	bl	8004ddc <osTimerNew>
 8001e62:	4607      	mov	r7, r0
 8001e64:	4e4b      	ldr	r6, [pc, #300]	; (8001f94 <main+0x4b8>)
  myTimer_testHandle = osTimerNew(Callback_test, osTimerOnce, NULL, &myTimer_test_attributes);
 8001e66:	4622      	mov	r2, r4
 8001e68:	4621      	mov	r1, r4
 8001e6a:	4b4b      	ldr	r3, [pc, #300]	; (8001f98 <main+0x4bc>)
 8001e6c:	484b      	ldr	r0, [pc, #300]	; (8001f9c <main+0x4c0>)
  Timer_Boiler_ZeroHandle = osTimerNew(Callback02, osTimerOnce, NULL, &Timer_Boiler_Zero_attributes);
 8001e6e:	6037      	str	r7, [r6, #0]
  myTimer_testHandle = osTimerNew(Callback_test, osTimerOnce, NULL, &myTimer_test_attributes);
 8001e70:	f002 ffb4 	bl	8004ddc <osTimerNew>
 8001e74:	4606      	mov	r6, r0
 8001e76:	4b4a      	ldr	r3, [pc, #296]	; (8001fa0 <main+0x4c4>)
  Queue1Handle = osMessageQueueNew (1, sizeof(Sens_a), &Queue1_attributes);
 8001e78:	2130      	movs	r1, #48	; 0x30
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	4a49      	ldr	r2, [pc, #292]	; (8001fa4 <main+0x4c8>)
  myTimer_testHandle = osTimerNew(Callback_test, osTimerOnce, NULL, &myTimer_test_attributes);
 8001e7e:	601e      	str	r6, [r3, #0]
  Queue1Handle = osMessageQueueNew (1, sizeof(Sens_a), &Queue1_attributes);
 8001e80:	f003 f816 	bl	8004eb0 <osMessageQueueNew>
 8001e84:	4605      	mov	r5, r0
 8001e86:	4b48      	ldr	r3, [pc, #288]	; (8001fa8 <main+0x4cc>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001e88:	4621      	mov	r1, r4
 8001e8a:	4a48      	ldr	r2, [pc, #288]	; (8001fac <main+0x4d0>)
 8001e8c:	4848      	ldr	r0, [pc, #288]	; (8001fb0 <main+0x4d4>)
  Queue1Handle = osMessageQueueNew (1, sizeof(Sens_a), &Queue1_attributes);
 8001e8e:	601d      	str	r5, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001e90:	f002 ff12 	bl	8004cb8 <osThreadNew>
 8001e94:	4605      	mov	r5, r0
 8001e96:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <main+0x4d8>)
  Task_ADCHandle = osThreadNew(StartTask_ADC, NULL, &Task_ADC_attributes);
 8001e98:	4621      	mov	r1, r4
 8001e9a:	4a47      	ldr	r2, [pc, #284]	; (8001fb8 <main+0x4dc>)
 8001e9c:	4847      	ldr	r0, [pc, #284]	; (8001fbc <main+0x4e0>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001e9e:	601d      	str	r5, [r3, #0]
  Task_ADCHandle = osThreadNew(StartTask_ADC, NULL, &Task_ADC_attributes);
 8001ea0:	f002 ff0a 	bl	8004cb8 <osThreadNew>
 8001ea4:	4605      	mov	r5, r0
 8001ea6:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <main+0x4e4>)
  Task_T_ScrewHandle = osThreadNew(StartTask_T_Screw, NULL, &Task_T_Screw_attributes);
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	4a46      	ldr	r2, [pc, #280]	; (8001fc4 <main+0x4e8>)
 8001eac:	4846      	ldr	r0, [pc, #280]	; (8001fc8 <main+0x4ec>)
  Task_ADCHandle = osThreadNew(StartTask_ADC, NULL, &Task_ADC_attributes);
 8001eae:	601d      	str	r5, [r3, #0]
  Task_T_ScrewHandle = osThreadNew(StartTask_T_Screw, NULL, &Task_T_Screw_attributes);
 8001eb0:	f002 ff02 	bl	8004cb8 <osThreadNew>
 8001eb4:	4605      	mov	r5, r0
 8001eb6:	4b45      	ldr	r3, [pc, #276]	; (8001fcc <main+0x4f0>)
  Task_Sens_ConntHandle = osThreadNew(StartTask_Sens_Connect, NULL, &Task_Sens_Connt_attributes);
 8001eb8:	4621      	mov	r1, r4
 8001eba:	4a45      	ldr	r2, [pc, #276]	; (8001fd0 <main+0x4f4>)
 8001ebc:	4845      	ldr	r0, [pc, #276]	; (8001fd4 <main+0x4f8>)
  Task_T_ScrewHandle = osThreadNew(StartTask_T_Screw, NULL, &Task_T_Screw_attributes);
 8001ebe:	601d      	str	r5, [r3, #0]
  Task_Sens_ConntHandle = osThreadNew(StartTask_Sens_Connect, NULL, &Task_Sens_Connt_attributes);
 8001ec0:	f002 fefa 	bl	8004cb8 <osThreadNew>
 8001ec4:	4605      	mov	r5, r0
 8001ec6:	4b44      	ldr	r3, [pc, #272]	; (8001fd8 <main+0x4fc>)
  Task_Hopper_CovHandle = osThreadNew(StartTask_Hopper_Cover, NULL, &Task_Hopper_Cov_attributes);
 8001ec8:	4621      	mov	r1, r4
 8001eca:	4a44      	ldr	r2, [pc, #272]	; (8001fdc <main+0x500>)
 8001ecc:	4844      	ldr	r0, [pc, #272]	; (8001fe0 <main+0x504>)
  Task_Sens_ConntHandle = osThreadNew(StartTask_Sens_Connect, NULL, &Task_Sens_Connt_attributes);
 8001ece:	601d      	str	r5, [r3, #0]
  Task_Hopper_CovHandle = osThreadNew(StartTask_Hopper_Cover, NULL, &Task_Hopper_Cov_attributes);
 8001ed0:	f002 fef2 	bl	8004cb8 <osThreadNew>
 8001ed4:	4605      	mov	r5, r0
 8001ed6:	4b43      	ldr	r3, [pc, #268]	; (8001fe4 <main+0x508>)
  Task_CurrentHandle = osThreadNew(StartTask_Current, NULL, &Task_Current_attributes);
 8001ed8:	4621      	mov	r1, r4
 8001eda:	4a43      	ldr	r2, [pc, #268]	; (8001fe8 <main+0x50c>)
 8001edc:	4843      	ldr	r0, [pc, #268]	; (8001fec <main+0x510>)
  Task_Hopper_CovHandle = osThreadNew(StartTask_Hopper_Cover, NULL, &Task_Hopper_Cov_attributes);
 8001ede:	601d      	str	r5, [r3, #0]
  Task_CurrentHandle = osThreadNew(StartTask_Current, NULL, &Task_Current_attributes);
 8001ee0:	f002 feea 	bl	8004cb8 <osThreadNew>
 8001ee4:	4605      	mov	r5, r0
 8001ee6:	4b42      	ldr	r3, [pc, #264]	; (8001ff0 <main+0x514>)
  Task_T_BoilerHandle = osThreadNew(StartTask_T_Boiler, NULL, &Task_T_Boiler_attributes);
 8001ee8:	4621      	mov	r1, r4
 8001eea:	4a42      	ldr	r2, [pc, #264]	; (8001ff4 <main+0x518>)
 8001eec:	4842      	ldr	r0, [pc, #264]	; (8001ff8 <main+0x51c>)
  Task_CurrentHandle = osThreadNew(StartTask_Current, NULL, &Task_Current_attributes);
 8001eee:	601d      	str	r5, [r3, #0]
  Task_T_BoilerHandle = osThreadNew(StartTask_T_Boiler, NULL, &Task_T_Boiler_attributes);
 8001ef0:	f002 fee2 	bl	8004cb8 <osThreadNew>
 8001ef4:	4605      	mov	r5, r0
 8001ef6:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <main+0x520>)
  Task_T_GaseHandle = osThreadNew(StartTask_T_Gase, NULL, &Task_T_Gase_attributes);
 8001ef8:	4621      	mov	r1, r4
 8001efa:	4a41      	ldr	r2, [pc, #260]	; (8002000 <main+0x524>)
 8001efc:	4841      	ldr	r0, [pc, #260]	; (8002004 <main+0x528>)
  Task_T_BoilerHandle = osThreadNew(StartTask_T_Boiler, NULL, &Task_T_Boiler_attributes);
 8001efe:	601d      	str	r5, [r3, #0]
  Task_T_GaseHandle = osThreadNew(StartTask_T_Gase, NULL, &Task_T_Gase_attributes);
 8001f00:	f002 feda 	bl	8004cb8 <osThreadNew>
 8001f04:	4605      	mov	r5, r0
 8001f06:	4b40      	ldr	r3, [pc, #256]	; (8002008 <main+0x52c>)
  Task_T_WatersHandle = osThreadNew(StartTask_T_Waters, NULL, &Task_T_Waters_attributes);
 8001f08:	4621      	mov	r1, r4
 8001f0a:	4a40      	ldr	r2, [pc, #256]	; (800200c <main+0x530>)
 8001f0c:	4840      	ldr	r0, [pc, #256]	; (8002010 <main+0x534>)
  Task_T_GaseHandle = osThreadNew(StartTask_T_Gase, NULL, &Task_T_Gase_attributes);
 8001f0e:	601d      	str	r5, [r3, #0]
  Task_T_WatersHandle = osThreadNew(StartTask_T_Waters, NULL, &Task_T_Waters_attributes);
 8001f10:	f002 fed2 	bl	8004cb8 <osThreadNew>
 8001f14:	4605      	mov	r5, r0
 8001f16:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <main+0x538>)
  Task_ManageHandle = osThreadNew(StartTask_Manage, NULL, &Task_Manage_attributes);
 8001f18:	4621      	mov	r1, r4
 8001f1a:	4a3f      	ldr	r2, [pc, #252]	; (8002018 <main+0x53c>)
 8001f1c:	483f      	ldr	r0, [pc, #252]	; (800201c <main+0x540>)
  Task_T_WatersHandle = osThreadNew(StartTask_T_Waters, NULL, &Task_T_Waters_attributes);
 8001f1e:	601d      	str	r5, [r3, #0]
  Task_ManageHandle = osThreadNew(StartTask_Manage, NULL, &Task_Manage_attributes);
 8001f20:	f002 feca 	bl	8004cb8 <osThreadNew>
 8001f24:	4605      	mov	r5, r0
 8001f26:	4b3e      	ldr	r3, [pc, #248]	; (8002020 <main+0x544>)
  Task_MenuHandle = osThreadNew(StartTask_Menu, NULL, &Task_Menu_attributes);
 8001f28:	4621      	mov	r1, r4
 8001f2a:	4a3e      	ldr	r2, [pc, #248]	; (8002024 <main+0x548>)
 8001f2c:	483e      	ldr	r0, [pc, #248]	; (8002028 <main+0x54c>)
  Task_ManageHandle = osThreadNew(StartTask_Manage, NULL, &Task_Manage_attributes);
 8001f2e:	601d      	str	r5, [r3, #0]
  Task_MenuHandle = osThreadNew(StartTask_Menu, NULL, &Task_Menu_attributes);
 8001f30:	f002 fec2 	bl	8004cb8 <osThreadNew>
 8001f34:	4605      	mov	r5, r0
 8001f36:	4b3d      	ldr	r3, [pc, #244]	; (800202c <main+0x550>)
  Task_ButtonHandle = osThreadNew(StartTask_Button, NULL, &Task_Button_attributes);
 8001f38:	4621      	mov	r1, r4
 8001f3a:	4a3d      	ldr	r2, [pc, #244]	; (8002030 <main+0x554>)
 8001f3c:	483d      	ldr	r0, [pc, #244]	; (8002034 <main+0x558>)
  Task_MenuHandle = osThreadNew(StartTask_Menu, NULL, &Task_Menu_attributes);
 8001f3e:	601d      	str	r5, [r3, #0]
  Task_ButtonHandle = osThreadNew(StartTask_Button, NULL, &Task_Button_attributes);
 8001f40:	f002 feba 	bl	8004cb8 <osThreadNew>
 8001f44:	4605      	mov	r5, r0
 8001f46:	4b3c      	ldr	r3, [pc, #240]	; (8002038 <main+0x55c>)
  Task_SMSHandle = osThreadNew(StartTask_SMS, NULL, &Task_SMS_attributes);
 8001f48:	4621      	mov	r1, r4
 8001f4a:	4a3c      	ldr	r2, [pc, #240]	; (800203c <main+0x560>)
 8001f4c:	483c      	ldr	r0, [pc, #240]	; (8002040 <main+0x564>)
  Task_ButtonHandle = osThreadNew(StartTask_Button, NULL, &Task_Button_attributes);
 8001f4e:	601d      	str	r5, [r3, #0]
  Task_SMSHandle = osThreadNew(StartTask_SMS, NULL, &Task_SMS_attributes);
 8001f50:	f002 feb2 	bl	8004cb8 <osThreadNew>
 8001f54:	4605      	mov	r5, r0
 8001f56:	4b3b      	ldr	r3, [pc, #236]	; (8002044 <main+0x568>)
  Task_FanManageHandle = osThreadNew(StartTask_FanManage, NULL, &Task_FanManage_attributes);
 8001f58:	4621      	mov	r1, r4
 8001f5a:	4a3b      	ldr	r2, [pc, #236]	; (8002048 <main+0x56c>)
 8001f5c:	483b      	ldr	r0, [pc, #236]	; (800204c <main+0x570>)
  Task_SMSHandle = osThreadNew(StartTask_SMS, NULL, &Task_SMS_attributes);
 8001f5e:	601d      	str	r5, [r3, #0]
  Task_FanManageHandle = osThreadNew(StartTask_FanManage, NULL, &Task_FanManage_attributes);
 8001f60:	f002 feaa 	bl	8004cb8 <osThreadNew>
 8001f64:	4b3a      	ldr	r3, [pc, #232]	; (8002050 <main+0x574>)
 8001f66:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001f68:	f002 fe84 	bl	8004c74 <osKernelStart>
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <main+0x490>
 8001f6e:	bf00      	nop
 8001f70:	2000095c 	.word	0x2000095c
 8001f74:	40002800 	.word	0x40002800
 8001f78:	200008e8 	.word	0x200008e8
 8001f7c:	2000088c 	.word	0x2000088c
 8001f80:	08007464 	.word	0x08007464
 8001f84:	08001015 	.word	0x08001015
 8001f88:	20000888 	.word	0x20000888
 8001f8c:	08007454 	.word	0x08007454
 8001f90:	08001029 	.word	0x08001029
 8001f94:	20000884 	.word	0x20000884
 8001f98:	08007498 	.word	0x08007498
 8001f9c:	08001035 	.word	0x08001035
 8001fa0:	20000a78 	.word	0x20000a78
 8001fa4:	08007268 	.word	0x08007268
 8001fa8:	200000b8 	.word	0x200000b8
 8001fac:	08007474 	.word	0x08007474
 8001fb0:	08001039 	.word	0x08001039
 8001fb4:	200008d4 	.word	0x200008d4
 8001fb8:	08007280 	.word	0x08007280
 8001fbc:	0800163d 	.word	0x0800163d
 8001fc0:	200000ec 	.word	0x200000ec
 8001fc4:	0800740c 	.word	0x0800740c
 8001fc8:	0800105d 	.word	0x0800105d
 8001fcc:	2000087c 	.word	0x2000087c
 8001fd0:	080073a0 	.word	0x080073a0
 8001fd4:	08001045 	.word	0x08001045
 8001fd8:	20000870 	.word	0x20000870
 8001fdc:	08007310 	.word	0x08007310
 8001fe0:	08001051 	.word	0x08001051
 8001fe4:	20000594 	.word	0x20000594
 8001fe8:	080072c8 	.word	0x080072c8
 8001fec:	08001085 	.word	0x08001085
 8001ff0:	200003c0 	.word	0x200003c0
 8001ff4:	080073c4 	.word	0x080073c4
 8001ff8:	08001355 	.word	0x08001355
 8001ffc:	20000874 	.word	0x20000874
 8002000:	080073e8 	.word	0x080073e8
 8002004:	08001155 	.word	0x08001155
 8002008:	20000878 	.word	0x20000878
 800200c:	08007430 	.word	0x08007430
 8002010:	080018bd 	.word	0x080018bd
 8002014:	20000880 	.word	0x20000880
 8002018:	08007334 	.word	0x08007334
 800201c:	080011ed 	.word	0x080011ed
 8002020:	20000598 	.word	0x20000598
 8002024:	08007358 	.word	0x08007358
 8002028:	080017a5 	.word	0x080017a5
 800202c:	2000059c 	.word	0x2000059c
 8002030:	080072a4 	.word	0x080072a4
 8002034:	08002119 	.word	0x08002119
 8002038:	200003bc 	.word	0x200003bc
 800203c:	0800737c 	.word	0x0800737c
 8002040:	08001a01 	.word	0x08001a01
 8002044:	2000086c 	.word	0x2000086c
 8002048:	080072ec 	.word	0x080072ec
 800204c:	080010ad 	.word	0x080010ad
 8002050:	20000590 	.word	0x20000590

08002054 <button>:
uint8_t button(){
 8002054:	b570      	push	{r4, r5, r6, lr}
	uint32_t Time_button_start = HAL_GetTick();
 8002056:	f000 fab9 	bl	80025cc <HAL_GetTick>
		if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == 0){
 800205a:	2110      	movs	r1, #16
	uint32_t Time_button_start = HAL_GetTick();
 800205c:	4605      	mov	r5, r0
		if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == 0){
 800205e:	482a      	ldr	r0, [pc, #168]	; (8002108 <button+0xb4>)
 8002060:	f001 f910 	bl	8003284 <HAL_GPIO_ReadPin>
 8002064:	bb88      	cbnz	r0, 80020ca <button+0x76>
 8002066:	4604      	mov	r4, r0
			while(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == 0 ) {
 8002068:	4e27      	ldr	r6, [pc, #156]	; (8002108 <button+0xb4>)
 800206a:	e007      	b.n	800207c <button+0x28>
				Time_button_press+=HAL_GetTick() - Time_button_start;
 800206c:	f000 faae 	bl	80025cc <HAL_GetTick>
 8002070:	4603      	mov	r3, r0
				osDelay(20);
 8002072:	2014      	movs	r0, #20
				Time_button_press+=HAL_GetTick() - Time_button_start;
 8002074:	1b5b      	subs	r3, r3, r5
 8002076:	441c      	add	r4, r3
				osDelay(20);
 8002078:	f002 fe96 	bl	8004da8 <osDelay>
			while(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == 0 ) {
 800207c:	2110      	movs	r1, #16
 800207e:	4630      	mov	r0, r6
 8002080:	f001 f900 	bl	8003284 <HAL_GPIO_ReadPin>
 8002084:	2800      	cmp	r0, #0
 8002086:	d0f1      	beq.n	800206c <button+0x18>
			if(TIME_BUTTON_SHORT >= Time_button_press ){
 8002088:	f640 33c1 	movw	r3, #3009	; 0xbc1
 800208c:	429c      	cmp	r4, r3
 800208e:	d90d      	bls.n	80020ac <button+0x58>
			if(Time_button_press >= TIME_BUTTON_LONG && Time_button_press > TIME_BUTTON_SHORT){
 8002090:	f641 3357 	movw	r3, #6999	; 0x1b57
 8002094:	429c      	cmp	r4, r3
 8002096:	d825      	bhi.n	80020e4 <button+0x90>
			if(button_mail.mail_state == BUTTON_MAIL_PROCESSED) {
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <button+0xb8>)
 800209a:	781a      	ldrb	r2, [r3, #0]
 800209c:	b9f2      	cbnz	r2, 80020dc <button+0x88>
				button_mail.button_state = BUTTON_UP;
 800209e:	2200      	movs	r2, #0
				button_mail.mail_state = BUTTON_MAIL_UPDATED;
 80020a0:	f240 1101 	movw	r1, #257	; 0x101
				button_mail.button_state = BUTTON_UP;
 80020a4:	709a      	strb	r2, [r3, #2]
				button_mail.mail_state = BUTTON_MAIL_UPDATED;
 80020a6:	8019      	strh	r1, [r3, #0]
			return 0;
 80020a8:	4610      	mov	r0, r2
}
 80020aa:	bd70      	pop	{r4, r5, r6, pc}
				long_clicking = 0;
 80020ac:	2500      	movs	r5, #0
				short_clicking = 1;
 80020ae:	2301      	movs	r3, #1
				if(button_mail.mail_state == BUTTON_MAIL_PROCESSED) {
 80020b0:	4a16      	ldr	r2, [pc, #88]	; (800210c <button+0xb8>)
				long_clicking = 0;
 80020b2:	4c17      	ldr	r4, [pc, #92]	; (8002110 <button+0xbc>)
				short_clicking = 1;
 80020b4:	4817      	ldr	r0, [pc, #92]	; (8002114 <button+0xc0>)
				if(button_mail.mail_state == BUTTON_MAIL_PROCESSED) {
 80020b6:	7811      	ldrb	r1, [r2, #0]
				long_clicking = 0;
 80020b8:	7025      	strb	r5, [r4, #0]
				short_clicking = 1;
 80020ba:	7003      	strb	r3, [r0, #0]
				if(button_mail.mail_state == BUTTON_MAIL_PROCESSED) {
 80020bc:	b981      	cbnz	r1, 80020e0 <button+0x8c>
					button_mail.mail_state = BUTTON_MAIL_UPDATED;
 80020be:	f240 1101 	movw	r1, #257	; 0x101
					button_mail.button_state = BUTTON_SHORT_PUSHED;
 80020c2:	7093      	strb	r3, [r2, #2]
					button_mail.mail_state = BUTTON_MAIL_UPDATED;
 80020c4:	8011      	strh	r1, [r2, #0]
				return 1;
 80020c6:	4618      	mov	r0, r3
}
 80020c8:	bd70      	pop	{r4, r5, r6, pc}
			long_clicking = 0;
 80020ca:	2200      	movs	r2, #0
			if(button_mail.mail_state == BUTTON_MAIL_PROCESSED) {
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <button+0xb8>)
			long_clicking = 0;
 80020ce:	4c10      	ldr	r4, [pc, #64]	; (8002110 <button+0xbc>)
			short_clicking = 0;
 80020d0:	4810      	ldr	r0, [pc, #64]	; (8002114 <button+0xc0>)
			if(button_mail.mail_state == BUTTON_MAIL_PROCESSED) {
 80020d2:	7819      	ldrb	r1, [r3, #0]
			long_clicking = 0;
 80020d4:	7022      	strb	r2, [r4, #0]
			short_clicking = 0;
 80020d6:	7002      	strb	r2, [r0, #0]
			if(button_mail.mail_state == BUTTON_MAIL_PROCESSED) {
 80020d8:	2900      	cmp	r1, #0
 80020da:	d0e0      	beq.n	800209e <button+0x4a>
			return 0;
 80020dc:	2000      	movs	r0, #0
}
 80020de:	bd70      	pop	{r4, r5, r6, pc}
				return 1;
 80020e0:	4618      	mov	r0, r3
}
 80020e2:	bd70      	pop	{r4, r5, r6, pc}
				long_clicking = 1;
 80020e4:	2501      	movs	r5, #1
				short_clicking = 0;
 80020e6:	2000      	movs	r0, #0
				if(button_mail.mail_state == BUTTON_MAIL_PROCESSED) {
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <button+0xb8>)
				long_clicking = 1;
 80020ea:	4c09      	ldr	r4, [pc, #36]	; (8002110 <button+0xbc>)
				short_clicking = 0;
 80020ec:	4909      	ldr	r1, [pc, #36]	; (8002114 <button+0xc0>)
				if(button_mail.mail_state == BUTTON_MAIL_PROCESSED) {
 80020ee:	781a      	ldrb	r2, [r3, #0]
				long_clicking = 1;
 80020f0:	7025      	strb	r5, [r4, #0]
				short_clicking = 0;
 80020f2:	7008      	strb	r0, [r1, #0]
				if(button_mail.mail_state == BUTTON_MAIL_PROCESSED) {
 80020f4:	b932      	cbnz	r2, 8002104 <button+0xb0>
					button_mail.button_state = BUTTON_LONG_PUSHED;
 80020f6:	2202      	movs	r2, #2
					button_mail.mail_state = BUTTON_MAIL_UPDATED;
 80020f8:	f240 1101 	movw	r1, #257	; 0x101
					button_mail.button_state = BUTTON_LONG_PUSHED;
 80020fc:	709a      	strb	r2, [r3, #2]
					button_mail.mail_state = BUTTON_MAIL_UPDATED;
 80020fe:	8019      	strh	r1, [r3, #0]
				return 2;
 8002100:	4610      	mov	r0, r2
}
 8002102:	bd70      	pop	{r4, r5, r6, pc}
				return 2;
 8002104:	2002      	movs	r0, #2
}
 8002106:	bd70      	pop	{r4, r5, r6, pc}
 8002108:	40010c00 	.word	0x40010c00
 800210c:	200008d0 	.word	0x200008d0
 8002110:	20000a75 	.word	0x20000a75
 8002114:	20000aa2 	.word	0x20000aa2

08002118 <StartTask_Button>:
{
 8002118:	b508      	push	{r3, lr}
 800211a:	4c04      	ldr	r4, [pc, #16]	; (800212c <StartTask_Button+0x14>)
	  PressF = button();
 800211c:	f7ff ff9a 	bl	8002054 <button>
 8002120:	4603      	mov	r3, r0
    osDelay(10);
 8002122:	200a      	movs	r0, #10
	  PressF = button();
 8002124:	7023      	strb	r3, [r4, #0]
    osDelay(10);
 8002126:	f002 fe3f 	bl	8004da8 <osDelay>
  for(;;)
 800212a:	e7f7      	b.n	800211c <StartTask_Button+0x4>
 800212c:	200000b6 	.word	0x200000b6

08002130 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8002130:	4b03      	ldr	r3, [pc, #12]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002132:	6802      	ldr	r2, [r0, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d000      	beq.n	800213a <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8002138:	4770      	bx	lr
    HAL_IncTick();
 800213a:	f000 ba3b 	b.w	80025b4 <HAL_IncTick>
 800213e:	bf00      	nop
 8002140:	40012c00 	.word	0x40012c00

08002144 <Error_Handler>:
 8002144:	b672      	cpsid	i
  while (1)
 8002146:	e7fe      	b.n	8002146 <Error_Handler+0x2>

08002148 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_MspInit+0x48>)
{
 800214a:	b510      	push	{r4, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 800214c:	6998      	ldr	r0, [r3, #24]
{
 800214e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002150:	f040 0001 	orr.w	r0, r0, #1
 8002154:	6198      	str	r0, [r3, #24]
 8002156:	699c      	ldr	r4, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002158:	2200      	movs	r2, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 800215a:	f004 0401 	and.w	r4, r4, #1
 800215e:	9400      	str	r4, [sp, #0]
 8002160:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	69dc      	ldr	r4, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002164:	210f      	movs	r1, #15
  __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800216a:	61dc      	str	r4, [r3, #28]
 800216c:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800216e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800217a:	f000 fdaf 	bl	8002cdc <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <HAL_MspInit+0x4c>)
 8002180:	6853      	ldr	r3, [r2, #4]
 8002182:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002186:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800218a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218c:	b002      	add	sp, #8
 800218e:	bd10      	pop	{r4, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	40010000 	.word	0x40010000

08002198 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002198:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219a:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800219c:	4b25      	ldr	r3, [pc, #148]	; (8002234 <HAL_ADC_MspInit+0x9c>)
 800219e:	6802      	ldr	r2, [r0, #0]
{
 80021a0:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 80021a2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80021a8:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hadc->Instance==ADC1)
 80021ac:	d001      	beq.n	80021b2 <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021ae:	b006      	add	sp, #24
 80021b0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021b2:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80021b6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021be:	619a      	str	r2, [r3, #24]
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	4605      	mov	r5, r0
 80021c4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80021c8:	9200      	str	r2, [sp, #0]
 80021ca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021cc:	699a      	ldr	r2, [r3, #24]
    hdma_adc1.Instance = DMA1_Channel1;
 80021ce:	4e1a      	ldr	r6, [pc, #104]	; (8002238 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d0:	f042 0204 	orr.w	r2, r2, #4
 80021d4:	619a      	str	r2, [r3, #24]
 80021d6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = Temp_Boiler_Pin|Current_LM321_Pin|Temp_Screw_Pin|Temp_Gase_Pin
 80021d8:	229f      	movs	r2, #159	; 0x9f
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e0:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	4815      	ldr	r0, [pc, #84]	; (800223c <HAL_ADC_MspInit+0xa4>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ea:	f000 ff3d 	bl	8003068 <HAL_GPIO_Init>
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021ee:	2380      	movs	r3, #128	; 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 80021f0:	4913      	ldr	r1, [pc, #76]	; (8002240 <HAL_ADC_MspInit+0xa8>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021f2:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f6:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021fa:	60f3      	str	r3, [r6, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002200:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002202:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002204:	60b4      	str	r4, [r6, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002206:	61f4      	str	r4, [r6, #28]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002208:	6171      	str	r1, [r6, #20]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800220a:	6132      	str	r2, [r6, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800220c:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800220e:	f000 fdb1 	bl	8002d74 <HAL_DMA_Init>
 8002212:	b958      	cbnz	r0, 800222c <HAL_ADC_MspInit+0x94>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2105      	movs	r1, #5
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002218:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800221a:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800221c:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800221e:	f000 fd5d 	bl	8002cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002222:	2012      	movs	r0, #18
 8002224:	f000 fd98 	bl	8002d58 <HAL_NVIC_EnableIRQ>
}
 8002228:	b006      	add	sp, #24
 800222a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800222c:	f7ff ff8a 	bl	8002144 <Error_Handler>
 8002230:	e7f0      	b.n	8002214 <HAL_ADC_MspInit+0x7c>
 8002232:	bf00      	nop
 8002234:	40012400 	.word	0x40012400
 8002238:	20000918 	.word	0x20000918
 800223c:	40010800 	.word	0x40010800
 8002240:	40020008 	.word	0x40020008

08002244 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <HAL_RTC_MspInit+0x44>)
 8002246:	6802      	ldr	r2, [r0, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d000      	beq.n	800224e <HAL_RTC_MspInit+0xa>
 800224c:	4770      	bx	lr
{
 800224e:	b530      	push	{r4, r5, lr}
  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002250:	2501      	movs	r5, #1
{
 8002252:	b083      	sub	sp, #12
    HAL_PWR_EnableBkUpAccess();
 8002254:	f001 f82c 	bl	80032b0 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_BKP_CLK_ENABLE();
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_RTC_MspInit+0x48>)
    __HAL_RCC_RTC_ENABLE();
 800225a:	4c0d      	ldr	r4, [pc, #52]	; (8002290 <HAL_RTC_MspInit+0x4c>)
    __HAL_RCC_BKP_CLK_ENABLE();
 800225c:	69da      	ldr	r2, [r3, #28]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 5, 0);
 800225e:	2003      	movs	r0, #3
    __HAL_RCC_BKP_CLK_ENABLE();
 8002260:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002264:	61da      	str	r2, [r3, #28]
 8002266:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(RTC_IRQn, 5, 0);
 8002268:	2200      	movs	r2, #0
    __HAL_RCC_BKP_CLK_ENABLE();
 800226a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(RTC_IRQn, 5, 0);
 8002272:	2105      	movs	r1, #5
    __HAL_RCC_RTC_ENABLE();
 8002274:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
    HAL_NVIC_SetPriority(RTC_IRQn, 5, 0);
 8002278:	f000 fd30 	bl	8002cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800227c:	2003      	movs	r0, #3
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800227e:	b003      	add	sp, #12
 8002280:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002284:	f000 bd68 	b.w	8002d58 <HAL_NVIC_EnableIRQ>
 8002288:	40002800 	.word	0x40002800
 800228c:	40021000 	.word	0x40021000
 8002290:	42420000 	.word	0x42420000

08002294 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002294:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002296:	2400      	movs	r4, #0
  if(hspi->Instance==SPI2)
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HAL_SPI_MspInit+0x70>)
 800229a:	6802      	ldr	r2, [r0, #0]
{
 800229c:	b086      	sub	sp, #24
  if(hspi->Instance==SPI2)
 800229e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80022a4:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hspi->Instance==SPI2)
 80022a8:	d001      	beq.n	80022ae <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022aa:	b006      	add	sp, #24
 80022ac:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ae:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80022b0:	f44f 4620 	mov.w	r6, #40960	; 0xa000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2502      	movs	r5, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022b6:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 80022ba:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022bc:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022c2:	61da      	str	r2, [r3, #28]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80022ca:	9200      	str	r2, [sp, #0]
 80022cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	699a      	ldr	r2, [r3, #24]
 80022d0:	f042 0208 	orr.w	r2, r2, #8
 80022d4:	619a      	str	r2, [r3, #24]
 80022d6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022d8:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e0:	4809      	ldr	r0, [pc, #36]	; (8002308 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	e9cd 6502 	strd	r6, r5, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e8:	f000 febe 	bl	8003068 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80022ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f0:	4805      	ldr	r0, [pc, #20]	; (8002308 <HAL_SPI_MspInit+0x74>)
 80022f2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	e9cd 4403 	strd	r4, r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80022f8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fa:	f000 feb5 	bl	8003068 <HAL_GPIO_Init>
}
 80022fe:	b006      	add	sp, #24
 8002300:	bd70      	pop	{r4, r5, r6, pc}
 8002302:	bf00      	nop
 8002304:	40003800 	.word	0x40003800
 8002308:	40010c00 	.word	0x40010c00

0800230c <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM4)
 800230c:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <HAL_TIM_PWM_MspInit+0x3c>)
 800230e:	6802      	ldr	r2, [r0, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d000      	beq.n	8002316 <HAL_TIM_PWM_MspInit+0xa>
 8002314:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002316:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800231a:	69d9      	ldr	r1, [r3, #28]
{
 800231c:	b500      	push	{lr}
    __HAL_RCC_TIM4_CLK_ENABLE();
 800231e:	f041 0104 	orr.w	r1, r1, #4
 8002322:	61d9      	str	r1, [r3, #28]
 8002324:	69db      	ldr	r3, [r3, #28]
{
 8002326:	b083      	sub	sp, #12
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	9301      	str	r3, [sp, #4]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800232e:	201e      	movs	r0, #30
 8002330:	2200      	movs	r2, #0
 8002332:	2105      	movs	r1, #5
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002334:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002336:	f000 fcd1 	bl	8002cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800233a:	201e      	movs	r0, #30
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800233c:	b003      	add	sp, #12
 800233e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002342:	f000 bd09 	b.w	8002d58 <HAL_NVIC_EnableIRQ>
 8002346:	bf00      	nop
 8002348:	40000800 	.word	0x40000800

0800234c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	2300      	movs	r3, #0
{
 800234e:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM4)
 8002350:	4a12      	ldr	r2, [pc, #72]	; (800239c <HAL_TIM_MspPostInit+0x50>)
 8002352:	6801      	ldr	r1, [r0, #0]
{
 8002354:	b086      	sub	sp, #24
  if(htim->Instance==TIM4)
 8002356:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800235c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM4)
 8002360:	d001      	beq.n	8002366 <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002362:	b006      	add	sp, #24
 8002364:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002366:	f44f 7680 	mov.w	r6, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800236c:	2403      	movs	r4, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002372:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002376:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002378:	4809      	ldr	r0, [pc, #36]	; (80023a0 <HAL_TIM_MspPostInit+0x54>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	f042 0208 	orr.w	r2, r2, #8
 800237e:	619a      	str	r2, [r3, #24]
 8002380:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002382:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	e9cd 6502 	strd	r6, r5, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002390:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002392:	f000 fe69 	bl	8003068 <HAL_GPIO_Init>
}
 8002396:	b006      	add	sp, #24
 8002398:	bd70      	pop	{r4, r5, r6, pc}
 800239a:	bf00      	nop
 800239c:	40000800 	.word	0x40000800
 80023a0:	40010c00 	.word	0x40010c00

080023a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023a4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a6:	2400      	movs	r4, #0
  if(huart->Instance==USART3)
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <HAL_UART_MspInit+0x80>)
 80023aa:	6802      	ldr	r2, [r0, #0]
{
 80023ac:	b086      	sub	sp, #24
  if(huart->Instance==USART3)
 80023ae:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80023b4:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART3)
 80023b8:	d001      	beq.n	80023be <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80023ba:	b006      	add	sp, #24
 80023bc:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023be:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023c0:	f44f 6680 	mov.w	r6, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c4:	2502      	movs	r5, #2
    __HAL_RCC_USART3_CLK_ENABLE();
 80023c6:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80023ca:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023cc:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 80023ce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80023d2:	61da      	str	r2, [r3, #28]
 80023d4:	69da      	ldr	r2, [r3, #28]
 80023d6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80023da:	9200      	str	r2, [sp, #0]
 80023dc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	f042 0208 	orr.w	r2, r2, #8
 80023e4:	619a      	str	r2, [r3, #24]
 80023e6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023e8:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f0:	480d      	ldr	r0, [pc, #52]	; (8002428 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	e9cd 6502 	strd	r6, r5, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f8:	f000 fe36 	bl	8003068 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002400:	a902      	add	r1, sp, #8
 8002402:	4809      	ldr	r0, [pc, #36]	; (8002428 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002404:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240a:	f000 fe2d 	bl	8003068 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800240e:	4622      	mov	r2, r4
 8002410:	2105      	movs	r1, #5
 8002412:	2027      	movs	r0, #39	; 0x27
 8002414:	f000 fc62 	bl	8002cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002418:	2027      	movs	r0, #39	; 0x27
 800241a:	f000 fc9d 	bl	8002d58 <HAL_NVIC_EnableIRQ>
}
 800241e:	b006      	add	sp, #24
 8002420:	bd70      	pop	{r4, r5, r6, pc}
 8002422:	bf00      	nop
 8002424:	40004800 	.word	0x40004800
 8002428:	40010c00 	.word	0x40010c00

0800242c <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800242c:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <HAL_InitTick+0x8c>)
{
 800242e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002430:	699a      	ldr	r2, [r3, #24]
{
 8002432:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002438:	619a      	str	r2, [r3, #24]
 800243a:	699b      	ldr	r3, [r3, #24]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800243c:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 800243e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002442:	9302      	str	r3, [sp, #8]
{
 8002444:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002446:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002448:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800244a:	f001 fa23 	bl	8003894 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800244e:	f001 fa11 	bl	8003874 <HAL_RCC_GetPCLK2Freq>
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002452:	f240 35e7 	movw	r5, #999	; 0x3e7
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8002456:	2200      	movs	r2, #0
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002458:	4603      	mov	r3, r0
  htim1.Instance = TIM1;
 800245a:	4c18      	ldr	r4, [pc, #96]	; (80024bc <HAL_InitTick+0x90>)
 800245c:	4918      	ldr	r1, [pc, #96]	; (80024c0 <HAL_InitTick+0x94>)
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800245e:	e9c4 5203 	strd	r5, r2, [r4, #12]
  htim1.Instance = TIM1;
 8002462:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002464:	f101 7146 	add.w	r1, r1, #51904512	; 0x3180000
 8002468:	f501 312c 	add.w	r1, r1, #176128	; 0x2b000
 800246c:	f201 2183 	addw	r1, r1, #643	; 0x283
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002470:	60a2      	str	r2, [r4, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002472:	61a2      	str	r2, [r4, #24]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002474:	fba1 2303 	umull	r2, r3, r1, r3
 8002478:	0c9b      	lsrs	r3, r3, #18
 800247a:	3b01      	subs	r3, #1

  status = HAL_TIM_Base_Init(&htim1);
 800247c:	4620      	mov	r0, r4
  htim1.Init.Prescaler = uwPrescalerValue;
 800247e:	6063      	str	r3, [r4, #4]
  status = HAL_TIM_Base_Init(&htim1);
 8002480:	f002 f81c 	bl	80044bc <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8002484:	4605      	mov	r5, r0
 8002486:	b110      	cbz	r0, 800248e <HAL_InitTick+0x62>
    }
  }

 /* Return function status */
  return status;
}
 8002488:	4628      	mov	r0, r5
 800248a:	b008      	add	sp, #32
 800248c:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 800248e:	4620      	mov	r0, r4
 8002490:	f001 fe40 	bl	8004114 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8002494:	4605      	mov	r5, r0
 8002496:	2800      	cmp	r0, #0
 8002498:	d1f6      	bne.n	8002488 <HAL_InitTick+0x5c>
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800249a:	2019      	movs	r0, #25
 800249c:	f000 fc5c 	bl	8002d58 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a0:	2e0f      	cmp	r6, #15
 80024a2:	d901      	bls.n	80024a8 <HAL_InitTick+0x7c>
        status = HAL_ERROR;
 80024a4:	2501      	movs	r5, #1
 80024a6:	e7ef      	b.n	8002488 <HAL_InitTick+0x5c>
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80024a8:	462a      	mov	r2, r5
 80024aa:	4631      	mov	r1, r6
 80024ac:	2019      	movs	r0, #25
 80024ae:	f000 fc15 	bl	8002cdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <HAL_InitTick+0x98>)
 80024b4:	601e      	str	r6, [r3, #0]
 80024b6:	e7e7      	b.n	8002488 <HAL_InitTick+0x5c>
 80024b8:	40021000 	.word	0x40021000
 80024bc:	20000ac8 	.word	0x20000ac8
 80024c0:	40012c00 	.word	0x40012c00
 80024c4:	2000002c 	.word	0x2000002c

080024c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <NMI_Handler>
 80024ca:	bf00      	nop

080024cc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024cc:	e7fe      	b.n	80024cc <HardFault_Handler>
 80024ce:	bf00      	nop

080024d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <MemManage_Handler>
 80024d2:	bf00      	nop

080024d4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <BusFault_Handler>
 80024d6:	bf00      	nop

080024d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d8:	e7fe      	b.n	80024d8 <UsageFault_Handler>
 80024da:	bf00      	nop

080024dc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop

080024e0 <RTC_IRQHandler>:
void RTC_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80024e0:	4801      	ldr	r0, [pc, #4]	; (80024e8 <RTC_IRQHandler+0x8>)
 80024e2:	f001 bd17 	b.w	8003f14 <HAL_RTCEx_RTCIRQHandler>
 80024e6:	bf00      	nop
 80024e8:	2000095c 	.word	0x2000095c

080024ec <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_1_Pin);
 80024ec:	2004      	movs	r0, #4
 80024ee:	f000 bed3 	b.w	8003298 <HAL_GPIO_EXTI_IRQHandler>
 80024f2:	bf00      	nop

080024f4 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_2_Pin);
 80024f4:	2008      	movs	r0, #8
 80024f6:	f000 becf 	b.w	8003298 <HAL_GPIO_EXTI_IRQHandler>
 80024fa:	bf00      	nop

080024fc <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024fc:	4801      	ldr	r0, [pc, #4]	; (8002504 <DMA1_Channel1_IRQHandler+0x8>)
 80024fe:	f000 bd1f 	b.w	8002f40 <HAL_DMA_IRQHandler>
 8002502:	bf00      	nop
 8002504:	20000918 	.word	0x20000918

08002508 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002508:	4801      	ldr	r0, [pc, #4]	; (8002510 <ADC1_2_IRQHandler+0x8>)
 800250a:	f000 b899 	b.w	8002640 <HAL_ADC_IRQHandler>
 800250e:	bf00      	nop
 8002510:	200008e8 	.word	0x200008e8

08002514 <EXTI9_5_IRQHandler>:
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	//HAL_NVIC_DisableIRQ(EXTI9_5_IRQHandler);

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(U2_PC817_Pin);
 8002514:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002518:	f000 bebe 	b.w	8003298 <HAL_GPIO_EXTI_IRQHandler>

0800251c <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800251c:	4801      	ldr	r0, [pc, #4]	; (8002524 <TIM1_UP_IRQHandler+0x8>)
 800251e:	f001 bed7 	b.w	80042d0 <HAL_TIM_IRQHandler>
 8002522:	bf00      	nop
 8002524:	20000ac8 	.word	0x20000ac8

08002528 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002528:	4801      	ldr	r0, [pc, #4]	; (8002530 <TIM4_IRQHandler+0x8>)
 800252a:	f001 bed1 	b.w	80042d0 <HAL_TIM_IRQHandler>
 800252e:	bf00      	nop
 8002530:	200009c8 	.word	0x200009c8

08002534 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002534:	4801      	ldr	r0, [pc, #4]	; (800253c <USART3_IRQHandler+0x8>)
 8002536:	f002 ba45 	b.w	80049c4 <HAL_UART_IRQHandler>
 800253a:	bf00      	nop
 800253c:	20000a10 	.word	0x20000a10

08002540 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop

08002544 <Reset_Handler>:
 8002544:	480c      	ldr	r0, [pc, #48]	; (8002578 <LoopFillZerobss+0x12>)
 8002546:	490d      	ldr	r1, [pc, #52]	; (800257c <LoopFillZerobss+0x16>)
 8002548:	4a0d      	ldr	r2, [pc, #52]	; (8002580 <LoopFillZerobss+0x1a>)
 800254a:	2300      	movs	r3, #0
 800254c:	e002      	b.n	8002554 <LoopCopyDataInit>

0800254e <CopyDataInit>:
 800254e:	58d4      	ldr	r4, [r2, r3]
 8002550:	50c4      	str	r4, [r0, r3]
 8002552:	3304      	adds	r3, #4

08002554 <LoopCopyDataInit>:
 8002554:	18c4      	adds	r4, r0, r3
 8002556:	428c      	cmp	r4, r1
 8002558:	d3f9      	bcc.n	800254e <CopyDataInit>
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <LoopFillZerobss+0x1e>)
 800255c:	4c0a      	ldr	r4, [pc, #40]	; (8002588 <LoopFillZerobss+0x22>)
 800255e:	2300      	movs	r3, #0
 8002560:	e001      	b.n	8002566 <LoopFillZerobss>

08002562 <FillZerobss>:
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	3204      	adds	r2, #4

08002566 <LoopFillZerobss>:
 8002566:	42a2      	cmp	r2, r4
 8002568:	d3fb      	bcc.n	8002562 <FillZerobss>
 800256a:	f7ff ffe9 	bl	8002540 <SystemInit>
 800256e:	f004 fae5 	bl	8006b3c <__libc_init_array>
 8002572:	f7ff fab3 	bl	8001adc <main>
 8002576:	4770      	bx	lr
 8002578:	20000000 	.word	0x20000000
 800257c:	20000098 	.word	0x20000098
 8002580:	08007558 	.word	0x08007558
 8002584:	20000098 	.word	0x20000098
 8002588:	200031a8 	.word	0x200031a8

0800258c <CAN1_RX1_IRQHandler>:
 800258c:	e7fe      	b.n	800258c <CAN1_RX1_IRQHandler>
	...

08002590 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002590:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <HAL_Init+0x20>)
{
 8002592:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002594:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002596:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002598:	f043 0310 	orr.w	r3, r3, #16
 800259c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800259e:	f000 fb8b 	bl	8002cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a2:	200f      	movs	r0, #15
 80025a4:	f7ff ff42 	bl	800242c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a8:	f7ff fdce 	bl	8002148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80025ac:	2000      	movs	r0, #0
 80025ae:	bd08      	pop	{r3, pc}
 80025b0:	40022000 	.word	0x40022000

080025b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80025b4:	4a03      	ldr	r2, [pc, #12]	; (80025c4 <HAL_IncTick+0x10>)
 80025b6:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <HAL_IncTick+0x14>)
 80025b8:	6811      	ldr	r1, [r2, #0]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	440b      	add	r3, r1
 80025be:	6013      	str	r3, [r2, #0]
}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20000b10 	.word	0x20000b10
 80025c8:	20000028 	.word	0x20000028

080025cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80025cc:	4b01      	ldr	r3, [pc, #4]	; (80025d4 <HAL_GetTick+0x8>)
 80025ce:	6818      	ldr	r0, [r3, #0]
}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000b10 	.word	0x20000b10

080025d8 <HAL_ADC_ConvCpltCallback>:
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop

080025dc <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025e0:	f012 0f50 	tst.w	r2, #80	; 0x50
 80025e4:	d10f      	bne.n	8002606 <ADC_DMAConvCplt+0x2a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025e8:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 80025ee:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025f0:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025f2:	688a      	ldr	r2, [r1, #8]
 80025f4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80025f8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80025fc:	d006      	beq.n	800260c <ADC_DMAConvCplt+0x30>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ffea 	bl	80025d8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002604:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4718      	bx	r3
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800260c:	7b1a      	ldrb	r2, [r3, #12]
 800260e:	2a00      	cmp	r2, #0
 8002610:	d1f5      	bne.n	80025fe <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002612:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002618:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800261a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800261c:	04d2      	lsls	r2, r2, #19
 800261e:	d4ee      	bmi.n	80025fe <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	629a      	str	r2, [r3, #40]	; 0x28
 8002628:	e7e9      	b.n	80025fe <ADC_DMAConvCplt+0x22>
 800262a:	bf00      	nop

0800262c <HAL_ADC_ConvHalfCpltCallback>:
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop

08002630 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002630:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002632:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002634:	f7ff fffa 	bl	800262c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002638:	bd08      	pop	{r3, pc}
 800263a:	bf00      	nop

0800263c <HAL_ADC_LevelOutOfWindowCallback>:
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop

08002640 <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002640:	6803      	ldr	r3, [r0, #0]
{
 8002642:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002644:	685a      	ldr	r2, [r3, #4]
{
 8002646:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002648:	0690      	lsls	r0, r2, #26
 800264a:	d502      	bpl.n	8002652 <HAL_ADC_IRQHandler+0x12>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	0791      	lsls	r1, r2, #30
 8002650:	d42a      	bmi.n	80026a8 <HAL_ADC_IRQHandler+0x68>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	0610      	lsls	r0, r2, #24
 8002656:	d502      	bpl.n	800265e <HAL_ADC_IRQHandler+0x1e>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	0751      	lsls	r1, r2, #29
 800265c:	d406      	bmi.n	800266c <HAL_ADC_IRQHandler+0x2c>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	0652      	lsls	r2, r2, #25
 8002662:	d502      	bpl.n	800266a <HAL_ADC_IRQHandler+0x2a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	07db      	lsls	r3, r3, #31
 8002668:	d433      	bmi.n	80026d2 <HAL_ADC_IRQHandler+0x92>
}
 800266a:	bd10      	pop	{r4, pc}
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800266c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800266e:	06d2      	lsls	r2, r2, #27
 8002670:	d403      	bmi.n	800267a <HAL_ADC_IRQHandler+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002672:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002678:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8002680:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8002684:	d034      	beq.n	80026f0 <HAL_ADC_IRQHandler+0xb0>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002686:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002688:	0550      	lsls	r0, r2, #21
 800268a:	d405      	bmi.n	8002698 <HAL_ADC_IRQHandler+0x58>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002692:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002696:	d028      	beq.n	80026ea <HAL_ADC_IRQHandler+0xaa>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002698:	4620      	mov	r0, r4
 800269a:	f000 fb0b 	bl	8002cb4 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800269e:	f06f 020c 	mvn.w	r2, #12
 80026a2:	6823      	ldr	r3, [r4, #0]
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	e7da      	b.n	800265e <HAL_ADC_IRQHandler+0x1e>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80026aa:	06d2      	lsls	r2, r2, #27
 80026ac:	d403      	bmi.n	80026b6 <HAL_ADC_IRQHandler+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80026ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80026b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b4:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80026bc:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80026c0:	d026      	beq.n	8002710 <HAL_ADC_IRQHandler+0xd0>
      HAL_ADC_ConvCpltCallback(hadc);
 80026c2:	4620      	mov	r0, r4
 80026c4:	f7ff ff88 	bl	80025d8 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026c8:	f06f 0212 	mvn.w	r2, #18
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	e7bf      	b.n	8002652 <HAL_ADC_IRQHandler+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026d4:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026da:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026dc:	f7ff ffae 	bl	800263c <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80026e0:	f06f 0201 	mvn.w	r2, #1
 80026e4:	6823      	ldr	r3, [r4, #0]
 80026e6:	601a      	str	r2, [r3, #0]
}
 80026e8:	bd10      	pop	{r4, pc}
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80026ea:	7b22      	ldrb	r2, [r4, #12]
 80026ec:	2a00      	cmp	r2, #0
 80026ee:	d1d3      	bne.n	8002698 <HAL_ADC_IRQHandler+0x58>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f6:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80026f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026fe:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002700:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002702:	05d9      	lsls	r1, r3, #23
 8002704:	d4c8      	bmi.n	8002698 <HAL_ADC_IRQHandler+0x58>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002706:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	62a3      	str	r3, [r4, #40]	; 0x28
 800270e:	e7c3      	b.n	8002698 <HAL_ADC_IRQHandler+0x58>
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002710:	7b22      	ldrb	r2, [r4, #12]
 8002712:	2a00      	cmp	r2, #0
 8002714:	d1d5      	bne.n	80026c2 <HAL_ADC_IRQHandler+0x82>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	f022 0220 	bic.w	r2, r2, #32
 800271c:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800271e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002724:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002726:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002728:	04db      	lsls	r3, r3, #19
 800272a:	d4ca      	bmi.n	80026c2 <HAL_ADC_IRQHandler+0x82>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800272c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	62a3      	str	r3, [r4, #40]	; 0x28
 8002734:	e7c5      	b.n	80026c2 <HAL_ADC_IRQHandler+0x82>
 8002736:	bf00      	nop

08002738 <HAL_ADC_ErrorCallback>:
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop

0800273c <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800273c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800273e:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002740:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002746:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002748:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800274a:	f043 0304 	orr.w	r3, r3, #4
 800274e:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002750:	f7ff fff2 	bl	8002738 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002754:	bd08      	pop	{r3, pc}
 8002756:	bf00      	nop

08002758 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8002758:	2300      	movs	r3, #0
{ 
 800275a:	b530      	push	{r4, r5, lr}
 800275c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800275e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002760:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002764:	2b01      	cmp	r3, #1
 8002766:	d074      	beq.n	8002852 <HAL_ADC_ConfigChannel+0xfa>
 8002768:	2301      	movs	r3, #1
 800276a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800276e:	684b      	ldr	r3, [r1, #4]
 8002770:	4602      	mov	r2, r0
 8002772:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002774:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 8002776:	d932      	bls.n	80027de <HAL_ADC_ConfigChannel+0x86>
  else if (sConfig->Rank < 13U)
 8002778:	2b0c      	cmp	r3, #12
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800277a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 800277e:	d84e      	bhi.n	800281e <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002780:	f04f 0c1f 	mov.w	ip, #31
 8002784:	6808      	ldr	r0, [r1, #0]
 8002786:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002788:	3b23      	subs	r3, #35	; 0x23
 800278a:	fa00 fe03 	lsl.w	lr, r0, r3
 800278e:	fa0c f303 	lsl.w	r3, ip, r3
 8002792:	ea25 0303 	bic.w	r3, r5, r3
 8002796:	ea43 030e 	orr.w	r3, r3, lr
 800279a:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800279c:	2809      	cmp	r0, #9
 800279e:	d930      	bls.n	8002802 <HAL_ADC_ConfigChannel+0xaa>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027a0:	f04f 0c07 	mov.w	ip, #7
 80027a4:	688d      	ldr	r5, [r1, #8]
 80027a6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80027aa:	68e3      	ldr	r3, [r4, #12]
 80027ac:	391e      	subs	r1, #30
 80027ae:	408d      	lsls	r5, r1
 80027b0:	fa0c f101 	lsl.w	r1, ip, r1
 80027b4:	ea23 0301 	bic.w	r3, r3, r1
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027b8:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027bc:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027be:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027c0:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027c2:	d844      	bhi.n	800284e <HAL_ADC_ConfigChannel+0xf6>
    if (hadc->Instance == ADC1)
 80027c4:	4b2e      	ldr	r3, [pc, #184]	; (8002880 <HAL_ADC_ConfigChannel+0x128>)
 80027c6:	429c      	cmp	r4, r3
 80027c8:	d038      	beq.n	800283c <HAL_ADC_ConfigChannel+0xe4>
      tmp_hal_status = HAL_ERROR;
 80027ca:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80027ce:	f043 0320 	orr.w	r3, r3, #32
 80027d2:	6293      	str	r3, [r2, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 80027d4:	2300      	movs	r3, #0
 80027d6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 80027da:	b003      	add	sp, #12
 80027dc:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80027de:	f04f 0c1f 	mov.w	ip, #31
 80027e2:	6808      	ldr	r0, [r1, #0]
 80027e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027e8:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80027ea:	3b05      	subs	r3, #5
 80027ec:	fa00 fe03 	lsl.w	lr, r0, r3
 80027f0:	fa0c f303 	lsl.w	r3, ip, r3
 80027f4:	ea25 0303 	bic.w	r3, r5, r3
 80027f8:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80027fc:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80027fe:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002800:	d8ce      	bhi.n	80027a0 <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002802:	2507      	movs	r5, #7
 8002804:	6889      	ldr	r1, [r1, #8]
 8002806:	6923      	ldr	r3, [r4, #16]
 8002808:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800280c:	4081      	lsls	r1, r0
 800280e:	fa05 f000 	lsl.w	r0, r5, r0
 8002812:	ea23 0300 	bic.w	r3, r3, r0
 8002816:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002818:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800281a:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800281c:	e7da      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800281e:	f04f 0c1f 	mov.w	ip, #31
 8002822:	6808      	ldr	r0, [r1, #0]
 8002824:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002826:	3b41      	subs	r3, #65	; 0x41
 8002828:	fa00 fe03 	lsl.w	lr, r0, r3
 800282c:	fa0c f303 	lsl.w	r3, ip, r3
 8002830:	ea25 0303 	bic.w	r3, r5, r3
 8002834:	ea43 030e 	orr.w	r3, r3, lr
 8002838:	62e3      	str	r3, [r4, #44]	; 0x2c
 800283a:	e7af      	b.n	800279c <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800283c:	68a3      	ldr	r3, [r4, #8]
 800283e:	021b      	lsls	r3, r3, #8
 8002840:	d405      	bmi.n	800284e <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002842:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002844:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002846:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800284a:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800284c:	d004      	beq.n	8002858 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800284e:	2000      	movs	r0, #0
 8002850:	e7c0      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8002852:	2002      	movs	r0, #2
}
 8002854:	b003      	add	sp, #12
 8002856:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002858:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_ADC_ConfigChannel+0x12c>)
 800285a:	490b      	ldr	r1, [pc, #44]	; (8002888 <HAL_ADC_ConfigChannel+0x130>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	fba1 1303 	umull	r1, r3, r1, r3
 8002862:	0c9b      	lsrs	r3, r3, #18
 8002864:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800286c:	9b01      	ldr	r3, [sp, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0ed      	beq.n	800284e <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 8002872:	9b01      	ldr	r3, [sp, #4]
 8002874:	3b01      	subs	r3, #1
 8002876:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002878:	9b01      	ldr	r3, [sp, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f9      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x11a>
 800287e:	e7e6      	b.n	800284e <HAL_ADC_ConfigChannel+0xf6>
 8002880:	40012400 	.word	0x40012400
 8002884:	20000024 	.word	0x20000024
 8002888:	431bde83 	.word	0x431bde83

0800288c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800288c:	2300      	movs	r3, #0
{
 800288e:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002890:	6802      	ldr	r2, [r0, #0]
{
 8002892:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002894:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002896:	6893      	ldr	r3, [r2, #8]
 8002898:	07d9      	lsls	r1, r3, #31
 800289a:	d427      	bmi.n	80028ec <ADC_Enable+0x60>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <ADC_Enable+0x80>)
 800289e:	4604      	mov	r4, r0
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	481b      	ldr	r0, [pc, #108]	; (8002910 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 80028a4:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028a6:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 80028aa:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028ae:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 80028b0:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028b2:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80028b4:	9b01      	ldr	r3, [sp, #4]
 80028b6:	b12b      	cbz	r3, 80028c4 <ADC_Enable+0x38>
      wait_loop_index--;
 80028b8:	9b01      	ldr	r3, [sp, #4]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80028be:	9b01      	ldr	r3, [sp, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f9      	bne.n	80028b8 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 80028c4:	f7ff fe82 	bl	80025cc <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028c8:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80028ca:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	07da      	lsls	r2, r3, #31
 80028d0:	d40c      	bmi.n	80028ec <ADC_Enable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028d2:	f7ff fe7b 	bl	80025cc <HAL_GetTick>
 80028d6:	1b43      	subs	r3, r0, r5
 80028d8:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 80028da:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028dc:	d903      	bls.n	80028e6 <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	f012 0201 	ands.w	r2, r2, #1
 80028e4:	d005      	beq.n	80028f2 <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	07db      	lsls	r3, r3, #31
 80028ea:	d5f2      	bpl.n	80028d2 <ADC_Enable+0x46>
  return HAL_OK;
 80028ec:	2000      	movs	r0, #0
}
 80028ee:	b003      	add	sp, #12
 80028f0:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 80028f2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 80028f6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028fa:	f043 0310 	orr.w	r3, r3, #16
 80028fe:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002900:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002902:	4303      	orrs	r3, r0
 8002904:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002906:	b003      	add	sp, #12
 8002908:	bd30      	pop	{r4, r5, pc}
 800290a:	bf00      	nop
 800290c:	20000024 	.word	0x20000024
 8002910:	431bde83 	.word	0x431bde83

08002914 <HAL_ADC_Start_DMA>:
{
 8002914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002916:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002918:	4d3e      	ldr	r5, [pc, #248]	; (8002a14 <HAL_ADC_Start_DMA+0x100>)
 800291a:	6800      	ldr	r0, [r0, #0]
{
 800291c:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800291e:	42a8      	cmp	r0, r5
{
 8002920:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002922:	d059      	beq.n	80029d8 <HAL_ADC_Start_DMA+0xc4>
 8002924:	4b3c      	ldr	r3, [pc, #240]	; (8002a18 <HAL_ADC_Start_DMA+0x104>)
 8002926:	4298      	cmp	r0, r3
 8002928:	d056      	beq.n	80029d8 <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 800292a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800292e:	2b01      	cmp	r3, #1
 8002930:	d05f      	beq.n	80029f2 <HAL_ADC_Start_DMA+0xde>
 8002932:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8002934:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8002936:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 800293a:	f7ff ffa7 	bl	800288c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800293e:	4605      	mov	r5, r0
 8002940:	2800      	cmp	r0, #0
 8002942:	d151      	bne.n	80029e8 <HAL_ADC_Start_DMA+0xd4>
      ADC_STATE_CLR_SET(hadc->State,
 8002944:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002946:	6821      	ldr	r1, [r4, #0]
 8002948:	4b33      	ldr	r3, [pc, #204]	; (8002a18 <HAL_ADC_Start_DMA+0x104>)
      ADC_STATE_CLR_SET(hadc->State,
 800294a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 800294e:	f020 0001 	bic.w	r0, r0, #1
 8002952:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002956:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8002958:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800295a:	d04d      	beq.n	80029f8 <HAL_ADC_Start_DMA+0xe4>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800295c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800295e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002962:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002964:	684b      	ldr	r3, [r1, #4]
 8002966:	055a      	lsls	r2, r3, #21
 8002968:	d505      	bpl.n	8002976 <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800296a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800296c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002970:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002974:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002976:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      __HAL_UNLOCK(hadc);
 8002978:	2000      	movs	r0, #0
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800297a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800297e:	bf18      	it	ne
 8002980:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8002982:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002986:	bf18      	it	ne
 8002988:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800298c:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800298e:	4633      	mov	r3, r6
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002990:	f06f 0602 	mvn.w	r6, #2
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002994:	6a20      	ldr	r0, [r4, #32]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002996:	463a      	mov	r2, r7
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002998:	4f20      	ldr	r7, [pc, #128]	; (8002a1c <HAL_ADC_Start_DMA+0x108>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800299a:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800299c:	6287      	str	r7, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800299e:	4f20      	ldr	r7, [pc, #128]	; (8002a20 <HAL_ADC_Start_DMA+0x10c>)
 80029a0:	62c7      	str	r7, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029a2:	4f20      	ldr	r7, [pc, #128]	; (8002a24 <HAL_ADC_Start_DMA+0x110>)
 80029a4:	6307      	str	r7, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80029a6:	f841 6c4c 	str.w	r6, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80029aa:	f851 6c44 	ldr.w	r6, [r1, #-68]
 80029ae:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 80029b2:	f841 6c44 	str.w	r6, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029b6:	f000 fa0f 	bl	8002dd8 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80029ba:	6823      	ldr	r3, [r4, #0]
}
 80029bc:	4628      	mov	r0, r5
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80029c4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	bf0c      	ite	eq
 80029cc:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80029d0:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80029d4:	609a      	str	r2, [r3, #8]
}
 80029d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80029d8:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <HAL_ADC_Start_DMA+0x100>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80029e0:	d0a3      	beq.n	800292a <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 80029e2:	2501      	movs	r5, #1
}
 80029e4:	4628      	mov	r0, r5
 80029e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_UNLOCK(hadc);
 80029e8:	2300      	movs	r3, #0
 80029ea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80029ee:	4628      	mov	r0, r5
 80029f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80029f2:	2502      	movs	r5, #2
}
 80029f4:	4628      	mov	r0, r5
 80029f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80029f8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8002a02:	d0ab      	beq.n	800295c <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002a06:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a0a:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	055b      	lsls	r3, r3, #21
 8002a10:	d5b1      	bpl.n	8002976 <HAL_ADC_Start_DMA+0x62>
 8002a12:	e7aa      	b.n	800296a <HAL_ADC_Start_DMA+0x56>
 8002a14:	40012400 	.word	0x40012400
 8002a18:	40012800 	.word	0x40012800
 8002a1c:	080025dd 	.word	0x080025dd
 8002a20:	08002631 	.word	0x08002631
 8002a24:	0800273d 	.word	0x0800273d

08002a28 <ADC_ConversionStop_Disable>:
{
 8002a28:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a2a:	6803      	ldr	r3, [r0, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	07d4      	lsls	r4, r2, #31
 8002a30:	d401      	bmi.n	8002a36 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8002a32:	2000      	movs	r0, #0
}
 8002a34:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8002a36:	4604      	mov	r4, r0
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002a40:	f7ff fdc4 	bl	80025cc <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a44:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002a46:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	07d9      	lsls	r1, r3, #31
 8002a4c:	d5f1      	bpl.n	8002a32 <ADC_ConversionStop_Disable+0xa>
 8002a4e:	e002      	b.n	8002a56 <ADC_ConversionStop_Disable+0x2e>
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	07db      	lsls	r3, r3, #31
 8002a54:	d5ed      	bpl.n	8002a32 <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a56:	f7ff fdb9 	bl	80025cc <HAL_GetTick>
 8002a5a:	1b43      	subs	r3, r0, r5
 8002a5c:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a5e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a60:	d9f6      	bls.n	8002a50 <ADC_ConversionStop_Disable+0x28>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	07d2      	lsls	r2, r2, #31
 8002a66:	d5f3      	bpl.n	8002a50 <ADC_ConversionStop_Disable+0x28>
          return HAL_ERROR;
 8002a68:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a6c:	f043 0310 	orr.w	r3, r3, #16
 8002a70:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a74:	4303      	orrs	r3, r0
 8002a76:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002a78:	bd38      	pop	{r3, r4, r5, pc}
 8002a7a:	bf00      	nop

08002a7c <HAL_ADC_Init>:
  if(hadc == NULL)
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	d06b      	beq.n	8002b58 <HAL_ADC_Init+0xdc>
{
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a82:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a84:	4604      	mov	r4, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d04d      	beq.n	8002b26 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f7ff ffcc 	bl	8002a28 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a92:	f013 0310 	ands.w	r3, r3, #16
 8002a96:	d140      	bne.n	8002b1a <HAL_ADC_Init+0x9e>
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	d13e      	bne.n	8002b1a <HAL_ADC_Init+0x9e>
    ADC_STATE_CLR_SET(hadc->State,
 8002a9c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a9e:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8002aa0:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002aa4:	f022 0202 	bic.w	r2, r2, #2
 8002aa8:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002aac:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8002aae:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ab0:	69e2      	ldr	r2, [r4, #28]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ab2:	7b26      	ldrb	r6, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ab4:	4311      	orrs	r1, r2
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ab6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002aba:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002abe:	d038      	beq.n	8002b32 <HAL_ADC_Init+0xb6>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ac0:	7d22      	ldrb	r2, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ac2:	2d01      	cmp	r5, #1
 8002ac4:	bf0c      	ite	eq
 8002ac6:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 8002aca:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ace:	2a01      	cmp	r2, #1
 8002ad0:	d04e      	beq.n	8002b70 <HAL_ADC_Init+0xf4>
      MODIFY_REG(hadc->Instance->CR1,
 8002ad2:	6822      	ldr	r2, [r4, #0]
      MODIFY_REG(hadc->Instance->CR2,
 8002ad4:	4e37      	ldr	r6, [pc, #220]	; (8002bb4 <HAL_ADC_Init+0x138>)
      MODIFY_REG(hadc->Instance->CR1,
 8002ad6:	6857      	ldr	r7, [r2, #4]
 8002ad8:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8002adc:	ea47 070c 	orr.w	r7, r7, ip
 8002ae0:	6057      	str	r7, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002ae2:	6897      	ldr	r7, [r2, #8]
 8002ae4:	403e      	ands	r6, r7
 8002ae6:	430e      	orrs	r6, r1
 8002ae8:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002aea:	2d01      	cmp	r5, #1
 8002aec:	d030      	beq.n	8002b50 <HAL_ADC_Init+0xd4>
    MODIFY_REG(hadc->Instance->SQR1,
 8002aee:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8002af0:	f425 0c70 	bic.w	ip, r5, #15728640	; 0xf00000
 8002af4:	ea4c 0303 	orr.w	r3, ip, r3
 8002af8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002afa:	6892      	ldr	r2, [r2, #8]
 8002afc:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <HAL_ADC_Init+0x13c>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	4299      	cmp	r1, r3
 8002b02:	d02b      	beq.n	8002b5c <HAL_ADC_Init+0xe0>
      tmp_hal_status = HAL_ERROR;
 8002b04:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002b06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b08:	f023 0312 	bic.w	r3, r3, #18
 8002b0c:	f043 0310 	orr.w	r3, r3, #16
 8002b10:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b14:	4303      	orrs	r3, r0
 8002b16:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002b1c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1e:	f043 0310 	orr.w	r3, r3, #16
 8002b22:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8002b26:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002b28:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002b2c:	f7ff fb34 	bl	8002198 <HAL_ADC_MspInit>
 8002b30:	e7ab      	b.n	8002a8a <HAL_ADC_Init+0xe>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b32:	7d22      	ldrb	r2, [r4, #20]
 8002b34:	2a01      	cmp	r2, #1
 8002b36:	d01a      	beq.n	8002b6e <HAL_ADC_Init+0xf2>
      MODIFY_REG(hadc->Instance->CR1,
 8002b38:	6822      	ldr	r2, [r4, #0]
 8002b3a:	6853      	ldr	r3, [r2, #4]
 8002b3c:	f423 4369 	bic.w	r3, r3, #59648	; 0xe900
 8002b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b44:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002b46:	6895      	ldr	r5, [r2, #8]
 8002b48:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <HAL_ADC_Init+0x138>)
 8002b4a:	402b      	ands	r3, r5
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b50:	6923      	ldr	r3, [r4, #16]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	051b      	lsls	r3, r3, #20
 8002b56:	e7ca      	b.n	8002aee <HAL_ADC_Init+0x72>
    return HAL_ERROR;
 8002b58:	2001      	movs	r0, #1
}
 8002b5a:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002b60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b62:	f023 0303 	bic.w	r3, r3, #3
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b6e:	46ac      	mov	ip, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b70:	b1ce      	cbz	r6, 8002ba6 <HAL_ADC_Init+0x12a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002b74:	f042 0220 	orr.w	r2, r2, #32
 8002b78:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b7c:	f042 0201 	orr.w	r2, r2, #1
 8002b80:	62e2      	str	r2, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8002b82:	6822      	ldr	r2, [r4, #0]
      MODIFY_REG(hadc->Instance->CR2,
 8002b84:	4e0b      	ldr	r6, [pc, #44]	; (8002bb4 <HAL_ADC_Init+0x138>)
      MODIFY_REG(hadc->Instance->CR1,
 8002b86:	6857      	ldr	r7, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b88:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002b8c:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8002b90:	ea47 070c 	orr.w	r7, r7, ip
 8002b94:	6057      	str	r7, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002b96:	6897      	ldr	r7, [r2, #8]
 8002b98:	ea06 0607 	and.w	r6, r6, r7
 8002b9c:	ea46 0601 	orr.w	r6, r6, r1
 8002ba0:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ba2:	d1a2      	bne.n	8002aea <HAL_ADC_Init+0x6e>
 8002ba4:	e7d4      	b.n	8002b50 <HAL_ADC_Init+0xd4>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ba6:	69a2      	ldr	r2, [r4, #24]
 8002ba8:	1e57      	subs	r7, r2, #1
 8002baa:	ea4c 3747 	orr.w	r7, ip, r7, lsl #13
 8002bae:	f447 6c00 	orr.w	ip, r7, #2048	; 0x800
 8002bb2:	e7e6      	b.n	8002b82 <HAL_ADC_Init+0x106>
 8002bb4:	ffe1f7fd 	.word	0xffe1f7fd
 8002bb8:	ff1f0efe 	.word	0xff1f0efe

08002bbc <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002bbc:	2300      	movs	r3, #0
{
 8002bbe:	b570      	push	{r4, r5, r6, lr}
 8002bc0:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8002bc2:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d05f      	beq.n	8002c8c <HAL_ADCEx_Calibration_Start+0xd0>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	f7ff ff28 	bl	8002a28 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002bd8:	4605      	mov	r5, r0
 8002bda:	b128      	cbz	r0, 8002be8 <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bdc:	2300      	movs	r3, #0
  
  /* Return function status */
  return tmp_hal_status;
}
 8002bde:	4628      	mov	r0, r5
  __HAL_UNLOCK(hadc);
 8002be0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002be4:	b002      	add	sp, #8
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002be8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002bea:	4a31      	ldr	r2, [pc, #196]	; (8002cb0 <HAL_ADCEx_Calibration_Start+0xf4>)
    ADC_STATE_CLR_SET(hadc->State,
 8002bec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bf0:	f023 0302 	bic.w	r3, r3, #2
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002bfa:	2002      	movs	r0, #2
 8002bfc:	6816      	ldr	r6, [r2, #0]
 8002bfe:	f000 feeb 	bl	80039d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c02:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002c06:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8002c08:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 8002c0a:	9b01      	ldr	r3, [sp, #4]
 8002c0c:	b12b      	cbz	r3, 8002c1a <HAL_ADCEx_Calibration_Start+0x5e>
      wait_loop_index--;
 8002c0e:	9b01      	ldr	r3, [sp, #4]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002c14:	9b01      	ldr	r3, [sp, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f9      	bne.n	8002c0e <HAL_ADCEx_Calibration_Start+0x52>
    ADC_Enable(hadc);
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f7ff fe36 	bl	800288c <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002c20:	6822      	ldr	r2, [r4, #0]
 8002c22:	6893      	ldr	r3, [r2, #8]
 8002c24:	f043 0308 	orr.w	r3, r3, #8
 8002c28:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8002c2a:	f7ff fccf 	bl	80025cc <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002c2e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8002c30:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	0711      	lsls	r1, r2, #28
 8002c36:	d50b      	bpl.n	8002c50 <HAL_ADCEx_Calibration_Start+0x94>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002c38:	f7ff fcc8 	bl	80025cc <HAL_GetTick>
 8002c3c:	1b83      	subs	r3, r0, r6
 8002c3e:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002c40:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002c42:	d902      	bls.n	8002c4a <HAL_ADCEx_Calibration_Start+0x8e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	0712      	lsls	r2, r2, #28
 8002c48:	d424      	bmi.n	8002c94 <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	0710      	lsls	r0, r2, #28
 8002c4e:	d4f3      	bmi.n	8002c38 <HAL_ADCEx_Calibration_Start+0x7c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	f042 0204 	orr.w	r2, r2, #4
 8002c56:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8002c58:	f7ff fcb8 	bl	80025cc <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002c5c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8002c5e:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	0759      	lsls	r1, r3, #29
 8002c64:	d50b      	bpl.n	8002c7e <HAL_ADCEx_Calibration_Start+0xc2>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002c66:	f7ff fcb1 	bl	80025cc <HAL_GetTick>
 8002c6a:	1b83      	subs	r3, r0, r6
 8002c6c:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002c6e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002c70:	d902      	bls.n	8002c78 <HAL_ADCEx_Calibration_Start+0xbc>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	0752      	lsls	r2, r2, #29
 8002c76:	d40d      	bmi.n	8002c94 <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	075b      	lsls	r3, r3, #29
 8002c7c:	d4f3      	bmi.n	8002c66 <HAL_ADCEx_Calibration_Start+0xaa>
    ADC_STATE_CLR_SET(hadc->State,
 8002c7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c80:	f023 0303 	bic.w	r3, r3, #3
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c8a:	e7a7      	b.n	8002bdc <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 8002c8c:	2502      	movs	r5, #2
}
 8002c8e:	4628      	mov	r0, r5
 8002c90:	b002      	add	sp, #8
 8002c92:	bd70      	pop	{r4, r5, r6, pc}
          return HAL_ERROR;
 8002c94:	2501      	movs	r5, #1
          __HAL_UNLOCK(hadc);
 8002c96:	2200      	movs	r2, #0
}
 8002c98:	4628      	mov	r0, r5
          ADC_STATE_CLR_SET(hadc->State,
 8002c9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8002c9c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          ADC_STATE_CLR_SET(hadc->State,
 8002ca0:	f023 0312 	bic.w	r3, r3, #18
 8002ca4:	f043 0310 	orr.w	r3, r3, #16
 8002ca8:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002caa:	b002      	add	sp, #8
 8002cac:	bd70      	pop	{r4, r5, r6, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000024 	.word	0x20000024

08002cb4 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop

08002cb8 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb8:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cbc:	4906      	ldr	r1, [pc, #24]	; (8002cd8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cbe:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cc2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc6:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002cd4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002cd6:	4770      	bx	lr
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cdc:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cde:	b500      	push	{lr}
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce6:	f1c3 0e07 	rsb	lr, r3, #7
 8002cea:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cee:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf2:	bf28      	it	cs
 8002cf4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cf8:	f1bc 0f06 	cmp.w	ip, #6
 8002cfc:	d91b      	bls.n	8002d36 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cfe:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d02:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d04:	fa0c fc03 	lsl.w	ip, ip, r3
 8002d08:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	f04f 3cff 	mov.w	ip, #4294967295
 8002d10:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002d14:	ea21 010c 	bic.w	r1, r1, ip
 8002d18:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002d1a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d1c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002d20:	db0c      	blt.n	8002d3c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d22:	0109      	lsls	r1, r1, #4
 8002d24:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002d28:	b2c9      	uxtb	r1, r1
 8002d2a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002d2e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002d32:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d36:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d38:	4613      	mov	r3, r2
 8002d3a:	e7e7      	b.n	8002d0c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <HAL_NVIC_SetPriority+0x78>)
 8002d3e:	f000 000f 	and.w	r0, r0, #15
 8002d42:	0109      	lsls	r1, r1, #4
 8002d44:	b2c9      	uxtb	r1, r1
 8002d46:	4403      	add	r3, r0
 8002d48:	7619      	strb	r1, [r3, #24]
 8002d4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d4e:	bf00      	nop
 8002d50:	e000ed00 	.word	0xe000ed00
 8002d54:	e000ecfc 	.word	0xe000ecfc

08002d58 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	db07      	blt.n	8002d6c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f000 011f 	and.w	r1, r0, #31
 8002d62:	4a03      	ldr	r2, [pc, #12]	; (8002d70 <HAL_NVIC_EnableIRQ+0x18>)
 8002d64:	0940      	lsrs	r0, r0, #5
 8002d66:	408b      	lsls	r3, r1
 8002d68:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000e100 	.word	0xe000e100

08002d74 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d74:	b340      	cbz	r0, 8002dc8 <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d76:	4603      	mov	r3, r0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d78:	c805      	ldmia	r0, {r0, r2}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d7a:	f44f 7c80 	mov.w	ip, #256	; 0x100
{
 8002d7e:	b430      	push	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d80:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 8002d82:	6899      	ldr	r1, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d84:	68dd      	ldr	r5, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d86:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d88:	4910      	ldr	r1, [pc, #64]	; (8002dcc <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d8a:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d8c:	4d10      	ldr	r5, [pc, #64]	; (8002dd0 <HAL_DMA_Init+0x5c>)
 8002d8e:	4401      	add	r1, r0
 8002d90:	fba5 5101 	umull	r5, r1, r5, r1
 8002d94:	0909      	lsrs	r1, r1, #4
 8002d96:	0089      	lsls	r1, r1, #2
 8002d98:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9a:	6919      	ldr	r1, [r3, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9c:	699d      	ldr	r5, [r3, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da0:	6959      	ldr	r1, [r3, #20]
 8002da2:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CCR;
 8002da4:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da6:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002da8:	69dd      	ldr	r5, [r3, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002daa:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8002dae:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8002db2:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Direction        |
 8002db4:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 8002db6:	4907      	ldr	r1, [pc, #28]	; (8002dd4 <HAL_DMA_Init+0x60>)
 8002db8:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8002dba:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 8002dbc:	f8a3 c020 	strh.w	ip, [r3, #32]

  return HAL_OK;
 8002dc0:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dc2:	639c      	str	r4, [r3, #56]	; 0x38
}
 8002dc4:	bc30      	pop	{r4, r5}
 8002dc6:	4770      	bx	lr
    return HAL_ERROR;
 8002dc8:	2001      	movs	r0, #1
}
 8002dca:	4770      	bx	lr
 8002dcc:	bffdfff8 	.word	0xbffdfff8
 8002dd0:	cccccccd 	.word	0xcccccccd
 8002dd4:	40020000 	.word	0x40020000

08002dd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dd8:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dda:	f890 0020 	ldrb.w	r0, [r0, #32]
 8002dde:	2801      	cmp	r0, #1
 8002de0:	d03f      	beq.n	8002e62 <HAL_DMA_Start_IT+0x8a>
{
 8002de2:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma);
 8002de4:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002de6:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 8002dea:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dee:	42a0      	cmp	r0, r4
 8002df0:	d005      	beq.n	8002dfe <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002df2:	2300      	movs	r3, #0
 8002df4:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002df8:	2002      	movs	r0, #2
  }    
  return status;
}
 8002dfa:	bc30      	pop	{r4, r5}
 8002dfc:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dfe:	2402      	movs	r4, #2
 8002e00:	f88c 4021 	strb.w	r4, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e04:	2400      	movs	r4, #0
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e06:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e0a:	f8cc 4038 	str.w	r4, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002e0e:	f8dc 4000 	ldr.w	r4, [ip]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e12:	40a8      	lsls	r0, r5
    __HAL_DMA_DISABLE(hdma);
 8002e14:	6825      	ldr	r5, [r4, #0]
 8002e16:	f025 0501 	bic.w	r5, r5, #1
 8002e1a:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e1c:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8002e20:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e22:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e24:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002e28:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8002e2a:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e2e:	bf0b      	itete	eq
 8002e30:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002e32:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002e34:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002e36:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002e38:	b153      	cbz	r3, 8002e50 <HAL_DMA_Start_IT+0x78>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	f043 030e 	orr.w	r3, r3, #14
 8002e40:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002e42:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e44:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6023      	str	r3, [r4, #0]
}
 8002e4c:	bc30      	pop	{r4, r5}
 8002e4e:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e50:	6823      	ldr	r3, [r4, #0]
 8002e52:	f023 0304 	bic.w	r3, r3, #4
 8002e56:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	f043 030a 	orr.w	r3, r3, #10
 8002e5e:	6023      	str	r3, [r4, #0]
 8002e60:	e7ef      	b.n	8002e42 <HAL_DMA_Start_IT+0x6a>
  __HAL_LOCK(hdma);
 8002e62:	2002      	movs	r0, #2
}
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop

08002e68 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e68:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8002e6c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e6e:	2a02      	cmp	r2, #2
 8002e70:	d006      	beq.n	8002e80 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e72:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8002e74:	2200      	movs	r2, #0
    return HAL_ERROR;
 8002e76:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e78:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002e7a:	f883 2020 	strb.w	r2, [r3, #32]
}
 8002e7e:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e80:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);      
 8002e82:	f44f 7c80 	mov.w	ip, #256	; 0x100
{
 8002e86:	b410      	push	{r4}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e88:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e8a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  return status; 
 8002e8c:	2000      	movs	r0, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e8e:	40a1      	lsls	r1, r4
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e90:	6814      	ldr	r4, [r2, #0]
 8002e92:	f024 040e 	bic.w	r4, r4, #14
 8002e96:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002e98:	6814      	ldr	r4, [r2, #0]
 8002e9a:	f024 0401 	bic.w	r4, r4, #1
 8002e9e:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ea0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ea2:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8002ea4:	f8a3 c020 	strh.w	ip, [r3, #32]
}
 8002ea8:	bc10      	pop	{r4}
 8002eaa:	4770      	bx	lr

08002eac <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002eac:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8002eb0:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002eb2:	2a02      	cmp	r2, #2
 8002eb4:	d003      	beq.n	8002ebe <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb6:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8002eb8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eba:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002ebc:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ebe:	6802      	ldr	r2, [r0, #0]
{  
 8002ec0:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ec2:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ec4:	481b      	ldr	r0, [pc, #108]	; (8002f34 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ec6:	f021 010e 	bic.w	r1, r1, #14
 8002eca:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002ecc:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ece:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8002ed0:	f021 0101 	bic.w	r1, r1, #1
 8002ed4:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ed6:	d021      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x70>
 8002ed8:	4917      	ldr	r1, [pc, #92]	; (8002f38 <HAL_DMA_Abort_IT+0x8c>)
 8002eda:	428a      	cmp	r2, r1
 8002edc:	d01a      	beq.n	8002f14 <HAL_DMA_Abort_IT+0x68>
 8002ede:	3114      	adds	r1, #20
 8002ee0:	428a      	cmp	r2, r1
 8002ee2:	d01d      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x74>
 8002ee4:	3114      	adds	r1, #20
 8002ee6:	428a      	cmp	r2, r1
 8002ee8:	d01d      	beq.n	8002f26 <HAL_DMA_Abort_IT+0x7a>
 8002eea:	3114      	adds	r1, #20
 8002eec:	428a      	cmp	r2, r1
 8002eee:	d01d      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x80>
 8002ef0:	3114      	adds	r1, #20
 8002ef2:	428a      	cmp	r2, r1
 8002ef4:	bf0c      	ite	eq
 8002ef6:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8002efa:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 8002efe:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f02:	4c0e      	ldr	r4, [pc, #56]	; (8002f3c <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 8002f04:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f06:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8002f08:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 8002f0a:	b129      	cbz	r1, 8002f18 <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8002f10:	2000      	movs	r0, #0
}
 8002f12:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f14:	2210      	movs	r2, #16
 8002f16:	e7f2      	b.n	8002efe <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8002f18:	4608      	mov	r0, r1
}
 8002f1a:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	e7ee      	b.n	8002efe <HAL_DMA_Abort_IT+0x52>
 8002f20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f24:	e7eb      	b.n	8002efe <HAL_DMA_Abort_IT+0x52>
 8002f26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f2a:	e7e8      	b.n	8002efe <HAL_DMA_Abort_IT+0x52>
 8002f2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f30:	e7e5      	b.n	8002efe <HAL_DMA_Abort_IT+0x52>
 8002f32:	bf00      	nop
 8002f34:	40020008 	.word	0x40020008
 8002f38:	4002001c 	.word	0x4002001c
 8002f3c:	40020000 	.word	0x40020000

08002f40 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002f40:	2204      	movs	r2, #4
{
 8002f42:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f44:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002f46:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f48:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002f4a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002f4c:	408a      	lsls	r2, r1
 8002f4e:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002f50:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002f52:	d01f      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x54>
 8002f54:	076a      	lsls	r2, r5, #29
 8002f56:	d51d      	bpl.n	8002f94 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	0691      	lsls	r1, r2, #26
 8002f5c:	d403      	bmi.n	8002f66 <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	f022 0204 	bic.w	r2, r2, #4
 8002f64:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f66:	4a3e      	ldr	r2, [pc, #248]	; (8003060 <HAL_DMA_IRQHandler+0x120>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d050      	beq.n	800300e <HAL_DMA_IRQHandler+0xce>
 8002f6c:	3214      	adds	r2, #20
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d060      	beq.n	8003034 <HAL_DMA_IRQHandler+0xf4>
 8002f72:	3214      	adds	r2, #20
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d067      	beq.n	8003048 <HAL_DMA_IRQHandler+0x108>
 8002f78:	3214      	adds	r2, #20
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d06a      	beq.n	8003054 <HAL_DMA_IRQHandler+0x114>
 8002f7e:	3214      	adds	r2, #20
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d05c      	beq.n	800303e <HAL_DMA_IRQHandler+0xfe>
 8002f84:	3214      	adds	r2, #20
 8002f86:	4293      	cmp	r3, r2
 8002f88:	bf0c      	ite	eq
 8002f8a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8002f8e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002f92:	e03d      	b.n	8003010 <HAL_DMA_IRQHandler+0xd0>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002f94:	2202      	movs	r2, #2
 8002f96:	408a      	lsls	r2, r1
 8002f98:	4222      	tst	r2, r4
 8002f9a:	d022      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0xa2>
 8002f9c:	07aa      	lsls	r2, r5, #30
 8002f9e:	d520      	bpl.n	8002fe2 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	0691      	lsls	r1, r2, #26
 8002fa4:	d406      	bmi.n	8002fb4 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 8002fa6:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	f022 020a 	bic.w	r2, r2, #10
 8002fae:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002fb0:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002fb4:	4a2a      	ldr	r2, [pc, #168]	; (8003060 <HAL_DMA_IRQHandler+0x120>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d031      	beq.n	800301e <HAL_DMA_IRQHandler+0xde>
 8002fba:	3214      	adds	r2, #20
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d041      	beq.n	8003044 <HAL_DMA_IRQHandler+0x104>
 8002fc0:	3214      	adds	r2, #20
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d043      	beq.n	800304e <HAL_DMA_IRQHandler+0x10e>
 8002fc6:	3214      	adds	r2, #20
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d035      	beq.n	8003038 <HAL_DMA_IRQHandler+0xf8>
 8002fcc:	3214      	adds	r2, #20
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d043      	beq.n	800305a <HAL_DMA_IRQHandler+0x11a>
 8002fd2:	3214      	adds	r2, #20
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	bf0c      	ite	eq
 8002fd8:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002fdc:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002fe0:	e01e      	b.n	8003020 <HAL_DMA_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	408a      	lsls	r2, r1
 8002fe6:	4222      	tst	r2, r4
 8002fe8:	d017      	beq.n	800301a <HAL_DMA_IRQHandler+0xda>
 8002fea:	072a      	lsls	r2, r5, #28
 8002fec:	d515      	bpl.n	800301a <HAL_DMA_IRQHandler+0xda>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fee:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 8002ff0:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ff4:	f022 020e 	bic.w	r2, r2, #14
 8002ff8:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ffa:	2301      	movs	r3, #1
    if (hdma->XferErrorCallback != NULL)
 8002ffc:	6b02      	ldr	r2, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ffe:	fa03 f101 	lsl.w	r1, r3, r1
 8003002:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003004:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8003006:	8404      	strh	r4, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8003008:	b13a      	cbz	r2, 800301a <HAL_DMA_IRQHandler+0xda>
}
 800300a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800300c:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800300e:	2304      	movs	r3, #4
 8003010:	4914      	ldr	r1, [pc, #80]	; (8003064 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 8003012:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003014:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8003016:	2a00      	cmp	r2, #0
 8003018:	d1f7      	bne.n	800300a <HAL_DMA_IRQHandler+0xca>
}
 800301a:	bc70      	pop	{r4, r5, r6}
 800301c:	4770      	bx	lr
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800301e:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8003020:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003022:	4c10      	ldr	r4, [pc, #64]	; (8003064 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 8003024:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003026:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8003028:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800302c:	2a00      	cmp	r2, #0
 800302e:	d0f4      	beq.n	800301a <HAL_DMA_IRQHandler+0xda>
}
 8003030:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003032:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003034:	2340      	movs	r3, #64	; 0x40
 8003036:	e7eb      	b.n	8003010 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800303c:	e7f0      	b.n	8003020 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800303e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003042:	e7e5      	b.n	8003010 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003044:	2320      	movs	r3, #32
 8003046:	e7eb      	b.n	8003020 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800304c:	e7e0      	b.n	8003010 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800304e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003052:	e7e5      	b.n	8003020 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003054:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003058:	e7da      	b.n	8003010 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800305a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800305e:	e7df      	b.n	8003020 <HAL_DMA_IRQHandler+0xe0>
 8003060:	40020008 	.word	0x40020008
 8003064:	40020000 	.word	0x40020000

08003068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800306c:	680e      	ldr	r6, [r1, #0]
{
 800306e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003070:	2e00      	cmp	r6, #0
 8003072:	f000 80b5 	beq.w	80031e0 <HAL_GPIO_Init+0x178>
 8003076:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003078:	4f7a      	ldr	r7, [pc, #488]	; (8003264 <HAL_GPIO_Init+0x1fc>)
  uint32_t config = 0x00u;
 800307a:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 800307c:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800307e:	4d7a      	ldr	r5, [pc, #488]	; (8003268 <HAL_GPIO_Init+0x200>)
      switch (GPIO_Init->Mode)
 8003080:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 800326c <HAL_GPIO_Init+0x204>
 8003084:	e006      	b.n	8003094 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8003086:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003088:	fa36 f403 	lsrs.w	r4, r6, r3
 800308c:	f102 0204 	add.w	r2, r2, #4
 8003090:	f000 80a6 	beq.w	80031e0 <HAL_GPIO_Init+0x178>
    ioposition = (0x01uL << position);
 8003094:	2401      	movs	r4, #1
 8003096:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8003098:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800309c:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 80030a0:	d1f1      	bne.n	8003086 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 80030a2:	684e      	ldr	r6, [r1, #4]
 80030a4:	2e12      	cmp	r6, #18
 80030a6:	f200 809e 	bhi.w	80031e6 <HAL_GPIO_Init+0x17e>
 80030aa:	2e12      	cmp	r6, #18
 80030ac:	d81a      	bhi.n	80030e4 <HAL_GPIO_Init+0x7c>
 80030ae:	e8df f006 	tbb	[pc, r6]
 80030b2:	b9a7      	.short	0xb9a7
 80030b4:	1919ceb5 	.word	0x1919ceb5
 80030b8:	19191919 	.word	0x19191919
 80030bc:	19191919 	.word	0x19191919
 80030c0:	b1191919 	.word	0xb1191919
 80030c4:	bc          	.byte	0xbc
 80030c5:	00          	.byte	0x00
 80030c6:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8003270 <HAL_GPIO_Init+0x208>
 80030ca:	4576      	cmp	r6, lr
 80030cc:	f000 8098 	beq.w	8003200 <HAL_GPIO_Init+0x198>
 80030d0:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 80030d4:	4576      	cmp	r6, lr
 80030d6:	f000 8093 	beq.w	8003200 <HAL_GPIO_Init+0x198>
 80030da:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 80030de:	4576      	cmp	r6, lr
 80030e0:	f000 808e 	beq.w	8003200 <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030e4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80030e8:	bf9c      	itt	ls
 80030ea:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030ec:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030ee:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030f2:	bf84      	itt	hi
 80030f4:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030f8:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030fc:	f8de 4000 	ldr.w	r4, [lr]
 8003100:	fa0a f90b 	lsl.w	r9, sl, fp
 8003104:	fa06 fb0b 	lsl.w	fp, r6, fp
 8003108:	ea24 040b 	bic.w	r4, r4, fp
 800310c:	ea44 0409 	orr.w	r4, r4, r9
 8003110:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003114:	684c      	ldr	r4, [r1, #4]
 8003116:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800311a:	d079      	beq.n	8003210 <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800311c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003120:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003124:	f04e 0e01 	orr.w	lr, lr, #1
 8003128:	f8c7 e018 	str.w	lr, [r7, #24]
 800312c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003130:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003134:	f00e 0e01 	and.w	lr, lr, #1
 8003138:	f8cd e004 	str.w	lr, [sp, #4]
 800313c:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8003140:	f023 0e03 	bic.w	lr, r3, #3
 8003144:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8003148:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 800314c:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003150:	fa06 f609 	lsl.w	r6, r6, r9
 8003154:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003158:	f8df b118 	ldr.w	fp, [pc, #280]	; 8003274 <HAL_GPIO_Init+0x20c>
 800315c:	4558      	cmp	r0, fp
 800315e:	d013      	beq.n	8003188 <HAL_GPIO_Init+0x120>
 8003160:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8003164:	4558      	cmp	r0, fp
 8003166:	d06b      	beq.n	8003240 <HAL_GPIO_Init+0x1d8>
 8003168:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8003278 <HAL_GPIO_Init+0x210>
 800316c:	4558      	cmp	r0, fp
 800316e:	d060      	beq.n	8003232 <HAL_GPIO_Init+0x1ca>
 8003170:	f8df b108 	ldr.w	fp, [pc, #264]	; 800327c <HAL_GPIO_Init+0x214>
 8003174:	4558      	cmp	r0, fp
 8003176:	bf0c      	ite	eq
 8003178:	f04f 0b03 	moveq.w	fp, #3
 800317c:	f04f 0b04 	movne.w	fp, #4
 8003180:	fa0b f909 	lsl.w	r9, fp, r9
 8003184:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8003188:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800318c:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800318e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003192:	bf14      	ite	ne
 8003194:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003198:	ea26 060c 	biceq.w	r6, r6, ip
 800319c:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800319e:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031a0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80031a4:	bf14      	ite	ne
 80031a6:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031aa:	ea26 060c 	biceq.w	r6, r6, ip
 80031ae:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80031b0:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031b2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80031b6:	bf14      	ite	ne
 80031b8:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031bc:	ea26 060c 	biceq.w	r6, r6, ip
 80031c0:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031c2:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80031c6:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031c8:	d01f      	beq.n	800320a <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->FTSR, iocurrent);
 80031ca:	ea44 040c 	orr.w	r4, r4, ip
 80031ce:	60ec      	str	r4, [r5, #12]
 80031d0:	680e      	ldr	r6, [r1, #0]
	position++;
 80031d2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d4:	fa36 f403 	lsrs.w	r4, r6, r3
 80031d8:	f102 0204 	add.w	r2, r2, #4
 80031dc:	f47f af5a 	bne.w	8003094 <HAL_GPIO_Init+0x2c>
  }
}
 80031e0:	b003      	add	sp, #12
 80031e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80031e6:	4546      	cmp	r6, r8
 80031e8:	d00a      	beq.n	8003200 <HAL_GPIO_Init+0x198>
 80031ea:	f67f af6c 	bls.w	80030c6 <HAL_GPIO_Init+0x5e>
 80031ee:	f8df e090 	ldr.w	lr, [pc, #144]	; 8003280 <HAL_GPIO_Init+0x218>
 80031f2:	4576      	cmp	r6, lr
 80031f4:	d004      	beq.n	8003200 <HAL_GPIO_Init+0x198>
 80031f6:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80031fa:	4576      	cmp	r6, lr
 80031fc:	f47f af72 	bne.w	80030e4 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003200:	688e      	ldr	r6, [r1, #8]
 8003202:	bb3e      	cbnz	r6, 8003254 <HAL_GPIO_Init+0x1ec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003204:	f04f 0a04 	mov.w	sl, #4
 8003208:	e76c      	b.n	80030e4 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800320a:	ea24 040c 	bic.w	r4, r4, ip
 800320e:	60ec      	str	r4, [r5, #12]
 8003210:	680e      	ldr	r6, [r1, #0]
 8003212:	e738      	b.n	8003086 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003214:	68cc      	ldr	r4, [r1, #12]
 8003216:	f104 0a04 	add.w	sl, r4, #4
          break;
 800321a:	e763      	b.n	80030e4 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800321c:	68cc      	ldr	r4, [r1, #12]
 800321e:	f104 0a08 	add.w	sl, r4, #8
          break;
 8003222:	e75f      	b.n	80030e4 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003224:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8003228:	e75c      	b.n	80030e4 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800322a:	68cc      	ldr	r4, [r1, #12]
 800322c:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8003230:	e758      	b.n	80030e4 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003232:	f04f 0b02 	mov.w	fp, #2
 8003236:	fa0b f909 	lsl.w	r9, fp, r9
 800323a:	ea46 0609 	orr.w	r6, r6, r9
 800323e:	e7a3      	b.n	8003188 <HAL_GPIO_Init+0x120>
 8003240:	f04f 0b01 	mov.w	fp, #1
 8003244:	fa0b f909 	lsl.w	r9, fp, r9
 8003248:	ea46 0609 	orr.w	r6, r6, r9
 800324c:	e79c      	b.n	8003188 <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 800324e:	f04f 0a00 	mov.w	sl, #0
 8003252:	e747      	b.n	80030e4 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003254:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003256:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 800325a:	bf0c      	ite	eq
 800325c:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 800325e:	6144      	strne	r4, [r0, #20]
 8003260:	e740      	b.n	80030e4 <HAL_GPIO_Init+0x7c>
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	40010400 	.word	0x40010400
 800326c:	10220000 	.word	0x10220000
 8003270:	10120000 	.word	0x10120000
 8003274:	40010800 	.word	0x40010800
 8003278:	40011000 	.word	0x40011000
 800327c:	40011400 	.word	0x40011400
 8003280:	10310000 	.word	0x10310000

08003284 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003284:	6883      	ldr	r3, [r0, #8]
 8003286:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003288:	bf14      	ite	ne
 800328a:	2001      	movne	r0, #1
 800328c:	2000      	moveq	r0, #0
 800328e:	4770      	bx	lr

08003290 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003290:	b902      	cbnz	r2, 8003294 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003292:	0409      	lsls	r1, r1, #16
 8003294:	6101      	str	r1, [r0, #16]
  }
}
 8003296:	4770      	bx	lr

08003298 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003298:	4a04      	ldr	r2, [pc, #16]	; (80032ac <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800329a:	6951      	ldr	r1, [r2, #20]
 800329c:	4201      	tst	r1, r0
 800329e:	d100      	bne.n	80032a2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80032a0:	4770      	bx	lr
{
 80032a2:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032a4:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032a6:	f7fe f9d7 	bl	8001658 <HAL_GPIO_EXTI_Callback>
  }
}
 80032aa:	bd08      	pop	{r3, pc}
 80032ac:	40010400 	.word	0x40010400

080032b0 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80032b0:	2201      	movs	r2, #1
 80032b2:	4b01      	ldr	r3, [pc, #4]	; (80032b8 <HAL_PWR_EnableBkUpAccess+0x8>)
 80032b4:	621a      	str	r2, [r3, #32]
}
 80032b6:	4770      	bx	lr
 80032b8:	420e0000 	.word	0x420e0000

080032bc <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032bc:	2800      	cmp	r0, #0
 80032be:	f000 81b6 	beq.w	800362e <HAL_RCC_OscConfig+0x372>
{
 80032c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c6:	6803      	ldr	r3, [r0, #0]
 80032c8:	4604      	mov	r4, r0
 80032ca:	07dd      	lsls	r5, r3, #31
{
 80032cc:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ce:	d535      	bpl.n	800333c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d0:	499a      	ldr	r1, [pc, #616]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80032d2:	684a      	ldr	r2, [r1, #4]
 80032d4:	f002 020c 	and.w	r2, r2, #12
 80032d8:	2a04      	cmp	r2, #4
 80032da:	f000 80ef 	beq.w	80034bc <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032de:	684a      	ldr	r2, [r1, #4]
 80032e0:	f002 020c 	and.w	r2, r2, #12
 80032e4:	2a08      	cmp	r2, #8
 80032e6:	f000 80e5 	beq.w	80034b4 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ea:	6863      	ldr	r3, [r4, #4]
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f0:	d010      	beq.n	8003314 <HAL_RCC_OscConfig+0x58>
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 810c 	beq.w	8003510 <HAL_RCC_OscConfig+0x254>
 80032f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032fc:	f000 8182 	beq.w	8003604 <HAL_RCC_OscConfig+0x348>
 8003300:	4b8e      	ldr	r3, [pc, #568]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	e004      	b.n	800331e <HAL_RCC_OscConfig+0x62>
 8003314:	4a89      	ldr	r2, [pc, #548]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003316:	6813      	ldr	r3, [r2, #0]
 8003318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331e:	f7ff f955 	bl	80025cc <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	4e86      	ldr	r6, [pc, #536]	; (800353c <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8003324:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	e005      	b.n	8003334 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003328:	f7ff f950 	bl	80025cc <HAL_GetTick>
 800332c:	1b40      	subs	r0, r0, r5
 800332e:	2864      	cmp	r0, #100	; 0x64
 8003330:	f200 80ea 	bhi.w	8003508 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003334:	6833      	ldr	r3, [r6, #0]
 8003336:	039a      	lsls	r2, r3, #14
 8003338:	d5f6      	bpl.n	8003328 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	079f      	lsls	r7, r3, #30
 800333e:	d528      	bpl.n	8003392 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003340:	4a7e      	ldr	r2, [pc, #504]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003342:	6851      	ldr	r1, [r2, #4]
 8003344:	f011 0f0c 	tst.w	r1, #12
 8003348:	f000 808d 	beq.w	8003466 <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800334c:	6851      	ldr	r1, [r2, #4]
 800334e:	f001 010c 	and.w	r1, r1, #12
 8003352:	2908      	cmp	r1, #8
 8003354:	f000 8083 	beq.w	800345e <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003358:	6923      	ldr	r3, [r4, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8118 	beq.w	8003590 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003360:	2201      	movs	r2, #1
 8003362:	4b77      	ldr	r3, [pc, #476]	; (8003540 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003364:	4e75      	ldr	r6, [pc, #468]	; (800353c <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8003366:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003368:	f7ff f930 	bl	80025cc <HAL_GetTick>
 800336c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336e:	e005      	b.n	800337c <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003370:	f7ff f92c 	bl	80025cc <HAL_GetTick>
 8003374:	1b40      	subs	r0, r0, r5
 8003376:	2802      	cmp	r0, #2
 8003378:	f200 80c6 	bhi.w	8003508 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337c:	6833      	ldr	r3, [r6, #0]
 800337e:	0798      	lsls	r0, r3, #30
 8003380:	d5f6      	bpl.n	8003370 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003382:	6833      	ldr	r3, [r6, #0]
 8003384:	6962      	ldr	r2, [r4, #20]
 8003386:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800338a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800338e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	071a      	lsls	r2, r3, #28
 8003394:	d41f      	bmi.n	80033d6 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003396:	075d      	lsls	r5, r3, #29
 8003398:	d542      	bpl.n	8003420 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800339a:	4b68      	ldr	r3, [pc, #416]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800339c:	69da      	ldr	r2, [r3, #28]
 800339e:	00d0      	lsls	r0, r2, #3
 80033a0:	d57d      	bpl.n	800349e <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 80033a2:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	4e67      	ldr	r6, [pc, #412]	; (8003544 <HAL_RCC_OscConfig+0x288>)
 80033a6:	6833      	ldr	r3, [r6, #0]
 80033a8:	05d9      	lsls	r1, r3, #23
 80033aa:	f140 809d 	bpl.w	80034e8 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ae:	68e3      	ldr	r3, [r4, #12]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	f000 80fe 	beq.w	80035b2 <HAL_RCC_OscConfig+0x2f6>
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80ca 	beq.w	8003550 <HAL_RCC_OscConfig+0x294>
 80033bc:	2b05      	cmp	r3, #5
 80033be:	4b5f      	ldr	r3, [pc, #380]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80033c0:	6a1a      	ldr	r2, [r3, #32]
 80033c2:	f000 812c 	beq.w	800361e <HAL_RCC_OscConfig+0x362>
 80033c6:	f022 0201 	bic.w	r2, r2, #1
 80033ca:	621a      	str	r2, [r3, #32]
 80033cc:	6a1a      	ldr	r2, [r3, #32]
 80033ce:	f022 0204 	bic.w	r2, r2, #4
 80033d2:	621a      	str	r2, [r3, #32]
 80033d4:	e0f2      	b.n	80035bc <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033d6:	69a3      	ldr	r3, [r4, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d04f      	beq.n	800347c <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 80033dc:	2201      	movs	r2, #1
 80033de:	4b58      	ldr	r3, [pc, #352]	; (8003540 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e0:	4e56      	ldr	r6, [pc, #344]	; (800353c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 80033e2:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80033e6:	f7ff f8f1 	bl	80025cc <HAL_GetTick>
 80033ea:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ec:	e005      	b.n	80033fa <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ee:	f7ff f8ed 	bl	80025cc <HAL_GetTick>
 80033f2:	1b40      	subs	r0, r0, r5
 80033f4:	2802      	cmp	r0, #2
 80033f6:	f200 8087 	bhi.w	8003508 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80033fc:	079b      	lsls	r3, r3, #30
 80033fe:	d5f6      	bpl.n	80033ee <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003400:	4b51      	ldr	r3, [pc, #324]	; (8003548 <HAL_RCC_OscConfig+0x28c>)
 8003402:	4a52      	ldr	r2, [pc, #328]	; (800354c <HAL_RCC_OscConfig+0x290>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	0a5b      	lsrs	r3, r3, #9
 800340c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800340e:	bf00      	nop
  }
  while (Delay --);
 8003410:	9b01      	ldr	r3, [sp, #4]
 8003412:	1e5a      	subs	r2, r3, #1
 8003414:	9201      	str	r2, [sp, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f9      	bne.n	800340e <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	075d      	lsls	r5, r3, #29
 800341e:	d4bc      	bmi.n	800339a <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003420:	69e0      	ldr	r0, [r4, #28]
 8003422:	b1c0      	cbz	r0, 8003456 <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003424:	4d45      	ldr	r5, [pc, #276]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003426:	686b      	ldr	r3, [r5, #4]
 8003428:	f003 030c 	and.w	r3, r3, #12
 800342c:	2b08      	cmp	r3, #8
 800342e:	f000 80d8 	beq.w	80035e2 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8003432:	2200      	movs	r2, #0
 8003434:	4b42      	ldr	r3, [pc, #264]	; (8003540 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003436:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003438:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800343a:	f000 80fa 	beq.w	8003632 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 800343e:	f7ff f8c5 	bl	80025cc <HAL_GetTick>
 8003442:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003444:	e004      	b.n	8003450 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003446:	f7ff f8c1 	bl	80025cc <HAL_GetTick>
 800344a:	1b00      	subs	r0, r0, r4
 800344c:	2802      	cmp	r0, #2
 800344e:	d85b      	bhi.n	8003508 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003450:	682b      	ldr	r3, [r5, #0]
 8003452:	019b      	lsls	r3, r3, #6
 8003454:	d4f7      	bmi.n	8003446 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8003456:	2000      	movs	r0, #0
}
 8003458:	b002      	add	sp, #8
 800345a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800345e:	6852      	ldr	r2, [r2, #4]
 8003460:	03d6      	lsls	r6, r2, #15
 8003462:	f53f af79 	bmi.w	8003358 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003466:	4a35      	ldr	r2, [pc, #212]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	0795      	lsls	r5, r2, #30
 800346c:	d530      	bpl.n	80034d0 <HAL_RCC_OscConfig+0x214>
 800346e:	6922      	ldr	r2, [r4, #16]
 8003470:	2a01      	cmp	r2, #1
 8003472:	d02d      	beq.n	80034d0 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8003474:	2001      	movs	r0, #1
}
 8003476:	b002      	add	sp, #8
 8003478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800347c:	4a30      	ldr	r2, [pc, #192]	; (8003540 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800347e:	4e2f      	ldr	r6, [pc, #188]	; (800353c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8003480:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003484:	f7ff f8a2 	bl	80025cc <HAL_GetTick>
 8003488:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800348a:	e004      	b.n	8003496 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348c:	f7ff f89e 	bl	80025cc <HAL_GetTick>
 8003490:	1b40      	subs	r0, r0, r5
 8003492:	2802      	cmp	r0, #2
 8003494:	d838      	bhi.n	8003508 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003496:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003498:	079f      	lsls	r7, r3, #30
 800349a:	d4f7      	bmi.n	800348c <HAL_RCC_OscConfig+0x1d0>
 800349c:	e7bd      	b.n	800341a <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800349e:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80034a0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034a6:	61da      	str	r2, [r3, #28]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80034b2:	e777      	b.n	80033a4 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034b4:	684a      	ldr	r2, [r1, #4]
 80034b6:	03d0      	lsls	r0, r2, #15
 80034b8:	f57f af17 	bpl.w	80032ea <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034bc:	4a1f      	ldr	r2, [pc, #124]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	0391      	lsls	r1, r2, #14
 80034c2:	f57f af3b 	bpl.w	800333c <HAL_RCC_OscConfig+0x80>
 80034c6:	6862      	ldr	r2, [r4, #4]
 80034c8:	2a00      	cmp	r2, #0
 80034ca:	f47f af37 	bne.w	800333c <HAL_RCC_OscConfig+0x80>
 80034ce:	e7d1      	b.n	8003474 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d0:	491a      	ldr	r1, [pc, #104]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80034d2:	6960      	ldr	r0, [r4, #20]
 80034d4:	680a      	ldr	r2, [r1, #0]
 80034d6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80034da:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80034de:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e0:	071a      	lsls	r2, r3, #28
 80034e2:	f57f af58 	bpl.w	8003396 <HAL_RCC_OscConfig+0xda>
 80034e6:	e776      	b.n	80033d6 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034e8:	6833      	ldr	r3, [r6, #0]
 80034ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ee:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80034f0:	f7ff f86c 	bl	80025cc <HAL_GetTick>
 80034f4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f6:	6833      	ldr	r3, [r6, #0]
 80034f8:	05da      	lsls	r2, r3, #23
 80034fa:	f53f af58 	bmi.w	80033ae <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fe:	f7ff f865 	bl	80025cc <HAL_GetTick>
 8003502:	1bc0      	subs	r0, r0, r7
 8003504:	2864      	cmp	r0, #100	; 0x64
 8003506:	d9f6      	bls.n	80034f6 <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8003508:	2003      	movs	r0, #3
}
 800350a:	b002      	add	sp, #8
 800350c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003510:	4d0a      	ldr	r5, [pc, #40]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003512:	682b      	ldr	r3, [r5, #0]
 8003514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003518:	602b      	str	r3, [r5, #0]
 800351a:	682b      	ldr	r3, [r5, #0]
 800351c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003520:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003522:	f7ff f853 	bl	80025cc <HAL_GetTick>
 8003526:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003528:	e004      	b.n	8003534 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800352a:	f7ff f84f 	bl	80025cc <HAL_GetTick>
 800352e:	1b80      	subs	r0, r0, r6
 8003530:	2864      	cmp	r0, #100	; 0x64
 8003532:	d8e9      	bhi.n	8003508 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003534:	682b      	ldr	r3, [r5, #0]
 8003536:	039b      	lsls	r3, r3, #14
 8003538:	d4f7      	bmi.n	800352a <HAL_RCC_OscConfig+0x26e>
 800353a:	e6fe      	b.n	800333a <HAL_RCC_OscConfig+0x7e>
 800353c:	40021000 	.word	0x40021000
 8003540:	42420000 	.word	0x42420000
 8003544:	40007000 	.word	0x40007000
 8003548:	20000024 	.word	0x20000024
 800354c:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003550:	4e50      	ldr	r6, [pc, #320]	; (8003694 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003552:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003556:	6a33      	ldr	r3, [r6, #32]
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	6233      	str	r3, [r6, #32]
 800355e:	6a33      	ldr	r3, [r6, #32]
 8003560:	f023 0304 	bic.w	r3, r3, #4
 8003564:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8003566:	f7ff f831 	bl	80025cc <HAL_GetTick>
 800356a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356c:	e004      	b.n	8003578 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f7ff f82d 	bl	80025cc <HAL_GetTick>
 8003572:	1bc0      	subs	r0, r0, r7
 8003574:	4540      	cmp	r0, r8
 8003576:	d8c7      	bhi.n	8003508 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003578:	6a33      	ldr	r3, [r6, #32]
 800357a:	0798      	lsls	r0, r3, #30
 800357c:	d4f7      	bmi.n	800356e <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 800357e:	2d00      	cmp	r5, #0
 8003580:	f43f af4e 	beq.w	8003420 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003584:	4a43      	ldr	r2, [pc, #268]	; (8003694 <HAL_RCC_OscConfig+0x3d8>)
 8003586:	69d3      	ldr	r3, [r2, #28]
 8003588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800358c:	61d3      	str	r3, [r2, #28]
 800358e:	e747      	b.n	8003420 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8003590:	4a41      	ldr	r2, [pc, #260]	; (8003698 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003592:	4e40      	ldr	r6, [pc, #256]	; (8003694 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8003594:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003596:	f7ff f819 	bl	80025cc <HAL_GetTick>
 800359a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359c:	e004      	b.n	80035a8 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359e:	f7ff f815 	bl	80025cc <HAL_GetTick>
 80035a2:	1b40      	subs	r0, r0, r5
 80035a4:	2802      	cmp	r0, #2
 80035a6:	d8af      	bhi.n	8003508 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a8:	6833      	ldr	r3, [r6, #0]
 80035aa:	0799      	lsls	r1, r3, #30
 80035ac:	d4f7      	bmi.n	800359e <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	e6ef      	b.n	8003392 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b2:	4a38      	ldr	r2, [pc, #224]	; (8003694 <HAL_RCC_OscConfig+0x3d8>)
 80035b4:	6a13      	ldr	r3, [r2, #32]
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80035bc:	f7ff f806 	bl	80025cc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80035c4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c6:	4f33      	ldr	r7, [pc, #204]	; (8003694 <HAL_RCC_OscConfig+0x3d8>)
 80035c8:	e004      	b.n	80035d4 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ca:	f7fe ffff 	bl	80025cc <HAL_GetTick>
 80035ce:	1b80      	subs	r0, r0, r6
 80035d0:	4540      	cmp	r0, r8
 80035d2:	d899      	bhi.n	8003508 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	079b      	lsls	r3, r3, #30
 80035d8:	d5f7      	bpl.n	80035ca <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 80035da:	2d00      	cmp	r5, #0
 80035dc:	f43f af20 	beq.w	8003420 <HAL_RCC_OscConfig+0x164>
 80035e0:	e7d0      	b.n	8003584 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e2:	2801      	cmp	r0, #1
 80035e4:	f43f af38 	beq.w	8003458 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 80035e8:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	6a22      	ldr	r2, [r4, #32]
 80035ec:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80035f0:	4291      	cmp	r1, r2
 80035f2:	f47f af3f 	bne.w	8003474 <HAL_RCC_OscConfig+0x1b8>
 80035f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 80035fc:	1a18      	subs	r0, r3, r0
 80035fe:	bf18      	it	ne
 8003600:	2001      	movne	r0, #1
 8003602:	e729      	b.n	8003458 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003604:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003608:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	e67f      	b.n	800331e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361e:	f042 0204 	orr.w	r2, r2, #4
 8003622:	621a      	str	r2, [r3, #32]
 8003624:	6a1a      	ldr	r2, [r3, #32]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	621a      	str	r2, [r3, #32]
 800362c:	e7c6      	b.n	80035bc <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 800362e:	2001      	movs	r0, #1
}
 8003630:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8003632:	f7fe ffcb 	bl	80025cc <HAL_GetTick>
 8003636:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003638:	e005      	b.n	8003646 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363a:	f7fe ffc7 	bl	80025cc <HAL_GetTick>
 800363e:	1b80      	subs	r0, r0, r6
 8003640:	2802      	cmp	r0, #2
 8003642:	f63f af61 	bhi.w	8003508 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003646:	682b      	ldr	r3, [r5, #0]
 8003648:	0199      	lsls	r1, r3, #6
 800364a:	d4f6      	bmi.n	800363a <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800364c:	6a23      	ldr	r3, [r4, #32]
 800364e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003652:	d105      	bne.n	8003660 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003654:	686a      	ldr	r2, [r5, #4]
 8003656:	68a1      	ldr	r1, [r4, #8]
 8003658:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800365c:	430a      	orrs	r2, r1
 800365e:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003660:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003662:	4d0c      	ldr	r5, [pc, #48]	; (8003694 <HAL_RCC_OscConfig+0x3d8>)
 8003664:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003666:	686a      	ldr	r2, [r5, #4]
 8003668:	430b      	orrs	r3, r1
 800366a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800366e:	490a      	ldr	r1, [pc, #40]	; (8003698 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003670:	4313      	orrs	r3, r2
 8003672:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003674:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003676:	f7fe ffa9 	bl	80025cc <HAL_GetTick>
 800367a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800367c:	e005      	b.n	800368a <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367e:	f7fe ffa5 	bl	80025cc <HAL_GetTick>
 8003682:	1b00      	subs	r0, r0, r4
 8003684:	2802      	cmp	r0, #2
 8003686:	f63f af3f 	bhi.w	8003508 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800368a:	682b      	ldr	r3, [r5, #0]
 800368c:	019a      	lsls	r2, r3, #6
 800368e:	d5f6      	bpl.n	800367e <HAL_RCC_OscConfig+0x3c2>
 8003690:	e6e1      	b.n	8003456 <HAL_RCC_OscConfig+0x19a>
 8003692:	bf00      	nop
 8003694:	40021000 	.word	0x40021000
 8003698:	42420000 	.word	0x42420000

0800369c <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800369c:	f240 2c01 	movw	ip, #513	; 0x201
{
 80036a0:	b500      	push	{lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036a2:	4b18      	ldr	r3, [pc, #96]	; (8003704 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80036a4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036a6:	f10d 0e18 	add.w	lr, sp, #24
 80036aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036ac:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80036b0:	4a15      	ldr	r2, [pc, #84]	; (8003708 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036b2:	f8ad c004 	strh.w	ip, [sp, #4]
  tmpreg = RCC->CFGR;
 80036b6:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80036b8:	f003 010c 	and.w	r1, r3, #12
 80036bc:	2908      	cmp	r1, #8
 80036be:	d003      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = HSE_VALUE;
 80036c0:	4812      	ldr	r0, [pc, #72]	; (800370c <HAL_RCC_GetSysClockFreq+0x70>)
}
 80036c2:	b007      	add	sp, #28
 80036c4:	f85d fb04 	ldr.w	pc, [sp], #4
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036c8:	f3c3 4183 	ubfx	r1, r3, #18, #4
 80036cc:	3118      	adds	r1, #24
 80036ce:	4469      	add	r1, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036d0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036d2:	f811 0c10 	ldrb.w	r0, [r1, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036d6:	d50e      	bpl.n	80036f6 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036d8:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036da:	4a0c      	ldr	r2, [pc, #48]	; (800370c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036dc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036e0:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036e4:	3318      	adds	r3, #24
 80036e6:	446b      	add	r3, sp
 80036e8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036ec:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80036f0:	b007      	add	sp, #28
 80036f2:	f85d fb04 	ldr.w	pc, [sp], #4
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_RCC_GetSysClockFreq+0x74>)
 80036f8:	fb03 f000 	mul.w	r0, r3, r0
}
 80036fc:	b007      	add	sp, #28
 80036fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003702:	bf00      	nop
 8003704:	080074c0 	.word	0x080074c0
 8003708:	40021000 	.word	0x40021000
 800370c:	007a1200 	.word	0x007a1200
 8003710:	003d0900 	.word	0x003d0900

08003714 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003714:	2800      	cmp	r0, #0
 8003716:	f000 808c 	beq.w	8003832 <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800371a:	4a49      	ldr	r2, [pc, #292]	; (8003840 <HAL_RCC_ClockConfig+0x12c>)
{
 800371c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003720:	6813      	ldr	r3, [r2, #0]
 8003722:	4604      	mov	r4, r0
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	428b      	cmp	r3, r1
 800372a:	460d      	mov	r5, r1
 800372c:	d20c      	bcs.n	8003748 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372e:	6813      	ldr	r3, [r2, #0]
 8003730:	f023 0307 	bic.w	r3, r3, #7
 8003734:	430b      	orrs	r3, r1
 8003736:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003738:	6813      	ldr	r3, [r2, #0]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	428b      	cmp	r3, r1
 8003740:	d002      	beq.n	8003748 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003742:	2001      	movs	r0, #1
}
 8003744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	0798      	lsls	r0, r3, #30
 800374c:	d514      	bpl.n	8003778 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374e:	0759      	lsls	r1, r3, #29
 8003750:	d504      	bpl.n	800375c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003752:	493c      	ldr	r1, [pc, #240]	; (8003844 <HAL_RCC_ClockConfig+0x130>)
 8003754:	684a      	ldr	r2, [r1, #4]
 8003756:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800375a:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375c:	071a      	lsls	r2, r3, #28
 800375e:	d504      	bpl.n	800376a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003760:	4938      	ldr	r1, [pc, #224]	; (8003844 <HAL_RCC_ClockConfig+0x130>)
 8003762:	684a      	ldr	r2, [r1, #4]
 8003764:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003768:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800376a:	4936      	ldr	r1, [pc, #216]	; (8003844 <HAL_RCC_ClockConfig+0x130>)
 800376c:	68a0      	ldr	r0, [r4, #8]
 800376e:	684a      	ldr	r2, [r1, #4]
 8003770:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003774:	4302      	orrs	r2, r0
 8003776:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003778:	07df      	lsls	r7, r3, #31
 800377a:	d520      	bpl.n	80037be <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377e:	4b31      	ldr	r3, [pc, #196]	; (8003844 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003780:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003784:	d057      	beq.n	8003836 <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003786:	2a02      	cmp	r2, #2
 8003788:	d050      	beq.n	800382c <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378a:	0799      	lsls	r1, r3, #30
 800378c:	d5d9      	bpl.n	8003742 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378e:	4e2d      	ldr	r6, [pc, #180]	; (8003844 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003790:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003794:	6873      	ldr	r3, [r6, #4]
 8003796:	f023 0303 	bic.w	r3, r3, #3
 800379a:	4313      	orrs	r3, r2
 800379c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800379e:	f7fe ff15 	bl	80025cc <HAL_GetTick>
 80037a2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a4:	e004      	b.n	80037b0 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a6:	f7fe ff11 	bl	80025cc <HAL_GetTick>
 80037aa:	1bc0      	subs	r0, r0, r7
 80037ac:	4540      	cmp	r0, r8
 80037ae:	d845      	bhi.n	800383c <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b0:	6873      	ldr	r3, [r6, #4]
 80037b2:	6862      	ldr	r2, [r4, #4]
 80037b4:	f003 030c 	and.w	r3, r3, #12
 80037b8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80037bc:	d1f3      	bne.n	80037a6 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037be:	4a20      	ldr	r2, [pc, #128]	; (8003840 <HAL_RCC_ClockConfig+0x12c>)
 80037c0:	6813      	ldr	r3, [r2, #0]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	42ab      	cmp	r3, r5
 80037c8:	d909      	bls.n	80037de <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	6813      	ldr	r3, [r2, #0]
 80037cc:	f023 0307 	bic.w	r3, r3, #7
 80037d0:	432b      	orrs	r3, r5
 80037d2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d4:	6813      	ldr	r3, [r2, #0]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	42ab      	cmp	r3, r5
 80037dc:	d1b1      	bne.n	8003742 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	075a      	lsls	r2, r3, #29
 80037e2:	d506      	bpl.n	80037f2 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e4:	4917      	ldr	r1, [pc, #92]	; (8003844 <HAL_RCC_ClockConfig+0x130>)
 80037e6:	68e0      	ldr	r0, [r4, #12]
 80037e8:	684a      	ldr	r2, [r1, #4]
 80037ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037ee:	4302      	orrs	r2, r0
 80037f0:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f2:	071b      	lsls	r3, r3, #28
 80037f4:	d507      	bpl.n	8003806 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037f6:	4a13      	ldr	r2, [pc, #76]	; (8003844 <HAL_RCC_ClockConfig+0x130>)
 80037f8:	6921      	ldr	r1, [r4, #16]
 80037fa:	6853      	ldr	r3, [r2, #4]
 80037fc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003800:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003804:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003806:	f7ff ff49 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800380a:	4603      	mov	r3, r0
 800380c:	4a0d      	ldr	r2, [pc, #52]	; (8003844 <HAL_RCC_ClockConfig+0x130>)
 800380e:	490e      	ldr	r1, [pc, #56]	; (8003848 <HAL_RCC_ClockConfig+0x134>)
 8003810:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8003812:	480e      	ldr	r0, [pc, #56]	; (800384c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003814:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003818:	5c89      	ldrb	r1, [r1, r2]
 800381a:	4a0d      	ldr	r2, [pc, #52]	; (8003850 <HAL_RCC_ClockConfig+0x13c>)
 800381c:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 800381e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003820:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8003822:	f7fe fe03 	bl	800242c <HAL_InitTick>
  return HAL_OK;
 8003826:	2000      	movs	r0, #0
}
 8003828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382c:	0198      	lsls	r0, r3, #6
 800382e:	d4ae      	bmi.n	800378e <HAL_RCC_ClockConfig+0x7a>
 8003830:	e787      	b.n	8003742 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003832:	2001      	movs	r0, #1
}
 8003834:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003836:	039e      	lsls	r6, r3, #14
 8003838:	d4a9      	bmi.n	800378e <HAL_RCC_ClockConfig+0x7a>
 800383a:	e782      	b.n	8003742 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800383c:	2003      	movs	r0, #3
 800383e:	e781      	b.n	8003744 <HAL_RCC_ClockConfig+0x30>
 8003840:	40022000 	.word	0x40022000
 8003844:	40021000 	.word	0x40021000
 8003848:	080074a8 	.word	0x080074a8
 800384c:	2000002c 	.word	0x2000002c
 8003850:	20000024 	.word	0x20000024

08003854 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8003856:	4a05      	ldr	r2, [pc, #20]	; (800386c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4905      	ldr	r1, [pc, #20]	; (8003870 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800385c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003860:	5ccb      	ldrb	r3, [r1, r3]
 8003862:	6810      	ldr	r0, [r2, #0]
}
 8003864:	40d8      	lsrs	r0, r3
 8003866:	4770      	bx	lr
 8003868:	40021000 	.word	0x40021000
 800386c:	20000024 	.word	0x20000024
 8003870:	080074b8 	.word	0x080074b8

08003874 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003874:	4b04      	ldr	r3, [pc, #16]	; (8003888 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8003876:	4a05      	ldr	r2, [pc, #20]	; (800388c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4905      	ldr	r1, [pc, #20]	; (8003890 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800387c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003880:	5ccb      	ldrb	r3, [r1, r3]
 8003882:	6810      	ldr	r0, [r2, #0]
}
 8003884:	40d8      	lsrs	r0, r3
 8003886:	4770      	bx	lr
 8003888:	40021000 	.word	0x40021000
 800388c:	20000024 	.word	0x20000024
 8003890:	080074b8 	.word	0x080074b8

08003894 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003894:	220f      	movs	r2, #15
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003896:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <HAL_RCC_GetClockConfig+0x38>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003898:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800389a:	685a      	ldr	r2, [r3, #4]
{
 800389c:	b410      	push	{r4}
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800389e:	f002 0203 	and.w	r2, r2, #3
 80038a2:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038a4:	685a      	ldr	r2, [r3, #4]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038a6:	4c0a      	ldr	r4, [pc, #40]	; (80038d0 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038a8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80038ac:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80038b4:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	08db      	lsrs	r3, r3, #3
 80038ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038be:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038c0:	6823      	ldr	r3, [r4, #0]
}
 80038c2:	bc10      	pop	{r4}
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	600b      	str	r3, [r1, #0]
}
 80038ca:	4770      	bx	lr
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40022000 	.word	0x40022000

080038d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038d8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038da:	6800      	ldr	r0, [r0, #0]
{
 80038dc:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038de:	07c1      	lsls	r1, r0, #31
 80038e0:	d52c      	bpl.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e2:	4b3a      	ldr	r3, [pc, #232]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	00d2      	lsls	r2, r2, #3
 80038e8:	d53f      	bpl.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ea:	4d39      	ldr	r5, [pc, #228]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 80038ec:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ee:	682b      	ldr	r3, [r5, #0]
 80038f0:	05df      	lsls	r7, r3, #23
 80038f2:	d548      	bpl.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038f4:	4d35      	ldr	r5, [pc, #212]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80038f6:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038f8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80038fc:	d011      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80038fe:	6861      	ldr	r1, [r4, #4]
 8003900:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8003904:	429a      	cmp	r2, r3
 8003906:	d00d      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003908:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800390a:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800390c:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800390e:	4a31      	ldr	r2, [pc, #196]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003910:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003914:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003918:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800391c:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800391e:	07d9      	lsls	r1, r3, #31
 8003920:	d444      	bmi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003922:	6861      	ldr	r1, [r4, #4]
 8003924:	4a29      	ldr	r2, [pc, #164]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003926:	6a13      	ldr	r3, [r2, #32]
 8003928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392c:	430b      	orrs	r3, r1
 800392e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003930:	b11e      	cbz	r6, 800393a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003932:	69d3      	ldr	r3, [r2, #28]
 8003934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003938:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800393a:	6820      	ldr	r0, [r4, #0]
 800393c:	0783      	lsls	r3, r0, #30
 800393e:	d506      	bpl.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003940:	4922      	ldr	r1, [pc, #136]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003942:	68a3      	ldr	r3, [r4, #8]
 8003944:	684a      	ldr	r2, [r1, #4]
 8003946:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800394a:	431a      	orrs	r2, r3
 800394c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800394e:	f010 0010 	ands.w	r0, r0, #16
 8003952:	d007      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003954:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003956:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003958:	68e1      	ldr	r1, [r4, #12]
 800395a:	6853      	ldr	r3, [r2, #4]
 800395c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003960:	430b      	orrs	r3, r1
 8003962:	6053      	str	r3, [r2, #4]
}
 8003964:	b002      	add	sp, #8
 8003966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800396a:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	4d18      	ldr	r5, [pc, #96]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800396e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003972:	61da      	str	r2, [r3, #28]
 8003974:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8003976:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397c:	9301      	str	r3, [sp, #4]
 800397e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003980:	682b      	ldr	r3, [r5, #0]
 8003982:	05df      	lsls	r7, r3, #23
 8003984:	d4b6      	bmi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003986:	682b      	ldr	r3, [r5, #0]
 8003988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800398e:	f7fe fe1d 	bl	80025cc <HAL_GetTick>
 8003992:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003994:	682b      	ldr	r3, [r5, #0]
 8003996:	05d8      	lsls	r0, r3, #23
 8003998:	d4ac      	bmi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800399a:	f7fe fe17 	bl	80025cc <HAL_GetTick>
 800399e:	1bc3      	subs	r3, r0, r7
 80039a0:	2b64      	cmp	r3, #100	; 0x64
 80039a2:	d9f7      	bls.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 80039a4:	2003      	movs	r0, #3
}
 80039a6:	b002      	add	sp, #8
 80039a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 80039ac:	f7fe fe0e 	bl	80025cc <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b0:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80039b4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b6:	e004      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b8:	f7fe fe08 	bl	80025cc <HAL_GetTick>
 80039bc:	1bc0      	subs	r0, r0, r7
 80039be:	4540      	cmp	r0, r8
 80039c0:	d8f0      	bhi.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c2:	6a2b      	ldr	r3, [r5, #32]
 80039c4:	079a      	lsls	r2, r3, #30
 80039c6:	d5f7      	bpl.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80039c8:	e7ab      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80039ca:	bf00      	nop
 80039cc:	40021000 	.word	0x40021000
 80039d0:	40007000 	.word	0x40007000
 80039d4:	42420000 	.word	0x42420000

080039d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039d8:	4684      	mov	ip, r0
 80039da:	b500      	push	{lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039dc:	4b36      	ldr	r3, [pc, #216]	; (8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
{
 80039de:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039e0:	f10d 0e18 	add.w	lr, sp, #24
 80039e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039e6:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
{
 80039ea:	4660      	mov	r0, ip
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039ec:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80039f0:	2802      	cmp	r0, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039f2:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 80039f6:	d007      	beq.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x30>
 80039f8:	2810      	cmp	r0, #16
 80039fa:	d02a      	beq.n	8003a52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80039fc:	2801      	cmp	r0, #1
 80039fe:	d010      	beq.n	8003a22 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
  uint32_t temp_reg = 0U, frequency = 0U;
 8003a00:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8003a02:	b007      	add	sp, #28
 8003a04:	f85d fb04 	ldr.w	pc, [sp], #4
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003a08:	f7ff ff34 	bl	8003874 <HAL_RCC_GetPCLK2Freq>
 8003a0c:	4b2b      	ldr	r3, [pc, #172]	; (8003abc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8003a14:	3301      	adds	r3, #1
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003a1c:	b007      	add	sp, #28
 8003a1e:	f85d fb04 	ldr.w	pc, [sp], #4
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003a22:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 8003a26:	4925      	ldr	r1, [pc, #148]	; (8003abc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8003a28:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8003a30:	d033      	beq.n	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a3a:	d031      	beq.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a40:	d1de      	bne.n	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        frequency = HSE_VALUE / 128U;
 8003a42:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003a46:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 8003a48:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8003a4c:	bf18      	it	ne
 8003a4e:	4618      	movne	r0, r3
 8003a50:	e7d7      	b.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
      temp_reg = RCC->CFGR;
 8003a52:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8003a54:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003a5c:	d0d1      	beq.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a5e:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8003a62:	3118      	adds	r1, #24
 8003a64:	4469      	add	r1, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a66:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a68:	f811 0c10 	ldrb.w	r0, [r1, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a6c:	d520      	bpl.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a6e:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003a70:	4a13      	ldr	r2, [pc, #76]	; (8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a72:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003a76:	3318      	adds	r3, #24
 8003a78:	446b      	add	r3, sp
 8003a7a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003a86:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	025b      	lsls	r3, r3, #9
 8003a8c:	d4b9      	bmi.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
          frequency = (pllclk * 2) / 3;
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8003a90:	0040      	lsls	r0, r0, #1
 8003a92:	fba3 3000 	umull	r3, r0, r3, r0
 8003a96:	0840      	lsrs	r0, r0, #1
 8003a98:	e7b3      	b.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        frequency = LSE_VALUE;
 8003a9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a9e:	e7b0      	b.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        frequency = LSI_VALUE;
 8003aa0:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003aa4:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 8003aa6:	f010 0002 	ands.w	r0, r0, #2
 8003aaa:	bf18      	it	ne
 8003aac:	4618      	movne	r0, r3
 8003aae:	e7a8      	b.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8003ab2:	fb03 f000 	mul.w	r0, r3, r0
 8003ab6:	e7e6      	b.n	8003a86 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 8003ab8:	080074c0 	.word	0x080074c0
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	007a1200 	.word	0x007a1200
 8003ac4:	aaaaaaab 	.word	0xaaaaaaab
 8003ac8:	003d0900 	.word	0x003d0900

08003acc <RTC_WeekDayNum>:
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;

  if (nMonth < 3U)
 8003acc:	2902      	cmp	r1, #2
{
 8003ace:	b410      	push	{r4}
  year = 2000U + nYear;
 8003ad0:	f500 63fa 	add.w	r3, r0, #2000	; 0x7d0
  if (nMonth < 3U)
 8003ad4:	d822      	bhi.n	8003b1c <RTC_WeekDayNum+0x50>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003ad6:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8003ada:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8003ade:	4c18      	ldr	r4, [pc, #96]	; (8003b40 <RTC_WeekDayNum+0x74>)
 8003ae0:	f200 70cf 	addw	r0, r0, #1999	; 0x7cf
 8003ae4:	fba4 4101 	umull	r4, r1, r4, r1
 8003ae8:	4c16      	ldr	r4, [pc, #88]	; (8003b44 <RTC_WeekDayNum+0x78>)
 8003aea:	3204      	adds	r2, #4
 8003aec:	fba4 4c00 	umull	r4, ip, r4, r0
 8003af0:	441a      	add	r2, r3
 8003af2:	eb02 0151 	add.w	r1, r2, r1, lsr #1
 8003af6:	eb01 0190 	add.w	r1, r1, r0, lsr #2
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003afa:	4813      	ldr	r0, [pc, #76]	; (8003b48 <RTC_WeekDayNum+0x7c>)
 8003afc:	eb01 11dc 	add.w	r1, r1, ip, lsr #7
 8003b00:	eba1 115c 	sub.w	r1, r1, ip, lsr #5
 8003b04:	fba0 3001 	umull	r3, r0, r0, r1
 8003b08:	1a0b      	subs	r3, r1, r0
 8003b0a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003b0e:	0880      	lsrs	r0, r0, #2
 8003b10:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8003b14:	1a08      	subs	r0, r1, r0
  }

  return (uint8_t)weekday;
}
 8003b16:	b2c0      	uxtb	r0, r0
 8003b18:	bc10      	pop	{r4}
 8003b1a:	4770      	bx	lr
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003b1c:	4808      	ldr	r0, [pc, #32]	; (8003b40 <RTC_WeekDayNum+0x74>)
 8003b1e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8003b22:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8003b26:	fba0 0101 	umull	r0, r1, r0, r1
 8003b2a:	3202      	adds	r2, #2
 8003b2c:	4805      	ldr	r0, [pc, #20]	; (8003b44 <RTC_WeekDayNum+0x78>)
 8003b2e:	441a      	add	r2, r3
 8003b30:	eb02 0151 	add.w	r1, r2, r1, lsr #1
 8003b34:	fba0 0c03 	umull	r0, ip, r0, r3
 8003b38:	eb01 0193 	add.w	r1, r1, r3, lsr #2
 8003b3c:	e7dd      	b.n	8003afa <RTC_WeekDayNum+0x2e>
 8003b3e:	bf00      	nop
 8003b40:	38e38e39 	.word	0x38e38e39
 8003b44:	51eb851f 	.word	0x51eb851f
 8003b48:	24924925 	.word	0x24924925

08003b4c <RTC_WriteAlarmCounter>:
{
 8003b4c:	b570      	push	{r4, r5, r6, lr}
 8003b4e:	4604      	mov	r4, r0
 8003b50:	460e      	mov	r6, r1
  tickstart = HAL_GetTick();
 8003b52:	f7fe fd3b 	bl	80025cc <HAL_GetTick>
 8003b56:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b58:	e005      	b.n	8003b66 <RTC_WriteAlarmCounter+0x1a>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b5a:	f7fe fd37 	bl	80025cc <HAL_GetTick>
 8003b5e:	1b40      	subs	r0, r0, r5
 8003b60:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003b64:	d81f      	bhi.n	8003ba6 <RTC_WriteAlarmCounter+0x5a>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	0692      	lsls	r2, r2, #26
 8003b6c:	d5f5      	bpl.n	8003b5a <RTC_WriteAlarmCounter+0xe>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b6e:	685a      	ldr	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003b70:	0c31      	lsrs	r1, r6, #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b72:	f042 0210 	orr.w	r2, r2, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003b76:	b2b6      	uxth	r6, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b78:	605a      	str	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003b7a:	6219      	str	r1, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003b7c:	625e      	str	r6, [r3, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	f022 0210 	bic.w	r2, r2, #16
 8003b84:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 8003b86:	f7fe fd21 	bl	80025cc <HAL_GetTick>
 8003b8a:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b8c:	e005      	b.n	8003b9a <RTC_WriteAlarmCounter+0x4e>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b8e:	f7fe fd1d 	bl	80025cc <HAL_GetTick>
 8003b92:	1b40      	subs	r0, r0, r5
 8003b94:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003b98:	d805      	bhi.n	8003ba6 <RTC_WriteAlarmCounter+0x5a>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	069b      	lsls	r3, r3, #26
 8003ba0:	d5f5      	bpl.n	8003b8e <RTC_WriteAlarmCounter+0x42>
  HAL_StatusTypeDef status = HAL_OK;
 8003ba2:	2000      	movs	r0, #0
}
 8003ba4:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_ERROR;
 8003ba6:	2001      	movs	r0, #1
}
 8003ba8:	bd70      	pop	{r4, r5, r6, pc}
 8003baa:	bf00      	nop

08003bac <HAL_RTC_Init>:
  if (hrtc == NULL)
 8003bac:	2800      	cmp	r0, #0
 8003bae:	d075      	beq.n	8003c9c <HAL_RTC_Init+0xf0>
{
 8003bb0:	b538      	push	{r3, r4, r5, lr}
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003bb2:	7c43      	ldrb	r3, [r0, #17]
 8003bb4:	4604      	mov	r4, r0
 8003bb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d062      	beq.n	8003c84 <HAL_RTC_Init+0xd8>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bbe:	2302      	movs	r3, #2
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003bc0:	6822      	ldr	r2, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bc2:	7463      	strb	r3, [r4, #17]
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003bc4:	6853      	ldr	r3, [r2, #4]
 8003bc6:	f023 0308 	bic.w	r3, r3, #8
 8003bca:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8003bcc:	f7fe fcfe 	bl	80025cc <HAL_GetTick>
 8003bd0:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003bd2:	e005      	b.n	8003be0 <HAL_RTC_Init+0x34>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003bd4:	f7fe fcfa 	bl	80025cc <HAL_GetTick>
 8003bd8:	1b40      	subs	r0, r0, r5
 8003bda:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003bde:	d84d      	bhi.n	8003c7c <HAL_RTC_Init+0xd0>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	0718      	lsls	r0, r3, #28
 8003be6:	d5f5      	bpl.n	8003bd4 <HAL_RTC_Init+0x28>
  tickstart = HAL_GetTick();
 8003be8:	f7fe fcf0 	bl	80025cc <HAL_GetTick>
 8003bec:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003bee:	e005      	b.n	8003bfc <HAL_RTC_Init+0x50>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003bf0:	f7fe fcec 	bl	80025cc <HAL_GetTick>
 8003bf4:	1b40      	subs	r0, r0, r5
 8003bf6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003bfa:	d83f      	bhi.n	8003c7c <HAL_RTC_Init+0xd0>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	0691      	lsls	r1, r2, #26
 8003c02:	d5f5      	bpl.n	8003bf0 <HAL_RTC_Init+0x44>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c04:	6859      	ldr	r1, [r3, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003c06:	68a0      	ldr	r0, [r4, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c08:	f041 0110 	orr.w	r1, r1, #16
 8003c0c:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	f021 0107 	bic.w	r1, r1, #7
 8003c14:	6059      	str	r1, [r3, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003c16:	b120      	cbz	r0, 8003c22 <HAL_RTC_Init+0x76>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003c18:	4921      	ldr	r1, [pc, #132]	; (8003ca0 <HAL_RTC_Init+0xf4>)
 8003c1a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	630a      	str	r2, [r1, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003c22:	491f      	ldr	r1, [pc, #124]	; (8003ca0 <HAL_RTC_Init+0xf4>)
 8003c24:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003c26:	f422 7260 	bic.w	r2, r2, #896	; 0x380
 8003c2a:	4302      	orrs	r2, r0
 8003c2c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003c2e:	6861      	ldr	r1, [r4, #4]
 8003c30:	1c4a      	adds	r2, r1, #1
 8003c32:	d02b      	beq.n	8003c8c <HAL_RTC_Init+0xe0>
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003c34:	6898      	ldr	r0, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003c36:	b28d      	uxth	r5, r1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003c38:	f020 000f 	bic.w	r0, r0, #15
 8003c3c:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
 8003c40:	6099      	str	r1, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	0c12      	lsrs	r2, r2, #16
 8003c46:	0412      	lsls	r2, r2, #16
 8003c48:	432a      	orrs	r2, r5
 8003c4a:	60da      	str	r2, [r3, #12]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	f022 0210 	bic.w	r2, r2, #16
 8003c52:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 8003c54:	f7fe fcba 	bl	80025cc <HAL_GetTick>
 8003c58:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003c5a:	e005      	b.n	8003c68 <HAL_RTC_Init+0xbc>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003c5c:	f7fe fcb6 	bl	80025cc <HAL_GetTick>
 8003c60:	1b40      	subs	r0, r0, r5
 8003c62:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003c66:	d809      	bhi.n	8003c7c <HAL_RTC_Init+0xd0>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	069b      	lsls	r3, r3, #26
 8003c6e:	d5f5      	bpl.n	8003c5c <HAL_RTC_Init+0xb0>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003c70:	2301      	movs	r3, #1
 8003c72:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003c74:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8003c76:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8003c78:	2000      	movs	r0, #0
}
 8003c7a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003c7c:	2304      	movs	r3, #4
 8003c7e:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8003c80:	2001      	movs	r0, #1
}
 8003c82:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8003c84:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8003c86:	f7fe fadd 	bl	8002244 <HAL_RTC_MspInit>
 8003c8a:	e798      	b.n	8003bbe <HAL_RTC_Init+0x12>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	f7ff fea3 	bl	80039d8 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d0f2      	beq.n	8003c7c <HAL_RTC_Init+0xd0>
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003c96:	6823      	ldr	r3, [r4, #0]
        prescaler = prescaler - 1U;
 8003c98:	1e41      	subs	r1, r0, #1
 8003c9a:	e7cb      	b.n	8003c34 <HAL_RTC_Init+0x88>
    return HAL_ERROR;
 8003c9c:	2001      	movs	r0, #1
}
 8003c9e:	4770      	bx	lr
 8003ca0:	40006c00 	.word	0x40006c00

08003ca4 <HAL_RTC_SetTime>:
  if ((hrtc == NULL) || (sTime == NULL))
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	f000 8085 	beq.w	8003db4 <HAL_RTC_SetTime+0x110>
 8003caa:	2900      	cmp	r1, #0
 8003cac:	f000 8082 	beq.w	8003db4 <HAL_RTC_SetTime+0x110>
{
 8003cb0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hrtc);
 8003cb2:	7c03      	ldrb	r3, [r0, #16]
 8003cb4:	4604      	mov	r4, r0
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d07e      	beq.n	8003db8 <HAL_RTC_SetTime+0x114>
 8003cba:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cbc:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8003cbe:	7420      	strb	r0, [r4, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cc0:	7463      	strb	r3, [r4, #17]
  if (Format == RTC_FORMAT_BIN)
 8003cc2:	2a00      	cmp	r2, #0
 8003cc4:	d05b      	beq.n	8003d7e <HAL_RTC_SetTime+0xda>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003cc6:	f44f 6661 	mov.w	r6, #3600	; 0xe10
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003cca:	784a      	ldrb	r2, [r1, #1]
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003ccc:	7808      	ldrb	r0, [r1, #0]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003cce:	0913      	lsrs	r3, r2, #4
 8003cd0:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8003cd4:	f002 030f 	and.w	r3, r2, #15
 8003cd8:	eb03 0345 	add.w	r3, r3, r5, lsl #1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8003ce2:	009d      	lsls	r5, r3, #2
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003ce4:	0903      	lsrs	r3, r0, #4
 8003ce6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8003cea:	f000 030f 	and.w	r3, r0, #15
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003cee:	7889      	ldrb	r1, [r1, #2]
  return (tmp + (Value & (uint8_t)0x0F));
 8003cf0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	fb06 5503 	mla	r5, r6, r3, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003cfa:	090b      	lsrs	r3, r1, #4
 8003cfc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8003d00:	f001 030f 	and.w	r3, r1, #15
 8003d04:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003d08:	b2db      	uxtb	r3, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003d0a:	441d      	add	r5, r3
  tickstart = HAL_GetTick();
 8003d0c:	f7fe fc5e 	bl	80025cc <HAL_GetTick>
 8003d10:	4606      	mov	r6, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003d12:	e005      	b.n	8003d20 <HAL_RTC_SetTime+0x7c>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003d14:	f7fe fc5a 	bl	80025cc <HAL_GetTick>
 8003d18:	1b83      	subs	r3, r0, r6
 8003d1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d1e:	d843      	bhi.n	8003da8 <HAL_RTC_SetTime+0x104>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	0691      	lsls	r1, r2, #26
 8003d26:	d5f5      	bpl.n	8003d14 <HAL_RTC_SetTime+0x70>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d28:	6859      	ldr	r1, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003d2a:	0c2a      	lsrs	r2, r5, #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d2c:	f041 0110 	orr.w	r1, r1, #16
 8003d30:	6059      	str	r1, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003d32:	619a      	str	r2, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003d34:	b2aa      	uxth	r2, r5
 8003d36:	61da      	str	r2, [r3, #28]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	f022 0210 	bic.w	r2, r2, #16
 8003d3e:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 8003d40:	f7fe fc44 	bl	80025cc <HAL_GetTick>
 8003d44:	4606      	mov	r6, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003d46:	e005      	b.n	8003d54 <HAL_RTC_SetTime+0xb0>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003d48:	f7fe fc40 	bl	80025cc <HAL_GetTick>
 8003d4c:	1b80      	subs	r0, r0, r6
 8003d4e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003d52:	d829      	bhi.n	8003da8 <HAL_RTC_SetTime+0x104>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	0692      	lsls	r2, r2, #26
 8003d5a:	d5f5      	bpl.n	8003d48 <HAL_RTC_SetTime+0xa4>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	f022 0205 	bic.w	r2, r2, #5
 8003d62:	605a      	str	r2, [r3, #4]
  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003d64:	6a1a      	ldr	r2, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003d66:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (((uint32_t) high1 << 16U) | low);
 8003d68:	b289      	uxth	r1, r1
 8003d6a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
      if (counter_alarm < counter_time)
 8003d6e:	428d      	cmp	r5, r1
 8003d70:	d811      	bhi.n	8003d96 <HAL_RTC_SetTime+0xf2>
    __HAL_UNLOCK(hrtc);
 8003d72:	2300      	movs	r3, #0
    hrtc->State = HAL_RTC_STATE_READY;
 8003d74:	2201      	movs	r2, #1
    __HAL_UNLOCK(hrtc);
 8003d76:	7423      	strb	r3, [r4, #16]
    hrtc->State = HAL_RTC_STATE_READY;
 8003d78:	7462      	strb	r2, [r4, #17]
    return HAL_OK;
 8003d7a:	4618      	mov	r0, r3
}
 8003d7c:	bd70      	pop	{r4, r5, r6, pc}
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003d7e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003d82:	784b      	ldrb	r3, [r1, #1]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003d84:	780a      	ldrb	r2, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003d86:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8003d8a:	009d      	lsls	r5, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003d8c:	fb00 5502 	mla	r5, r0, r2, r5
                              ((uint32_t)sTime->Seconds));
 8003d90:	788b      	ldrb	r3, [r1, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003d92:	441d      	add	r5, r3
 8003d94:	e7ba      	b.n	8003d0c <HAL_RTC_SetTime+0x68>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003d96:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8003da0:	f7ff fed4 	bl	8003b4c <RTC_WriteAlarmCounter>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	d0e4      	beq.n	8003d72 <HAL_RTC_SetTime+0xce>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003da8:	2204      	movs	r2, #4
          __HAL_UNLOCK(hrtc);
 8003daa:	2300      	movs	r3, #0
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003dac:	7462      	strb	r2, [r4, #17]
          __HAL_UNLOCK(hrtc);
 8003dae:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 8003db0:	2001      	movs	r0, #1
}
 8003db2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003db4:	2001      	movs	r0, #1
}
 8003db6:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8003db8:	2002      	movs	r0, #2
}
 8003dba:	bd70      	pop	{r4, r5, r6, pc}

08003dbc <HAL_RTC_SetDate>:
  if ((hrtc == NULL) || (sDate == NULL))
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	f000 8099 	beq.w	8003ef4 <HAL_RTC_SetDate+0x138>
{
 8003dc2:	b570      	push	{r4, r5, r6, lr}
 8003dc4:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 8003dc6:	2900      	cmp	r1, #0
 8003dc8:	f000 8096 	beq.w	8003ef8 <HAL_RTC_SetDate+0x13c>
  __HAL_LOCK(hrtc);
 8003dcc:	7c03      	ldrb	r3, [r0, #16]
 8003dce:	4604      	mov	r4, r0
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	f000 8093 	beq.w	8003efc <HAL_RTC_SetDate+0x140>
 8003dd6:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003dd8:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8003dda:	7401      	strb	r1, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ddc:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 8003dde:	2a00      	cmp	r2, #0
 8003de0:	d036      	beq.n	8003e50 <HAL_RTC_SetDate+0x94>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003de2:	78eb      	ldrb	r3, [r5, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003de4:	0918      	lsrs	r0, r3, #4
 8003de6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003df2:	b2c0      	uxtb	r0, r0
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003df4:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003df6:	786b      	ldrb	r3, [r5, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003df8:	0919      	lsrs	r1, r3, #4
 8003dfa:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8003dfe:	f003 010f 	and.w	r1, r3, #15
 8003e02:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8003e06:	b2c9      	uxtb	r1, r1
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003e08:	7361      	strb	r1, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003e0a:	78ab      	ldrb	r3, [r5, #2]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003e0c:	091a      	lsrs	r2, r3, #4
 8003e0e:	eb02 0682 	add.w	r6, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8003e12:	f003 020f 	and.w	r2, r3, #15
 8003e16:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 8003e1a:	b2d2      	uxtb	r2, r2
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003e1c:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003e1e:	f7ff fe55 	bl	8003acc <RTC_WeekDayNum>
 8003e22:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003e24:	7028      	strb	r0, [r5, #0]
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	6999      	ldr	r1, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003e2a:	69dd      	ldr	r5, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003e2c:	699a      	ldr	r2, [r3, #24]
  if (high1 != high2)
 8003e2e:	b28e      	uxth	r6, r1
 8003e30:	b290      	uxth	r0, r2
 8003e32:	4286      	cmp	r6, r0
 8003e34:	d013      	beq.n	8003e5e <HAL_RTC_SetDate+0xa2>
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003e36:	69dd      	ldr	r5, [r3, #28]
  if (hours > 24U)
 8003e38:	4b31      	ldr	r3, [pc, #196]	; (8003f00 <HAL_RTC_SetDate+0x144>)
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003e3a:	b2ad      	uxth	r5, r5
 8003e3c:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  if (hours > 24U)
 8003e40:	429d      	cmp	r5, r3
 8003e42:	d812      	bhi.n	8003e6a <HAL_RTC_SetDate+0xae>
  __HAL_UNLOCK(hrtc);
 8003e44:	2300      	movs	r3, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8003e46:	2201      	movs	r2, #1
  __HAL_UNLOCK(hrtc);
 8003e48:	7423      	strb	r3, [r4, #16]
  hrtc->State = HAL_RTC_STATE_READY ;
 8003e4a:	7462      	strb	r2, [r4, #17]
  return HAL_OK;
 8003e4c:	4618      	mov	r0, r3
}
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003e50:	78e8      	ldrb	r0, [r5, #3]
 8003e52:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003e54:	7869      	ldrb	r1, [r5, #1]
 8003e56:	7361      	strb	r1, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003e58:	78aa      	ldrb	r2, [r5, #2]
 8003e5a:	73a2      	strb	r2, [r4, #14]
 8003e5c:	e7df      	b.n	8003e1e <HAL_RTC_SetDate+0x62>
  if (hours > 24U)
 8003e5e:	4b28      	ldr	r3, [pc, #160]	; (8003f00 <HAL_RTC_SetDate+0x144>)
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003e60:	b2ad      	uxth	r5, r5
 8003e62:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  if (hours > 24U)
 8003e66:	429d      	cmp	r5, r3
 8003e68:	d9ec      	bls.n	8003e44 <HAL_RTC_SetDate+0x88>
  tickstart = HAL_GetTick();
 8003e6a:	f7fe fbaf 	bl	80025cc <HAL_GetTick>
 8003e6e:	4606      	mov	r6, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003e70:	e005      	b.n	8003e7e <HAL_RTC_SetDate+0xc2>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003e72:	f7fe fbab 	bl	80025cc <HAL_GetTick>
 8003e76:	1b80      	subs	r0, r0, r6
 8003e78:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003e7c:	d834      	bhi.n	8003ee8 <HAL_RTC_SetDate+0x12c>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	0691      	lsls	r1, r2, #26
 8003e84:	d5f5      	bpl.n	8003e72 <HAL_RTC_SetDate+0xb6>
 8003e86:	4e1f      	ldr	r6, [pc, #124]	; (8003f04 <HAL_RTC_SetDate+0x148>)
 8003e88:	4a1f      	ldr	r2, [pc, #124]	; (8003f08 <HAL_RTC_SetDate+0x14c>)
 8003e8a:	fba6 1605 	umull	r1, r6, r6, r5
 8003e8e:	0c36      	lsrs	r6, r6, #16
 8003e90:	fb02 5616 	mls	r6, r2, r6, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e94:	685a      	ldr	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003e96:	0c31      	lsrs	r1, r6, #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e98:	f042 0210 	orr.w	r2, r2, #16
 8003e9c:	605a      	str	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003e9e:	b2b2      	uxth	r2, r6
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003ea0:	6199      	str	r1, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003ea2:	61da      	str	r2, [r3, #28]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	f022 0210 	bic.w	r2, r2, #16
 8003eaa:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 8003eac:	f7fe fb8e 	bl	80025cc <HAL_GetTick>
 8003eb0:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003eb2:	e005      	b.n	8003ec0 <HAL_RTC_SetDate+0x104>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003eb4:	f7fe fb8a 	bl	80025cc <HAL_GetTick>
 8003eb8:	1b40      	subs	r0, r0, r5
 8003eba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003ebe:	d813      	bhi.n	8003ee8 <HAL_RTC_SetDate+0x12c>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	0692      	lsls	r2, r2, #26
 8003ec6:	d5f5      	bpl.n	8003eb4 <HAL_RTC_SetDate+0xf8>
  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003ec8:	6a1a      	ldr	r2, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003eca:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (((uint32_t) high1 << 16U) | low);
 8003ecc:	b289      	uxth	r1, r1
 8003ece:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
      if (counter_alarm < counter_time)
 8003ed2:	428e      	cmp	r6, r1
 8003ed4:	d9b6      	bls.n	8003e44 <HAL_RTC_SetDate+0x88>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003ed6:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
 8003eda:	4620      	mov	r0, r4
 8003edc:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8003ee0:	f7ff fe34 	bl	8003b4c <RTC_WriteAlarmCounter>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d0ad      	beq.n	8003e44 <HAL_RTC_SetDate+0x88>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003ee8:	2204      	movs	r2, #4
          __HAL_UNLOCK(hrtc);
 8003eea:	2300      	movs	r3, #0
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003eec:	7462      	strb	r2, [r4, #17]
          __HAL_UNLOCK(hrtc);
 8003eee:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 8003ef0:	2001      	movs	r0, #1
}
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003ef4:	2001      	movs	r0, #1
}
 8003ef6:	4770      	bx	lr
    return HAL_ERROR;
 8003ef8:	2001      	movs	r0, #1
}
 8003efa:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hrtc);
 8003efc:	2002      	movs	r0, #2
}
 8003efe:	bd70      	pop	{r4, r5, r6, pc}
 8003f00:	00015f8f 	.word	0x00015f8f
 8003f04:	c22e4507 	.word	0xc22e4507
 8003f08:	00015180 	.word	0x00015180

08003f0c <HAL_RTCEx_RTCEventCallback>:
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop

08003f10 <HAL_RTCEx_RTCEventErrorCallback>:
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop

08003f14 <HAL_RTCEx_RTCIRQHandler>:
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8003f14:	6803      	ldr	r3, [r0, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	07d1      	lsls	r1, r2, #31
 8003f1a:	d511      	bpl.n	8003f40 <HAL_RTCEx_RTCIRQHandler+0x2c>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	07d2      	lsls	r2, r2, #31
 8003f20:	d50e      	bpl.n	8003f40 <HAL_RTCEx_RTCIRQHandler+0x2c>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003f22:	685b      	ldr	r3, [r3, #4]
{
 8003f24:	b510      	push	{r4, lr}
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003f26:	075b      	lsls	r3, r3, #29
 8003f28:	4604      	mov	r4, r0
 8003f2a:	d40a      	bmi.n	8003f42 <HAL_RTCEx_RTCIRQHandler+0x2e>
        hrtc->State = HAL_RTC_STATE_ERROR;
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8003f2c:	f7ff ffee 	bl	8003f0c <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8003f30:	2301      	movs	r3, #1
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003f32:	6822      	ldr	r2, [r4, #0]
        hrtc->State = HAL_RTC_STATE_READY;
 8003f34:	7463      	strb	r3, [r4, #17]
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003f36:	6853      	ldr	r3, [r2, #4]
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	6053      	str	r3, [r2, #4]
    }
  }
}
 8003f3e:	bd10      	pop	{r4, pc}
 8003f40:	4770      	bx	lr
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8003f42:	f7ff ffe5 	bl	8003f10 <HAL_RTCEx_RTCEventErrorCallback>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f46:	2304      	movs	r3, #4
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8003f48:	f06f 0104 	mvn.w	r1, #4
 8003f4c:	6822      	ldr	r2, [r4, #0]
 8003f4e:	6051      	str	r1, [r2, #4]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f50:	7463      	strb	r3, [r4, #17]
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003f52:	6853      	ldr	r3, [r2, #4]
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	6053      	str	r3, [r2, #4]
}
 8003f5a:	bd10      	pop	{r4, pc}

08003f5c <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	d058      	beq.n	8004012 <HAL_SPI_Init+0xb6>
{
 8003f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f62:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f64:	4604      	mov	r4, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d044      	beq.n	8003ff4 <HAL_SPI_Init+0x98>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f6a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f6c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f70:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f72:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f76:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f78:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8003f7c:	2a00      	cmp	r2, #0
 8003f7e:	d03f      	beq.n	8004000 <HAL_SPI_Init+0xa4>
 8003f80:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f82:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003f86:	2602      	movs	r6, #2
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8003f88:	f04f 0e01 	mov.w	lr, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f8c:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f8e:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8003f92:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003f96:	4313      	orrs	r3, r2
 8003f98:	68e2      	ldr	r2, [r4, #12]
 8003f9a:	69a0      	ldr	r0, [r4, #24]
 8003f9c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	6922      	ldr	r2, [r4, #16]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003fa4:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fa8:	4032      	ands	r2, r6
 8003faa:	4313      	orrs	r3, r2
 8003fac:	6962      	ldr	r2, [r4, #20]
  __HAL_SPI_DISABLE(hspi);
 8003fae:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fb0:	ea02 020e 	and.w	r2, r2, lr
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	69e3      	ldr	r3, [r4, #28]
 8003fb8:	6a26      	ldr	r6, [r4, #32]
 8003fba:	f003 0738 	and.w	r7, r3, #56	; 0x38
 8003fbe:	f400 7300 	and.w	r3, r0, #512	; 0x200
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f006 0680 	and.w	r6, r6, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 8003fc8:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fca:	433b      	orrs	r3, r7
 8003fcc:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003fce:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fd0:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003fd4:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 8003fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fdc:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fde:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003fe0:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fe2:	69cb      	ldr	r3, [r1, #28]

  return HAL_OK;
 8003fe4:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fea:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fec:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fee:	f884 e051 	strb.w	lr, [r4, #81]	; 0x51
}
 8003ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ff4:	6842      	ldr	r2, [r0, #4]
 8003ff6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003ffa:	d0b9      	beq.n	8003f70 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ffc:	61c3      	str	r3, [r0, #28]
 8003ffe:	e7b7      	b.n	8003f70 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 8004000:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8004002:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004006:	f7fe f945 	bl	8002294 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800400a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800400c:	f403 5c00 	and.w	ip, r3, #8192	; 0x2000
 8004010:	e7b7      	b.n	8003f82 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8004012:	2001      	movs	r0, #1
}
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop

08004018 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004018:	6a03      	ldr	r3, [r0, #32]
{
 800401a:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800401c:	f023 0301 	bic.w	r3, r3, #1
 8004020:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004022:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004026:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004028:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800402a:	4d0f      	ldr	r5, [pc, #60]	; (8004068 <TIM_OC1_SetConfig+0x50>)
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800402c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004030:	4332      	orrs	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 8004032:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004034:	f023 0302 	bic.w	r3, r3, #2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004038:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 800403a:	ea43 0306 	orr.w	r3, r3, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800403e:	d006      	beq.n	800404e <TIM_OC1_SetConfig+0x36>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004040:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004042:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004044:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004046:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8004048:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800404a:	6203      	str	r3, [r0, #32]
}
 800404c:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 800404e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004050:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004054:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004056:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800405a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800405e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004060:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004064:	432c      	orrs	r4, r5
 8004066:	e7eb      	b.n	8004040 <TIM_OC1_SetConfig+0x28>
 8004068:	40012c00 	.word	0x40012c00

0800406c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800406c:	6a03      	ldr	r3, [r0, #32]
{
 800406e:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004074:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004076:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004078:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800407a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800407c:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800407e:	4d10      	ldr	r5, [pc, #64]	; (80040c0 <TIM_OC3_SetConfig+0x54>)
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004080:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004084:	4332      	orrs	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004086:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800408c:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800408e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004092:	d006      	beq.n	80040a2 <TIM_OC3_SetConfig+0x36>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004094:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004096:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004098:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800409a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 800409c:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800409e:	6203      	str	r3, [r0, #32]
}
 80040a0:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040a2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80040a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040a8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040ac:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040b0:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80040b4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80040b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040ba:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80040be:	e7e9      	b.n	8004094 <TIM_OC3_SetConfig+0x28>
 80040c0:	40012c00 	.word	0x40012c00

080040c4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040c4:	6a03      	ldr	r3, [r0, #32]
{
 80040c6:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040d2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d4:	f8d1 c000 	ldr.w	ip, [r1]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d8:	4d0c      	ldr	r5, [pc, #48]	; (800410c <TIM_OC4_SetConfig+0x48>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040da:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040de:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040e2:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80040e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ea:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040ec:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f0:	d006      	beq.n	8004100 <TIM_OC4_SetConfig+0x3c>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040f2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80040f4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80040f6:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80040f8:	bc30      	pop	{r4, r5}
  TIMx->CCR4 = OC_Config->Pulse;
 80040fa:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80040fc:	6203      	str	r3, [r0, #32]
}
 80040fe:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004100:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004102:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004106:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800410a:	e7f2      	b.n	80040f2 <TIM_OC4_SetConfig+0x2e>
 800410c:	40012c00 	.word	0x40012c00

08004110 <HAL_TIM_Base_MspInit>:
}
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop

08004114 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004114:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004118:	2b01      	cmp	r3, #1
 800411a:	d11f      	bne.n	800415c <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800411e:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004124:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004126:	490f      	ldr	r1, [pc, #60]	; (8004164 <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004128:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800412c:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800412e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004130:	d009      	beq.n	8004146 <HAL_TIM_Base_Start_IT+0x32>
 8004132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004136:	d006      	beq.n	8004146 <HAL_TIM_Base_Start_IT+0x32>
 8004138:	4a0b      	ldr	r2, [pc, #44]	; (8004168 <HAL_TIM_Base_Start_IT+0x54>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d003      	beq.n	8004146 <HAL_TIM_Base_Start_IT+0x32>
 800413e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004142:	4293      	cmp	r3, r2
 8004144:	d104      	bne.n	8004150 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414c:	2a06      	cmp	r2, #6
 800414e:	d007      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 8004150:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8004152:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004154:	f042 0201 	orr.w	r2, r2, #1
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	4770      	bx	lr
    return HAL_ERROR;
 800415c:	2001      	movs	r0, #1
 800415e:	4770      	bx	lr
  return HAL_OK;
 8004160:	2000      	movs	r0, #0
}
 8004162:	4770      	bx	lr
 8004164:	40012c00 	.word	0x40012c00
 8004168:	40000400 	.word	0x40000400

0800416c <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800416c:	bb41      	cbnz	r1, 80041c0 <HAL_TIM_OC_Start+0x54>
 800416e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004172:	2b01      	cmp	r3, #1
 8004174:	d12c      	bne.n	80041d0 <HAL_TIM_OC_Start+0x64>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004176:	2302      	movs	r3, #2
 8004178:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800417c:	2201      	movs	r2, #1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800417e:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004180:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004184:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004186:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 800418a:	ea20 0001 	bic.w	r0, r0, r1
{
 800418e:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8004190:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004192:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004194:	4c21      	ldr	r4, [pc, #132]	; (800421c <HAL_TIM_OC_Start+0xb0>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004196:	4311      	orrs	r1, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004198:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800419a:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800419c:	d01a      	beq.n	80041d4 <HAL_TIM_OC_Start+0x68>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a2:	d01b      	beq.n	80041dc <HAL_TIM_OC_Start+0x70>
 80041a4:	4a1e      	ldr	r2, [pc, #120]	; (8004220 <HAL_TIM_OC_Start+0xb4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d018      	beq.n	80041dc <HAL_TIM_OC_Start+0x70>
 80041aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d014      	beq.n	80041dc <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 80041b2:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80041b4:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80041b6:	f042 0201 	orr.w	r2, r2, #1
}
 80041ba:	bc10      	pop	{r4}
    __HAL_TIM_ENABLE(htim);
 80041bc:	601a      	str	r2, [r3, #0]
}
 80041be:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041c0:	2904      	cmp	r1, #4
 80041c2:	d023      	beq.n	800420c <HAL_TIM_OC_Start+0xa0>
 80041c4:	2908      	cmp	r1, #8
 80041c6:	d019      	beq.n	80041fc <HAL_TIM_OC_Start+0x90>
 80041c8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d00d      	beq.n	80041ec <HAL_TIM_OC_Start+0x80>
    return HAL_ERROR;
 80041d0:	2001      	movs	r0, #1
}
 80041d2:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 80041d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041da:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e2:	2a06      	cmp	r2, #6
 80041e4:	d1e5      	bne.n	80041b2 <HAL_TIM_OC_Start+0x46>
  return HAL_OK;
 80041e6:	2000      	movs	r0, #0
}
 80041e8:	bc10      	pop	{r4}
 80041ea:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ec:	2904      	cmp	r1, #4
 80041ee:	d011      	beq.n	8004214 <HAL_TIM_OC_Start+0xa8>
 80041f0:	2908      	cmp	r1, #8
 80041f2:	d007      	beq.n	8004204 <HAL_TIM_OC_Start+0x98>
 80041f4:	2302      	movs	r3, #2
 80041f6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80041fa:	e7bf      	b.n	800417c <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004200:	2b01      	cmp	r3, #1
 8004202:	d1e5      	bne.n	80041d0 <HAL_TIM_OC_Start+0x64>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004204:	2302      	movs	r3, #2
 8004206:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800420a:	e7b7      	b.n	800417c <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800420c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8004210:	2b01      	cmp	r3, #1
 8004212:	d1dd      	bne.n	80041d0 <HAL_TIM_OC_Start+0x64>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004214:	2302      	movs	r3, #2
 8004216:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800421a:	e7af      	b.n	800417c <HAL_TIM_OC_Start+0x10>
 800421c:	40012c00 	.word	0x40012c00
 8004220:	40000400 	.word	0x40000400

08004224 <HAL_TIM_OC_Stop>:
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004224:	2201      	movs	r2, #1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004226:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004228:	f001 0c1f 	and.w	ip, r1, #31
 800422c:	fa02 fc0c 	lsl.w	ip, r2, ip
  TIMx->CCER &= ~tmp;
 8004230:	6a1a      	ldr	r2, [r3, #32]
{
 8004232:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8004234:	ea22 020c 	bic.w	r2, r2, ip
 8004238:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800423a:	4c1d      	ldr	r4, [pc, #116]	; (80042b0 <HAL_TIM_OC_Stop+0x8c>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800423c:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800423e:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004240:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004242:	d020      	beq.n	8004286 <HAL_TIM_OC_Stop+0x62>
  __HAL_TIM_DISABLE(htim);
 8004244:	f241 1211 	movw	r2, #4369	; 0x1111
 8004248:	6a1c      	ldr	r4, [r3, #32]
 800424a:	4214      	tst	r4, r2
 800424c:	d104      	bne.n	8004258 <HAL_TIM_OC_Stop+0x34>
 800424e:	f240 4244 	movw	r2, #1092	; 0x444
 8004252:	6a1c      	ldr	r4, [r3, #32]
 8004254:	4214      	tst	r4, r2
 8004256:	d011      	beq.n	800427c <HAL_TIM_OC_Stop+0x58>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004258:	2301      	movs	r3, #1
 800425a:	b921      	cbnz	r1, 8004266 <HAL_TIM_OC_Stop+0x42>
 800425c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
}
 8004260:	bc10      	pop	{r4}
 8004262:	2000      	movs	r0, #0
 8004264:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004266:	2904      	cmp	r1, #4
 8004268:	d01c      	beq.n	80042a4 <HAL_TIM_OC_Stop+0x80>
 800426a:	2908      	cmp	r1, #8
 800426c:	bf0c      	ite	eq
 800426e:	f880 3040 	strbeq.w	r3, [r0, #64]	; 0x40
 8004272:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
}
 8004276:	bc10      	pop	{r4}
 8004278:	2000      	movs	r0, #0
 800427a:	4770      	bx	lr
  __HAL_TIM_DISABLE(htim);
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	f022 0201 	bic.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	e7e8      	b.n	8004258 <HAL_TIM_OC_Stop+0x34>
    __HAL_TIM_MOE_DISABLE(htim);
 8004286:	f241 1211 	movw	r2, #4369	; 0x1111
 800428a:	6a1c      	ldr	r4, [r3, #32]
 800428c:	4214      	tst	r4, r2
 800428e:	d1d9      	bne.n	8004244 <HAL_TIM_OC_Stop+0x20>
 8004290:	f240 4244 	movw	r2, #1092	; 0x444
 8004294:	6a1c      	ldr	r4, [r3, #32]
 8004296:	4214      	tst	r4, r2
 8004298:	d1d4      	bne.n	8004244 <HAL_TIM_OC_Stop+0x20>
 800429a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800429c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042a0:	645a      	str	r2, [r3, #68]	; 0x44
 80042a2:	e7cf      	b.n	8004244 <HAL_TIM_OC_Stop+0x20>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80042a4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
}
 80042a8:	bc10      	pop	{r4}
 80042aa:	2000      	movs	r0, #0
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40012c00 	.word	0x40012c00

080042b4 <HAL_TIM_PWM_Start>:
 80042b4:	f7ff bf5a 	b.w	800416c <HAL_TIM_OC_Start>

080042b8 <HAL_TIM_PWM_Stop>:
 80042b8:	f7ff bfb4 	b.w	8004224 <HAL_TIM_OC_Stop>

080042bc <HAL_TIM_OnePulse_MspInit>:
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop

080042c0 <HAL_TIM_OC_DelayElapsedCallback>:
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop

080042c4 <HAL_TIM_IC_CaptureCallback>:
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop

080042c8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop

080042cc <HAL_TIM_TriggerCallback>:
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop

080042d0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042d0:	6803      	ldr	r3, [r0, #0]
{
 80042d2:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042d4:	691a      	ldr	r2, [r3, #16]
{
 80042d6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042d8:	0791      	lsls	r1, r2, #30
 80042da:	d502      	bpl.n	80042e2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	0792      	lsls	r2, r2, #30
 80042e0:	d45f      	bmi.n	80043a2 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	0750      	lsls	r0, r2, #29
 80042e6:	d502      	bpl.n	80042ee <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	0751      	lsls	r1, r2, #29
 80042ec:	d446      	bmi.n	800437c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	0712      	lsls	r2, r2, #28
 80042f2:	d502      	bpl.n	80042fa <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	0710      	lsls	r0, r2, #28
 80042f8:	d42e      	bmi.n	8004358 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	06d2      	lsls	r2, r2, #27
 80042fe:	d502      	bpl.n	8004306 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	06d0      	lsls	r0, r2, #27
 8004304:	d418      	bmi.n	8004338 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	07d1      	lsls	r1, r2, #31
 800430a:	d502      	bpl.n	8004312 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	07d2      	lsls	r2, r2, #31
 8004310:	d45d      	bmi.n	80043ce <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	0610      	lsls	r0, r2, #24
 8004316:	d502      	bpl.n	800431e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	0611      	lsls	r1, r2, #24
 800431c:	d45f      	bmi.n	80043de <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	0652      	lsls	r2, r2, #25
 8004322:	d502      	bpl.n	800432a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	0650      	lsls	r0, r2, #25
 8004328:	d461      	bmi.n	80043ee <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	0691      	lsls	r1, r2, #26
 800432e:	d502      	bpl.n	8004336 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	0692      	lsls	r2, r2, #26
 8004334:	d443      	bmi.n	80043be <HAL_TIM_IRQHandler+0xee>
}
 8004336:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004338:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800433c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800433e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004340:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004342:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004344:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004346:	f413 7f40 	tst.w	r3, #768	; 0x300
 800434a:	d064      	beq.n	8004416 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800434c:	f7ff ffba 	bl	80042c4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004350:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004352:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004354:	7722      	strb	r2, [r4, #28]
 8004356:	e7d6      	b.n	8004306 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004358:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800435c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800435e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004360:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004362:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004364:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004366:	0799      	lsls	r1, r3, #30
 8004368:	d152      	bne.n	8004410 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436a:	f7ff ffa9 	bl	80042c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436e:	4620      	mov	r0, r4
 8004370:	f7ff ffaa 	bl	80042c8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004374:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004376:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004378:	7722      	strb	r2, [r4, #28]
 800437a:	e7be      	b.n	80042fa <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800437c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004380:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004382:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004384:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004386:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8004388:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800438a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800438e:	d13c      	bne.n	800440a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004390:	f7ff ff96 	bl	80042c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004394:	4620      	mov	r0, r4
 8004396:	f7ff ff97 	bl	80042c8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800439c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	7722      	strb	r2, [r4, #28]
 80043a0:	e7a5      	b.n	80042ee <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043a2:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043a6:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043a8:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043aa:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	079b      	lsls	r3, r3, #30
 80043b0:	d025      	beq.n	80043fe <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80043b2:	f7ff ff87 	bl	80042c4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043b8:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ba:	7722      	strb	r2, [r4, #28]
 80043bc:	e791      	b.n	80042e2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043be:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80043c2:	4620      	mov	r0, r4
}
 80043c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80043ca:	f000 b9d1 	b.w	8004770 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043ce:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80043d2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043d4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80043d6:	f7fd feab 	bl	8002130 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	e799      	b.n	8004312 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043de:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80043e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80043e6:	f000 f9c5 	bl	8004774 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	e797      	b.n	800431e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80043f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043f4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80043f6:	f7ff ff69 	bl	80042cc <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	e795      	b.n	800432a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fe:	f7ff ff5f 	bl	80042c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004402:	4620      	mov	r0, r4
 8004404:	f7ff ff60 	bl	80042c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004408:	e7d5      	b.n	80043b6 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800440a:	f7ff ff5b 	bl	80042c4 <HAL_TIM_IC_CaptureCallback>
 800440e:	e7c4      	b.n	800439a <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8004410:	f7ff ff58 	bl	80042c4 <HAL_TIM_IC_CaptureCallback>
 8004414:	e7ae      	b.n	8004374 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004416:	f7ff ff53 	bl	80042c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441a:	4620      	mov	r0, r4
 800441c:	f7ff ff54 	bl	80042c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004420:	e796      	b.n	8004350 <HAL_TIM_IRQHandler+0x80>
 8004422:	bf00      	nop

08004424 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004424:	4a24      	ldr	r2, [pc, #144]	; (80044b8 <TIM_Base_SetConfig+0x94>)
{
 8004426:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004428:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 800442a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800442c:	d02c      	beq.n	8004488 <TIM_Base_SetConfig+0x64>
 800442e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004432:	d014      	beq.n	800445e <TIM_Base_SetConfig+0x3a>
 8004434:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004438:	4290      	cmp	r0, r2
 800443a:	d010      	beq.n	800445e <TIM_Base_SetConfig+0x3a>
 800443c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004440:	4290      	cmp	r0, r2
 8004442:	d00c      	beq.n	800445e <TIM_Base_SetConfig+0x3a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004444:	694d      	ldr	r5, [r1, #20]
 8004446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800444a:	432b      	orrs	r3, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 800444c:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800444e:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8004450:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8004452:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004454:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004456:	6282      	str	r2, [r0, #40]	; 0x28
}
 8004458:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 800445a:	6143      	str	r3, [r0, #20]
}
 800445c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800445e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004464:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8004466:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800446c:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800446e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004474:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004476:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8004478:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800447a:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800447c:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800447e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004480:	6282      	str	r2, [r0, #40]	; 0x28
}
 8004482:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8004484:	6143      	str	r3, [r0, #20]
}
 8004486:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004488:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800448a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800448e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8004490:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8004492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004496:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004498:	694a      	ldr	r2, [r1, #20]
 800449a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800449e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80044a0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044a2:	688b      	ldr	r3, [r1, #8]
}
 80044a4:	bc30      	pop	{r4, r5}
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044a6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80044a8:	680b      	ldr	r3, [r1, #0]
 80044aa:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80044ac:	690b      	ldr	r3, [r1, #16]
 80044ae:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80044b0:	2301      	movs	r3, #1
 80044b2:	6143      	str	r3, [r0, #20]
}
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40012c00 	.word	0x40012c00

080044bc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80044bc:	b350      	cbz	r0, 8004514 <HAL_TIM_Base_Init+0x58>
{
 80044be:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80044c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80044c4:	4604      	mov	r4, r0
 80044c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80044ca:	b1f3      	cbz	r3, 800450a <HAL_TIM_Base_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ce:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80044d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d4:	f851 0b04 	ldr.w	r0, [r1], #4
 80044d8:	f7ff ffa4 	bl	8004424 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044dc:	2301      	movs	r3, #1
 80044de:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80044e6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80044ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80044ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80044fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004502:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004506:	2000      	movs	r0, #0
}
 8004508:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800450a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800450e:	f7ff fdff 	bl	8004110 <HAL_TIM_Base_MspInit>
 8004512:	e7db      	b.n	80044cc <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8004514:	2001      	movs	r0, #1
}
 8004516:	4770      	bx	lr

08004518 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004518:	b350      	cbz	r0, 8004570 <HAL_TIM_PWM_Init+0x58>
{
 800451a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800451c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004520:	4604      	mov	r4, r0
 8004522:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004526:	b1f3      	cbz	r3, 8004566 <HAL_TIM_PWM_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800452a:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004530:	f851 0b04 	ldr.w	r0, [r1], #4
 8004534:	f7ff ff76 	bl	8004424 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004538:	2301      	movs	r3, #1
 800453a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800453e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004542:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004546:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800454a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004552:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004556:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800455a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800455e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004562:	2000      	movs	r0, #0
}
 8004564:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004566:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800456a:	f7fd fecf 	bl	800230c <HAL_TIM_PWM_MspInit>
 800456e:	e7db      	b.n	8004528 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8004570:	2001      	movs	r0, #1
}
 8004572:	4770      	bx	lr

08004574 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 8004574:	b358      	cbz	r0, 80045ce <HAL_TIM_OnePulse_Init+0x5a>
{
 8004576:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004578:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800457c:	4604      	mov	r4, r0
 800457e:	460d      	mov	r5, r1
 8004580:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004584:	b1f3      	cbz	r3, 80045c4 <HAL_TIM_OnePulse_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8004586:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004588:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800458a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800458e:	f851 0b04 	ldr.w	r0, [r1], #4
 8004592:	f7ff ff47 	bl	8004424 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004596:	2301      	movs	r3, #1
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004598:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 800459a:	2000      	movs	r0, #0
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800459c:	6811      	ldr	r1, [r2, #0]
 800459e:	f021 0108 	bic.w	r1, r1, #8
 80045a2:	6011      	str	r1, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 80045a4:	6811      	ldr	r1, [r2, #0]
 80045a6:	430d      	orrs	r5, r1
 80045a8:	6015      	str	r5, [r2, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045aa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045b2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 80045be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80045c2:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 80045c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 80045c8:	f7ff fe78 	bl	80042bc <HAL_TIM_OnePulse_MspInit>
 80045cc:	e7db      	b.n	8004586 <HAL_TIM_OnePulse_Init+0x12>
    return HAL_ERROR;
 80045ce:	2001      	movs	r0, #1
}
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop

080045d4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045d4:	6a03      	ldr	r3, [r0, #32]
{
 80045d6:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045d8:	f023 0310 	bic.w	r3, r3, #16
 80045dc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80045de:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80045e0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80045e2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045e4:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045e6:	4d11      	ldr	r5, [pc, #68]	; (800462c <TIM_OC2_SetConfig+0x58>)
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045e8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045ec:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045f0:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80045f2:	f023 0320 	bic.w	r3, r3, #32
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045f6:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045f8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045fc:	d006      	beq.n	800460c <TIM_OC2_SetConfig+0x38>
  TIMx->CCR2 = OC_Config->Pulse;
 80045fe:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004600:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004602:	6182      	str	r2, [r0, #24]
}
 8004604:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8004606:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004608:	6203      	str	r3, [r0, #32]
}
 800460a:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800460c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800460e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004612:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004616:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800461a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800461e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004624:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004628:	e7e9      	b.n	80045fe <TIM_OC2_SetConfig+0x2a>
 800462a:	bf00      	nop
 800462c:	40012c00 	.word	0x40012c00

08004630 <HAL_TIM_PWM_ConfigChannel>:
{
 8004630:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004632:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004636:	2b01      	cmp	r3, #1
 8004638:	d065      	beq.n	8004706 <HAL_TIM_PWM_ConfigChannel+0xd6>
 800463a:	2301      	movs	r3, #1
 800463c:	4604      	mov	r4, r0
 800463e:	460d      	mov	r5, r1
 8004640:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004644:	2a0c      	cmp	r2, #12
 8004646:	d818      	bhi.n	800467a <HAL_TIM_PWM_ConfigChannel+0x4a>
 8004648:	e8df f002 	tbb	[pc, r2]
 800464c:	17171707 	.word	0x17171707
 8004650:	17171732 	.word	0x17171732
 8004654:	17171748 	.word	0x17171748
 8004658:	1c          	.byte	0x1c
 8004659:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800465a:	6800      	ldr	r0, [r0, #0]
 800465c:	f7ff fcdc 	bl	8004018 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004660:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004662:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004664:	6999      	ldr	r1, [r3, #24]
 8004666:	f041 0108 	orr.w	r1, r1, #8
 800466a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800466c:	6999      	ldr	r1, [r3, #24]
 800466e:	f021 0104 	bic.w	r1, r1, #4
 8004672:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	4302      	orrs	r2, r0
 8004678:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800467a:	2300      	movs	r3, #0
  return HAL_OK;
 800467c:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 800467e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004682:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004684:	6800      	ldr	r0, [r0, #0]
 8004686:	f7ff fd1d 	bl	80040c4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800468a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800468c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800468e:	69d9      	ldr	r1, [r3, #28]
 8004690:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004694:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004696:	69d9      	ldr	r1, [r3, #28]
 8004698:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800469c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80046a4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80046a6:	2300      	movs	r3, #0
  return HAL_OK;
 80046a8:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 80046aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 80046ae:	e7e8      	b.n	8004682 <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046b0:	6800      	ldr	r0, [r0, #0]
 80046b2:	f7ff ff8f 	bl	80045d4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046b6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046b8:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046ba:	6999      	ldr	r1, [r3, #24]
 80046bc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80046c0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046c2:	6999      	ldr	r1, [r3, #24]
 80046c4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80046c8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046ca:	699a      	ldr	r2, [r3, #24]
 80046cc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80046d0:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80046d2:	2300      	movs	r3, #0
  return HAL_OK;
 80046d4:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 80046d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 80046da:	e7d2      	b.n	8004682 <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046dc:	6800      	ldr	r0, [r0, #0]
 80046de:	f7ff fcc5 	bl	800406c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046e2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046e4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046e6:	69d9      	ldr	r1, [r3, #28]
 80046e8:	f041 0108 	orr.w	r1, r1, #8
 80046ec:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046ee:	69d9      	ldr	r1, [r3, #28]
 80046f0:	f021 0104 	bic.w	r1, r1, #4
 80046f4:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046f6:	69da      	ldr	r2, [r3, #28]
 80046f8:	4302      	orrs	r2, r0
 80046fa:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80046fc:	2300      	movs	r3, #0
  return HAL_OK;
 80046fe:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8004700:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 8004704:	e7bd      	b.n	8004682 <HAL_TIM_PWM_ConfigChannel+0x52>
  __HAL_LOCK(htim);
 8004706:	2002      	movs	r0, #2
}
 8004708:	bd38      	pop	{r3, r4, r5, pc}
 800470a:	bf00      	nop

0800470c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800470c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004710:	2a01      	cmp	r2, #1
 8004712:	d027      	beq.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8004714:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004716:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004718:	681a      	ldr	r2, [r3, #0]
{
 800471a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004720:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004722:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004724:	4d10      	ldr	r5, [pc, #64]	; (8004768 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8004726:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800472a:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800472c:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 800472e:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8004730:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004732:	d009      	beq.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004734:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004738:	d006      	beq.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800473a:	480c      	ldr	r0, [pc, #48]	; (800476c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800473c:	4282      	cmp	r2, r0
 800473e:	d003      	beq.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004740:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004744:	4282      	cmp	r2, r0
 8004746:	d104      	bne.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004748:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800474a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800474e:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004750:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004752:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8004754:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800475a:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 800475e:	4610      	mov	r0, r2
}
 8004760:	bc30      	pop	{r4, r5}
 8004762:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004764:	2002      	movs	r0, #2
}
 8004766:	4770      	bx	lr
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40000400 	.word	0x40000400

08004770 <HAL_TIMEx_CommutCallback>:
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop

08004774 <HAL_TIMEx_BreakCallback>:
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop

08004778 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004778:	b538      	push	{r3, r4, r5, lr}
 800477a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800477c:	6803      	ldr	r3, [r0, #0]
 800477e:	68c1      	ldr	r1, [r0, #12]
 8004780:	691a      	ldr	r2, [r3, #16]
  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);


  if(huart->Instance == USART1)
 8004782:	4d1c      	ldr	r5, [pc, #112]	; (80047f4 <UART_SetConfig+0x7c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004784:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004788:	430a      	orrs	r2, r1
 800478a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800478c:	6882      	ldr	r2, [r0, #8]
 800478e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004790:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004792:	4302      	orrs	r2, r0
 8004794:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004796:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800479a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800479e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80047a0:	430a      	orrs	r2, r1
 80047a2:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047a4:	695a      	ldr	r2, [r3, #20]
 80047a6:	69a1      	ldr	r1, [r4, #24]
 80047a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80047ac:	430a      	orrs	r2, r1
  if(huart->Instance == USART1)
 80047ae:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047b0:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 80047b2:	d01b      	beq.n	80047ec <UART_SetConfig+0x74>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047b4:	f7ff f84e 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 80047b8:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047ba:	6862      	ldr	r2, [r4, #4]
 80047bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80047c0:	0092      	lsls	r2, r2, #2
 80047c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80047c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80047ca:	2564      	movs	r5, #100	; 0x64
 80047cc:	490a      	ldr	r1, [pc, #40]	; (80047f8 <UART_SetConfig+0x80>)
 80047ce:	6820      	ldr	r0, [r4, #0]
 80047d0:	fba1 4203 	umull	r4, r2, r1, r3
 80047d4:	0952      	lsrs	r2, r2, #5
 80047d6:	fb05 3312 	mls	r3, r5, r2, r3
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	3332      	adds	r3, #50	; 0x32
 80047de:	fba1 1303 	umull	r1, r3, r1, r3
 80047e2:	0112      	lsls	r2, r2, #4
 80047e4:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 80047e8:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80047ea:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80047ec:	f7ff f842 	bl	8003874 <HAL_RCC_GetPCLK2Freq>
 80047f0:	4603      	mov	r3, r0
 80047f2:	e7e2      	b.n	80047ba <UART_SetConfig+0x42>
 80047f4:	40013800 	.word	0x40013800
 80047f8:	51eb851f 	.word	0x51eb851f

080047fc <HAL_UART_Init>:
  if (huart == NULL)
 80047fc:	b360      	cbz	r0, 8004858 <HAL_UART_Init+0x5c>
{
 80047fe:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004800:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004804:	4604      	mov	r4, r0
 8004806:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800480a:	b303      	cbz	r3, 800484e <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800480c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800480e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004810:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004814:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8004816:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8004818:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800481c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800481e:	f7ff ffab 	bl	8004778 <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004822:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004824:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004826:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8004828:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004832:	695a      	ldr	r2, [r3, #20]
 8004834:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004838:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004840:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004842:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004844:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004848:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 800484c:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 800484e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004852:	f7fd fda7 	bl	80023a4 <HAL_UART_MspInit>
 8004856:	e7d9      	b.n	800480c <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8004858:	2001      	movs	r0, #1
}
 800485a:	4770      	bx	lr

0800485c <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800485c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004860:	2b20      	cmp	r3, #32
 8004862:	d119      	bne.n	8004898 <HAL_UART_Transmit_IT+0x3c>
    if ((pData == NULL) || (Size == 0U))
 8004864:	b1b1      	cbz	r1, 8004894 <HAL_UART_Transmit_IT+0x38>
 8004866:	b1aa      	cbz	r2, 8004894 <HAL_UART_Transmit_IT+0x38>
    __HAL_LOCK(huart);
 8004868:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d013      	beq.n	8004898 <HAL_UART_Transmit_IT+0x3c>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004870:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004872:	f04f 0c21 	mov.w	ip, #33	; 0x21
    huart->pTxBuffPtr = pData;
 8004876:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004878:	6801      	ldr	r1, [r0, #0]
    huart->TxXferCount = Size;
 800487a:	84c2      	strh	r2, [r0, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800487c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004880:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004882:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
    huart->TxXferSize = Size;
 8004886:	8482      	strh	r2, [r0, #36]	; 0x24
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004888:	68ca      	ldr	r2, [r1, #12]
    return HAL_OK;
 800488a:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800488c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004890:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8004892:	4770      	bx	lr
      return HAL_ERROR;
 8004894:	2001      	movs	r0, #1
 8004896:	4770      	bx	lr
    return HAL_BUSY;
 8004898:	2002      	movs	r0, #2
}
 800489a:	4770      	bx	lr

0800489c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800489c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d122      	bne.n	80048ea <HAL_UART_Receive_IT+0x4e>
    if ((pData == NULL) || (Size == 0U))
 80048a4:	b1f9      	cbz	r1, 80048e6 <HAL_UART_Receive_IT+0x4a>
 80048a6:	b1f2      	cbz	r2, 80048e6 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 80048a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d01c      	beq.n	80048ea <HAL_UART_Receive_IT+0x4e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b0:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048b2:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 80048b6:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048b8:	6801      	ldr	r1, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ba:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 80048bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 80048c0:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c2:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048c4:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
  huart->RxXferSize = Size;
 80048c8:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048ca:	68ca      	ldr	r2, [r1, #12]
    return(UART_Start_Receive_IT(huart, pData, Size));
 80048cc:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d2:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048d4:	694b      	ldr	r3, [r1, #20]
 80048d6:	f043 0301 	orr.w	r3, r3, #1
 80048da:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048dc:	68cb      	ldr	r3, [r1, #12]
 80048de:	f043 0320 	orr.w	r3, r3, #32
 80048e2:	60cb      	str	r3, [r1, #12]
    return(UART_Start_Receive_IT(huart, pData, Size));
 80048e4:	4770      	bx	lr
      return HAL_ERROR;
 80048e6:	2001      	movs	r0, #1
 80048e8:	4770      	bx	lr
    return HAL_BUSY;
 80048ea:	2002      	movs	r0, #2
}
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop

080048f0 <HAL_UART_TxCpltCallback>:
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop

080048f4 <HAL_UART_ErrorCallback>:
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop

080048f8 <UART_DMAAbortOnError>:
{
 80048f8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80048fa:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80048fe:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004900:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004902:	f7ff fff7 	bl	80048f4 <HAL_UART_ErrorCallback>
}
 8004906:	bd08      	pop	{r3, pc}

08004908 <HAL_UARTEx_RxEventCallback>:
}
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop

0800490c <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800490c:	6883      	ldr	r3, [r0, #8]
 800490e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004912:	d03b      	beq.n	800498c <UART_Receive_IT.part.0.isra.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004914:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004916:	2b00      	cmp	r3, #0
 8004918:	d030      	beq.n	800497c <UART_Receive_IT.part.0.isra.0+0x70>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800491a:	6803      	ldr	r3, [r0, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004922:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004924:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004926:	3301      	adds	r3, #1
 8004928:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800492a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800492c:	3b01      	subs	r3, #1
 800492e:	b29b      	uxth	r3, r3
 8004930:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004932:	bb53      	cbnz	r3, 800498a <UART_Receive_IT.part.0.isra.0+0x7e>
      huart->RxState = HAL_UART_STATE_READY;
 8004934:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004938:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800493a:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800493c:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800493e:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004940:	f021 0120 	bic.w	r1, r1, #32
 8004944:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004946:	68d1      	ldr	r1, [r2, #12]
 8004948:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800494c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800494e:	6951      	ldr	r1, [r2, #20]
 8004950:	f021 0101 	bic.w	r1, r1, #1
 8004954:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004956:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800495a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800495c:	2901      	cmp	r1, #1
 800495e:	d120      	bne.n	80049a2 <UART_Receive_IT.part.0.isra.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004960:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004962:	68d1      	ldr	r1, [r2, #12]
 8004964:	f021 0110 	bic.w	r1, r1, #16
 8004968:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800496a:	6811      	ldr	r1, [r2, #0]
 800496c:	06c9      	lsls	r1, r1, #27
 800496e:	d422      	bmi.n	80049b6 <UART_Receive_IT.part.0.isra.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004970:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004972:	f7ff ffc9 	bl	8004908 <HAL_UARTEx_RxEventCallback>
}
 8004976:	b003      	add	sp, #12
 8004978:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800497c:	6903      	ldr	r3, [r0, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1cb      	bne.n	800491a <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004982:	6803      	ldr	r3, [r0, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	7013      	strb	r3, [r2, #0]
 8004988:	e7cc      	b.n	8004924 <UART_Receive_IT.part.0.isra.0+0x18>
 800498a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800498c:	6903      	ldr	r3, [r0, #16]
 800498e:	b96b      	cbnz	r3, 80049ac <UART_Receive_IT.part.0.isra.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004990:	6802      	ldr	r2, [r0, #0]
 8004992:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004994:	6852      	ldr	r2, [r2, #4]
 8004996:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800499a:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800499e:	6283      	str	r3, [r0, #40]	; 0x28
 80049a0:	e7c3      	b.n	800492a <UART_Receive_IT.part.0.isra.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 80049a2:	f7fd f84f 	bl	8001a44 <HAL_UART_RxCpltCallback>
}
 80049a6:	b003      	add	sp, #12
 80049a8:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049ac:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049ae:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	7013      	strb	r3, [r2, #0]
 80049b4:	e7b6      	b.n	8004924 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049b6:	9301      	str	r3, [sp, #4]
 80049b8:	6813      	ldr	r3, [r2, #0]
 80049ba:	9301      	str	r3, [sp, #4]
 80049bc:	6853      	ldr	r3, [r2, #4]
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	9b01      	ldr	r3, [sp, #4]
 80049c2:	e7d5      	b.n	8004970 <UART_Receive_IT.part.0.isra.0+0x64>

080049c4 <HAL_UART_IRQHandler>:
{
 80049c4:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049c6:	6803      	ldr	r3, [r0, #0]
{
 80049c8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049ca:	681a      	ldr	r2, [r3, #0]
{
 80049cc:	b083      	sub	sp, #12
  if (errorflags == RESET)
 80049ce:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049d2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049d4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80049d6:	d14e      	bne.n	8004a76 <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049d8:	0695      	lsls	r5, r2, #26
 80049da:	d502      	bpl.n	80049e2 <HAL_UART_IRQHandler+0x1e>
 80049dc:	068d      	lsls	r5, r1, #26
 80049de:	f100 80b3 	bmi.w	8004b48 <HAL_UART_IRQHandler+0x184>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80049e4:	2801      	cmp	r0, #1
 80049e6:	d00b      	beq.n	8004a00 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049e8:	0610      	lsls	r0, r2, #24
 80049ea:	d502      	bpl.n	80049f2 <HAL_UART_IRQHandler+0x2e>
 80049ec:	060d      	lsls	r5, r1, #24
 80049ee:	f100 8081 	bmi.w	8004af4 <HAL_UART_IRQHandler+0x130>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049f2:	0650      	lsls	r0, r2, #25
 80049f4:	d502      	bpl.n	80049fc <HAL_UART_IRQHandler+0x38>
 80049f6:	064a      	lsls	r2, r1, #25
 80049f8:	f100 809b 	bmi.w	8004b32 <HAL_UART_IRQHandler+0x16e>
}
 80049fc:	b003      	add	sp, #12
 80049fe:	bd30      	pop	{r4, r5, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004a00:	06d0      	lsls	r0, r2, #27
 8004a02:	d5f1      	bpl.n	80049e8 <HAL_UART_IRQHandler+0x24>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004a04:	06cd      	lsls	r5, r1, #27
 8004a06:	d5ef      	bpl.n	80049e8 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a08:	2100      	movs	r1, #0
 8004a0a:	9101      	str	r1, [sp, #4]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	9201      	str	r2, [sp, #4]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	9201      	str	r2, [sp, #4]
 8004a14:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a16:	695a      	ldr	r2, [r3, #20]
 8004a18:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8004a1c:	f000 80cc 	beq.w	8004bb8 <HAL_UART_IRQHandler+0x1f4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a20:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004a22:	6802      	ldr	r2, [r0, #0]
 8004a24:	6852      	ldr	r2, [r2, #4]
 8004a26:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8004a28:	2a00      	cmp	r2, #0
 8004a2a:	d0e7      	beq.n	80049fc <HAL_UART_IRQHandler+0x38>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004a2c:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8004a2e:	4295      	cmp	r5, r2
 8004a30:	d9e4      	bls.n	80049fc <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8004a32:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a34:	6982      	ldr	r2, [r0, #24]
 8004a36:	2a20      	cmp	r2, #32
 8004a38:	d016      	beq.n	8004a68 <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a40:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a42:	695a      	ldr	r2, [r3, #20]
 8004a44:	f022 0201 	bic.w	r2, r2, #1
 8004a48:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a4a:	695a      	ldr	r2, [r3, #20]
 8004a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a50:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8004a52:	2220      	movs	r2, #32
 8004a54:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a58:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	f022 0210 	bic.w	r2, r2, #16
 8004a60:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a62:	f7fe fa01 	bl	8002e68 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a66:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8004a68:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	1a69      	subs	r1, r5, r1
 8004a6e:	b289      	uxth	r1, r1
 8004a70:	f7ff ff4a 	bl	8004908 <HAL_UARTEx_RxEventCallback>
 8004a74:	e7c2      	b.n	80049fc <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a76:	f005 0501 	and.w	r5, r5, #1
 8004a7a:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8004a7e:	4328      	orrs	r0, r5
 8004a80:	d0af      	beq.n	80049e2 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a82:	07d0      	lsls	r0, r2, #31
 8004a84:	d505      	bpl.n	8004a92 <HAL_UART_IRQHandler+0xce>
 8004a86:	05c8      	lsls	r0, r1, #23
 8004a88:	d503      	bpl.n	8004a92 <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a8a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004a8c:	f040 0001 	orr.w	r0, r0, #1
 8004a90:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a92:	0750      	lsls	r0, r2, #29
 8004a94:	d529      	bpl.n	8004aea <HAL_UART_IRQHandler+0x126>
 8004a96:	b14d      	cbz	r5, 8004aac <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a98:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004a9a:	f040 0002 	orr.w	r0, r0, #2
 8004a9e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aa0:	0790      	lsls	r0, r2, #30
 8004aa2:	d503      	bpl.n	8004aac <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004aa4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004aa6:	f040 0004 	orr.w	r0, r0, #4
 8004aaa:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004aac:	0710      	lsls	r0, r2, #28
 8004aae:	d507      	bpl.n	8004ac0 <HAL_UART_IRQHandler+0xfc>
 8004ab0:	f001 0020 	and.w	r0, r1, #32
 8004ab4:	4328      	orrs	r0, r5
 8004ab6:	d003      	beq.n	8004ac0 <HAL_UART_IRQHandler+0xfc>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ab8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004aba:	f040 0008 	orr.w	r0, r0, #8
 8004abe:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ac0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d09a      	beq.n	80049fc <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ac6:	0690      	lsls	r0, r2, #26
 8004ac8:	d502      	bpl.n	8004ad0 <HAL_UART_IRQHandler+0x10c>
 8004aca:	068a      	lsls	r2, r1, #26
 8004acc:	f100 8095 	bmi.w	8004bfa <HAL_UART_IRQHandler+0x236>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad0:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ad2:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad4:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ad8:	f005 0508 	and.w	r5, r5, #8
 8004adc:	4315      	orrs	r5, r2
 8004ade:	d13d      	bne.n	8004b5c <HAL_UART_IRQHandler+0x198>
        HAL_UART_ErrorCallback(huart);
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f7ff ff07 	bl	80048f4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae6:	6425      	str	r5, [r4, #64]	; 0x40
 8004ae8:	e788      	b.n	80049fc <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aea:	0790      	lsls	r0, r2, #30
 8004aec:	d5de      	bpl.n	8004aac <HAL_UART_IRQHandler+0xe8>
 8004aee:	2d00      	cmp	r5, #0
 8004af0:	d0dc      	beq.n	8004aac <HAL_UART_IRQHandler+0xe8>
 8004af2:	e7d7      	b.n	8004aa4 <HAL_UART_IRQHandler+0xe0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004af4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004af8:	2a21      	cmp	r2, #33	; 0x21
 8004afa:	f47f af7f 	bne.w	80049fc <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004afe:	68a2      	ldr	r2, [r4, #8]
 8004b00:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004b04:	f000 8083 	beq.w	8004c0e <HAL_UART_IRQHandler+0x24a>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b08:	6a22      	ldr	r2, [r4, #32]
 8004b0a:	1c51      	adds	r1, r2, #1
 8004b0c:	6221      	str	r1, [r4, #32]
 8004b0e:	7812      	ldrb	r2, [r2, #0]
 8004b10:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004b12:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004b14:	3a01      	subs	r2, #1
 8004b16:	b292      	uxth	r2, r2
 8004b18:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004b1a:	2a00      	cmp	r2, #0
 8004b1c:	f47f af6e 	bne.w	80049fc <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b26:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b2e:	60da      	str	r2, [r3, #12]
 8004b30:	e764      	b.n	80049fc <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 8004b32:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b34:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004b36:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004b3e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8004b42:	f7ff fed5 	bl	80048f0 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8004b46:	e759      	b.n	80049fc <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b48:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004b4c:	2b22      	cmp	r3, #34	; 0x22
 8004b4e:	f47f af55 	bne.w	80049fc <HAL_UART_IRQHandler+0x38>
}
 8004b52:	b003      	add	sp, #12
 8004b54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b58:	f7ff bed8 	b.w	800490c <UART_Receive_IT.part.0.isra.0>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b62:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b64:	695a      	ldr	r2, [r3, #20]
 8004b66:	f022 0201 	bic.w	r2, r2, #1
 8004b6a:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b6c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004b6e:	2a01      	cmp	r2, #1
 8004b70:	d103      	bne.n	8004b7a <HAL_UART_IRQHandler+0x1b6>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	f022 0210 	bic.w	r2, r2, #16
 8004b78:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004b7c:	2120      	movs	r1, #32
 8004b7e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b82:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b84:	695a      	ldr	r2, [r3, #20]
 8004b86:	0655      	lsls	r5, r2, #25
 8004b88:	d512      	bpl.n	8004bb0 <HAL_UART_IRQHandler+0x1ec>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8a:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004b8c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b92:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004b94:	b160      	cbz	r0, 8004bb0 <HAL_UART_IRQHandler+0x1ec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b96:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <HAL_UART_IRQHandler+0x264>)
 8004b98:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b9a:	f7fe f987 	bl	8002eac <HAL_DMA_Abort_IT>
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	f43f af2c 	beq.w	80049fc <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ba4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004ba6:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8004ba8:	b003      	add	sp, #12
 8004baa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bae:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f7ff fe9f 	bl	80048f4 <HAL_UART_ErrorCallback>
 8004bb6:	e721      	b.n	80049fc <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bb8:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8004bba:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bbc:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8004bbe:	b289      	uxth	r1, r1
 8004bc0:	2900      	cmp	r1, #0
 8004bc2:	f43f af1b 	beq.w	80049fc <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bc6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004bc8:	1a08      	subs	r0, r1, r0
 8004bca:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 8004bcc:	2900      	cmp	r1, #0
 8004bce:	f43f af15 	beq.w	80049fc <HAL_UART_IRQHandler+0x38>
        huart->RxState = HAL_UART_STATE_READY;
 8004bd2:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bd4:	68d8      	ldr	r0, [r3, #12]
 8004bd6:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8004bda:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bdc:	6958      	ldr	r0, [r3, #20]
 8004bde:	f020 0001 	bic.w	r0, r0, #1
 8004be2:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8004be4:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be8:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bea:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bec:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bee:	f022 0210 	bic.w	r2, r2, #16
 8004bf2:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bf4:	f7ff fe88 	bl	8004908 <HAL_UARTEx_RxEventCallback>
 8004bf8:	e700      	b.n	80049fc <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bfa:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004bfe:	2a22      	cmp	r2, #34	; 0x22
 8004c00:	f47f af66 	bne.w	8004ad0 <HAL_UART_IRQHandler+0x10c>
 8004c04:	4620      	mov	r0, r4
 8004c06:	f7ff fe81 	bl	800490c <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	e760      	b.n	8004ad0 <HAL_UART_IRQHandler+0x10c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c0e:	6922      	ldr	r2, [r4, #16]
 8004c10:	2a00      	cmp	r2, #0
 8004c12:	f47f af79 	bne.w	8004b08 <HAL_UART_IRQHandler+0x144>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c16:	6a22      	ldr	r2, [r4, #32]
 8004c18:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004c1c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004c20:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c22:	6222      	str	r2, [r4, #32]
 8004c24:	e775      	b.n	8004b12 <HAL_UART_IRQHandler+0x14e>
 8004c26:	bf00      	nop
 8004c28:	080048f9 	.word	0x080048f9

08004c2c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8004c2c:	b510      	push	{r4, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004c2e:	f001 fd05 	bl	800663c <pvTimerGetTimerID>

  if (callb != NULL) {
 8004c32:	b120      	cbz	r0, 8004c3e <TimerCallback+0x12>
    callb->func (callb->arg);
 8004c34:	e9d0 3000 	ldrd	r3, r0, [r0]
  }
}
 8004c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    callb->func (callb->arg);
 8004c3c:	4718      	bx	r3
}
 8004c3e:	bd10      	pop	{r4, pc}

08004c40 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c40:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8004c44:	b983      	cbnz	r3, 8004c68 <osKernelInitialize+0x28>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c46:	f3ef 8310 	mrs	r3, PRIMASK
 8004c4a:	b96b      	cbnz	r3, 8004c68 <osKernelInitialize+0x28>
 8004c4c:	4b08      	ldr	r3, [pc, #32]	; (8004c70 <osKernelInitialize+0x30>)
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	2802      	cmp	r0, #2
 8004c52:	d003      	beq.n	8004c5c <osKernelInitialize+0x1c>
    if (KernelState == osKernelInactive) {
 8004c54:	b928      	cbnz	r0, 8004c62 <osKernelInitialize+0x22>
      KernelState = osKernelReady;
 8004c56:	2201      	movs	r2, #1
 8004c58:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c5a:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c5c:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8004c60:	b913      	cbnz	r3, 8004c68 <osKernelInitialize+0x28>
      stat = osError;
 8004c62:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004c66:	4770      	bx	lr
    stat = osErrorISR;
 8004c68:	f06f 0005 	mvn.w	r0, #5
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	20000ce0 	.word	0x20000ce0

08004c74 <osKernelStart>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c74:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8004c78:	b9c3      	cbnz	r3, 8004cac <osKernelStart+0x38>
osStatus_t osKernelStart (void) {
 8004c7a:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c7c:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 8004c80:	b98c      	cbnz	r4, 8004ca6 <osKernelStart+0x32>
 8004c82:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <osKernelStart+0x40>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	2a02      	cmp	r2, #2
 8004c88:	d007      	beq.n	8004c9a <osKernelStart+0x26>
    if (KernelState == osKernelReady) {
 8004c8a:	2a01      	cmp	r2, #1
 8004c8c:	d108      	bne.n	8004ca0 <osKernelStart+0x2c>
      KernelState = osKernelRunning;
 8004c8e:	2202      	movs	r2, #2
 8004c90:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004c92:	f000 ff23 	bl	8005adc <vTaskStartScheduler>
      stat = osOK;
 8004c96:	4620      	mov	r0, r4
}
 8004c98:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c9a:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8004c9e:	b913      	cbnz	r3, 8004ca6 <osKernelStart+0x32>
      stat = osError;
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004ca4:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8004ca6:	f06f 0005 	mvn.w	r0, #5
}
 8004caa:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8004cac:	f06f 0005 	mvn.w	r0, #5
}
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	20000ce0 	.word	0x20000ce0

08004cb8 <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  hTask = NULL;
 8004cba:	2400      	movs	r4, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004cbc:	b087      	sub	sp, #28
  hTask = NULL;
 8004cbe:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cc0:	f3ef 8505 	mrs	r5, IPSR
  if (!IS_IRQ() && (func != NULL)) {
 8004cc4:	2d00      	cmp	r5, #0
 8004cc6:	d13b      	bne.n	8004d40 <osThreadNew+0x88>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d13e      	bne.n	8004d4e <osThreadNew+0x96>
 8004cd0:	4b29      	ldr	r3, [pc, #164]	; (8004d78 <osThreadNew+0xc0>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d036      	beq.n	8004d46 <osThreadNew+0x8e>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	d038      	beq.n	8004d4e <osThreadNew+0x96>
    empty = '\0';
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f88d 3013 	strb.w	r3, [sp, #19]
    if (attr != NULL) {
 8004ce2:	b302      	cbz	r2, 8004d26 <osThreadNew+0x6e>
      if (attr->name != NULL) {
 8004ce4:	6814      	ldr	r4, [r2, #0]
 8004ce6:	2c00      	cmp	r4, #0
 8004ce8:	d039      	beq.n	8004d5e <osThreadNew+0xa6>
      if (attr->priority != osPriorityNone) {
 8004cea:	6995      	ldr	r5, [r2, #24]
 8004cec:	2d00      	cmp	r5, #0
 8004cee:	d031      	beq.n	8004d54 <osThreadNew+0x9c>
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004cf0:	1e6e      	subs	r6, r5, #1
 8004cf2:	2e37      	cmp	r6, #55	; 0x37
 8004cf4:	d824      	bhi.n	8004d40 <osThreadNew+0x88>
 8004cf6:	6853      	ldr	r3, [r2, #4]
 8004cf8:	07db      	lsls	r3, r3, #31
 8004cfa:	d421      	bmi.n	8004d40 <osThreadNew+0x88>
      if (attr->stack_size > 0U) {
 8004cfc:	6953      	ldr	r3, [r2, #20]
 8004cfe:	bb5b      	cbnz	r3, 8004d58 <osThreadNew+0xa0>
    stack = configMINIMAL_STACK_SIZE;
 8004d00:	f04f 0c40 	mov.w	ip, #64	; 0x40
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d04:	6896      	ldr	r6, [r2, #8]
 8004d06:	b36e      	cbz	r6, 8004d64 <osThreadNew+0xac>
 8004d08:	68d7      	ldr	r7, [r2, #12]
 8004d0a:	2fcb      	cmp	r7, #203	; 0xcb
 8004d0c:	d91f      	bls.n	8004d4e <osThreadNew+0x96>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d0e:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d10:	b1ea      	cbz	r2, 8004d4e <osThreadNew+0x96>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d12:	b1e3      	cbz	r3, 8004d4e <osThreadNew+0x96>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d14:	460b      	mov	r3, r1
 8004d16:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	4662      	mov	r2, ip
 8004d1e:	9500      	str	r5, [sp, #0]
 8004d20:	f000 fe5c 	bl	80059dc <xTaskCreateStatic>
 8004d24:	e00d      	b.n	8004d42 <osThreadNew+0x8a>
 8004d26:	2240      	movs	r2, #64	; 0x40
    prio  = (UBaseType_t)osPriorityNormal;
 8004d28:	2518      	movs	r5, #24
    name  = &empty;
 8004d2a:	f10d 0413 	add.w	r4, sp, #19
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4621      	mov	r1, r4
 8004d32:	ac05      	add	r4, sp, #20
 8004d34:	9500      	str	r5, [sp, #0]
 8004d36:	9401      	str	r4, [sp, #4]
 8004d38:	f000 fe8a 	bl	8005a50 <xTaskCreate>
 8004d3c:	2801      	cmp	r0, #1
 8004d3e:	d006      	beq.n	8004d4e <osThreadNew+0x96>
        return (NULL);
 8004d40:	2000      	movs	r0, #0
}
 8004d42:	b007      	add	sp, #28
 8004d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d46:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0c4      	beq.n	8004cd8 <osThreadNew+0x20>
  return ((osThreadId_t)hTask);
 8004d4e:	9805      	ldr	r0, [sp, #20]
}
 8004d50:	b007      	add	sp, #28
 8004d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d54:	2518      	movs	r5, #24
 8004d56:	e7ce      	b.n	8004cf6 <osThreadNew+0x3e>
        stack = attr->stack_size / sizeof(StackType_t);
 8004d58:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004d5c:	e7d2      	b.n	8004d04 <osThreadNew+0x4c>
    name  = &empty;
 8004d5e:	f10d 0413 	add.w	r4, sp, #19
 8004d62:	e7c2      	b.n	8004cea <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d64:	68d3      	ldr	r3, [r2, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f1      	bne.n	8004d4e <osThreadNew+0x96>
 8004d6a:	6913      	ldr	r3, [r2, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1ee      	bne.n	8004d4e <osThreadNew+0x96>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d70:	fa1f f28c 	uxth.w	r2, ip
 8004d74:	e7db      	b.n	8004d2e <osThreadNew+0x76>
 8004d76:	bf00      	nop
 8004d78:	20000ce0 	.word	0x20000ce0

08004d7c <osThreadGetPriority>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d7c:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ() || (hTask == NULL)) {
 8004d80:	b96b      	cbnz	r3, 8004d9e <osThreadGetPriority+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d82:	f3ef 8310 	mrs	r3, PRIMASK
 8004d86:	b953      	cbnz	r3, 8004d9e <osThreadGetPriority+0x22>
 8004d88:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <osThreadGetPriority+0x28>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d002      	beq.n	8004d96 <osThreadGetPriority+0x1a>
 8004d90:	b128      	cbz	r0, 8004d9e <osThreadGetPriority+0x22>
    prio = (osPriority_t)uxTaskPriorityGet (hTask);
 8004d92:	f000 be8f 	b.w	8005ab4 <uxTaskPriorityGet>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d96:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ() || (hTask == NULL)) {
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f8      	beq.n	8004d90 <osThreadGetPriority+0x14>
}
 8004d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004da2:	4770      	bx	lr
 8004da4:	20000ce0 	.word	0x20000ce0

08004da8 <osDelay>:
osStatus_t osDelay (uint32_t ticks) {
 8004da8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004daa:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8004dae:	b963      	cbnz	r3, 8004dca <osDelay+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004db0:	f3ef 8310 	mrs	r3, PRIMASK
 8004db4:	b94b      	cbnz	r3, 8004dca <osDelay+0x22>
 8004db6:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <osDelay+0x30>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d001      	beq.n	8004dc2 <osDelay+0x1a>
    if (ticks != 0U) {
 8004dbe:	b938      	cbnz	r0, 8004dd0 <osDelay+0x28>
}
 8004dc0:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dc2:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f9      	beq.n	8004dbe <osDelay+0x16>
    stat = osErrorISR;
 8004dca:	f06f 0005 	mvn.w	r0, #5
}
 8004dce:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8004dd0:	f001 f82c 	bl	8005e2c <vTaskDelay>
    stat = osOK;
 8004dd4:	2000      	movs	r0, #0
}
 8004dd6:	bd08      	pop	{r3, pc}
 8004dd8:	20000ce0 	.word	0x20000ce0

08004ddc <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dde:	461c      	mov	r4, r3
 8004de0:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004de2:	f3ef 8305 	mrs	r3, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
 8004de6:	b9db      	cbnz	r3, 8004e20 <osTimerNew+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dec:	b9c3      	cbnz	r3, 8004e20 <osTimerNew+0x44>
 8004dee:	4b1a      	ldr	r3, [pc, #104]	; (8004e58 <osTimerNew+0x7c>)
 8004df0:	4607      	mov	r7, r0
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	460e      	mov	r6, r1
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	4615      	mov	r5, r2
 8004dfa:	d014      	beq.n	8004e26 <osTimerNew+0x4a>
 8004dfc:	b187      	cbz	r7, 8004e20 <osTimerNew+0x44>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004dfe:	2008      	movs	r0, #8
 8004e00:	f001 fdca 	bl	8006998 <pvPortMalloc>

    if (callb != NULL) {
 8004e04:	4603      	mov	r3, r0
 8004e06:	b158      	cbz	r0, 8004e20 <osTimerNew+0x44>
      callb->func = func;
      callb->arg  = argument;

      if (type == osTimerOnce) {
 8004e08:	1e32      	subs	r2, r6, #0
 8004e0a:	bf18      	it	ne
 8004e0c:	2201      	movne	r2, #1
      callb->arg  = argument;
 8004e0e:	e9c0 7500 	strd	r7, r5, [r0]
      }

      mem  = -1;
      name = NULL;

      if (attr != NULL) {
 8004e12:	b18c      	cbz	r4, 8004e38 <osTimerNew+0x5c>
        if (attr->name != NULL) {
          name = attr->name;
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8004e14:	68a1      	ldr	r1, [r4, #8]
        if (attr->name != NULL) {
 8004e16:	6820      	ldr	r0, [r4, #0]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8004e18:	b151      	cbz	r1, 8004e30 <osTimerNew+0x54>
 8004e1a:	68e4      	ldr	r4, [r4, #12]
 8004e1c:	2c2f      	cmp	r4, #47	; 0x2f
 8004e1e:	d813      	bhi.n	8004e48 <osTimerNew+0x6c>
  hTimer = NULL;
 8004e20:	2000      	movs	r0, #0
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
 8004e22:	b003      	add	sp, #12
 8004e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e26:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0e6      	beq.n	8004dfc <osTimerNew+0x20>
 8004e2e:	e7f7      	b.n	8004e20 <osTimerNew+0x44>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e30:	68e1      	ldr	r1, [r4, #12]
 8004e32:	2900      	cmp	r1, #0
 8004e34:	d1f4      	bne.n	8004e20 <osTimerNew+0x44>
 8004e36:	4604      	mov	r4, r0
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004e38:	4d08      	ldr	r5, [pc, #32]	; (8004e5c <osTimerNew+0x80>)
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	9500      	str	r5, [sp, #0]
 8004e40:	f001 fa00 	bl	8006244 <xTimerCreate>
}
 8004e44:	b003      	add	sp, #12
 8004e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004e48:	4c04      	ldr	r4, [pc, #16]	; (8004e5c <osTimerNew+0x80>)
 8004e4a:	e9cd 4100 	strd	r4, r1, [sp]
 8004e4e:	2101      	movs	r1, #1
 8004e50:	f001 fa1e 	bl	8006290 <xTimerCreateStatic>
 8004e54:	e7e5      	b.n	8004e22 <osTimerNew+0x46>
 8004e56:	bf00      	nop
 8004e58:	20000ce0 	.word	0x20000ce0
 8004e5c:	08004c2d 	.word	0x08004c2d

08004e60 <osTimerStart>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e60:	f3ef 8305 	mrs	r3, IPSR

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e64:	b9db      	cbnz	r3, 8004e9e <osTimerStart+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e66:	f3ef 8310 	mrs	r3, PRIMASK
 8004e6a:	b9c3      	cbnz	r3, 8004e9e <osTimerStart+0x3e>
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <osTimerStart+0x4c>)
 8004e6e:	460a      	mov	r2, r1
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d00f      	beq.n	8004e96 <osTimerStart+0x36>
    stat = osErrorISR;
  }
  else if (hTimer == NULL) {
 8004e76:	b1a8      	cbz	r0, 8004ea4 <osTimerStart+0x44>
    stat = osErrorParameter;
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8004e78:	2300      	movs	r3, #0
osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8004e7a:	b500      	push	{lr}
 8004e7c:	b083      	sub	sp, #12
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8004e7e:	2104      	movs	r1, #4
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	f001 fa45 	bl	8006310 <xTimerGenericCommand>
      stat = osOK;
    } else {
      stat = osErrorResource;
 8004e86:	2801      	cmp	r0, #1
 8004e88:	bf0c      	ite	eq
 8004e8a:	2000      	moveq	r0, #0
 8004e8c:	f06f 0002 	mvnne.w	r0, #2
    }
  }

  return (stat);
}
 8004e90:	b003      	add	sp, #12
 8004e92:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e96:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0eb      	beq.n	8004e76 <osTimerStart+0x16>
    stat = osErrorISR;
 8004e9e:	f06f 0005 	mvn.w	r0, #5
 8004ea2:	4770      	bx	lr
    stat = osErrorParameter;
 8004ea4:	f06f 0003 	mvn.w	r0, #3
}
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	20000ce0 	.word	0x20000ce0

08004eb0 <osMessageQueueNew>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eb0:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004eb4:	bb5b      	cbnz	r3, 8004f0e <osMessageQueueNew+0x5e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eba:	bb43      	cbnz	r3, 8004f0e <osMessageQueueNew+0x5e>
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004ebc:	b530      	push	{r4, r5, lr}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004ebe:	4b1f      	ldr	r3, [pc, #124]	; (8004f3c <osMessageQueueNew+0x8c>)
 8004ec0:	4614      	mov	r4, r2
 8004ec2:	681b      	ldr	r3, [r3, #0]
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004ec4:	b085      	sub	sp, #20
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d01a      	beq.n	8004f00 <osMessageQueueNew+0x50>
 8004eca:	b1e8      	cbz	r0, 8004f08 <osMessageQueueNew+0x58>
 8004ecc:	b1e1      	cbz	r1, 8004f08 <osMessageQueueNew+0x58>
    mem = -1;

    if (attr != NULL) {
 8004ece:	b304      	cbz	r4, 8004f12 <osMessageQueueNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004ed0:	68a3      	ldr	r3, [r4, #8]
 8004ed2:	b323      	cbz	r3, 8004f1e <osMessageQueueNew+0x6e>
 8004ed4:	68e2      	ldr	r2, [r4, #12]
 8004ed6:	2a4f      	cmp	r2, #79	; 0x4f
 8004ed8:	d916      	bls.n	8004f08 <osMessageQueueNew+0x58>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004eda:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004edc:	b1a2      	cbz	r2, 8004f08 <osMessageQueueNew+0x58>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004ede:	fb01 fc00 	mul.w	ip, r1, r0
 8004ee2:	6965      	ldr	r5, [r4, #20]
 8004ee4:	4565      	cmp	r5, ip
 8004ee6:	d30f      	bcc.n	8004f08 <osMessageQueueNew+0x58>
    else {
      mem = 0;
    }

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004ee8:	2500      	movs	r5, #0
 8004eea:	9500      	str	r5, [sp, #0]
 8004eec:	f000 f950 	bl	8005190 <xQueueGenericCreateStatic>
        hQueue = xQueueCreate (msg_count, msg_size);
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004ef0:	b150      	cbz	r0, 8004f08 <osMessageQueueNew+0x58>
      if (attr != NULL) {
        name = attr->name;
 8004ef2:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	9003      	str	r0, [sp, #12]
 8004ef8:	f000 fbbc 	bl	8005674 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004efc:	9803      	ldr	r0, [sp, #12]
 8004efe:	e004      	b.n	8004f0a <osMessageQueueNew+0x5a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f00:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0e0      	beq.n	8004eca <osMessageQueueNew+0x1a>
  hQueue = NULL;
 8004f08:	2000      	movs	r0, #0
}
 8004f0a:	b005      	add	sp, #20
 8004f0c:	bd30      	pop	{r4, r5, pc}
  hQueue = NULL;
 8004f0e:	2000      	movs	r0, #0
}
 8004f10:	4770      	bx	lr
        hQueue = xQueueCreate (msg_count, msg_size);
 8004f12:	4622      	mov	r2, r4
 8004f14:	f000 f994 	bl	8005240 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	d0f5      	beq.n	8004f08 <osMessageQueueNew+0x58>
 8004f1c:	e7ea      	b.n	8004ef4 <osMessageQueueNew+0x44>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004f1e:	68e3      	ldr	r3, [r4, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f1      	bne.n	8004f08 <osMessageQueueNew+0x58>
 8004f24:	6923      	ldr	r3, [r4, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1ee      	bne.n	8004f08 <osMessageQueueNew+0x58>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004f2a:	6962      	ldr	r2, [r4, #20]
 8004f2c:	2a00      	cmp	r2, #0
 8004f2e:	d1eb      	bne.n	8004f08 <osMessageQueueNew+0x58>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004f30:	f000 f986 	bl	8005240 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d1dc      	bne.n	8004ef2 <osMessageQueueNew+0x42>
 8004f38:	e7e6      	b.n	8004f08 <osMessageQueueNew+0x58>
 8004f3a:	bf00      	nop
 8004f3c:	20000ce0 	.word	0x20000ce0

08004f40 <vApplicationGetIdleTaskMemory>:
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f40:	2340      	movs	r3, #64	; 0x40
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f42:	b430      	push	{r4, r5}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f44:	4d03      	ldr	r5, [pc, #12]	; (8004f54 <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f46:	4c04      	ldr	r4, [pc, #16]	; (8004f58 <vApplicationGetIdleTaskMemory+0x18>)
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f48:	6005      	str	r5, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f4a:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f4c:	6013      	str	r3, [r2, #0]
}
 8004f4e:	bc30      	pop	{r4, r5}
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000c14 	.word	0x20000c14
 8004f58:	20000b14 	.word	0x20000b14

08004f5c <vApplicationGetTimerTaskMemory>:
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f5c:	2380      	movs	r3, #128	; 0x80
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f5e:	b430      	push	{r4, r5}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f60:	4d03      	ldr	r5, [pc, #12]	; (8004f70 <vApplicationGetTimerTaskMemory+0x14>)
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f62:	4c04      	ldr	r4, [pc, #16]	; (8004f74 <vApplicationGetTimerTaskMemory+0x18>)
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f64:	6005      	str	r5, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f66:	600c      	str	r4, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f68:	6013      	str	r3, [r2, #0]
}
 8004f6a:	bc30      	pop	{r4, r5}
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	20000ee4 	.word	0x20000ee4
 8004f74:	20000ce4 	.word	0x20000ce4

08004f78 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f78:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f7c:	2200      	movs	r2, #0
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f7e:	f100 0308 	add.w	r3, r0, #8
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f82:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f86:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f8a:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop

08004f90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004f90:	2300      	movs	r3, #0
 8004f92:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop

08004f98 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f98:	6843      	ldr	r3, [r0, #4]
{
 8004f9a:	b410      	push	{r4}

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f9c:	689c      	ldr	r4, [r3, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004f9e:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fa0:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fa2:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8004fa4:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 8004fa6:	604b      	str	r3, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fa8:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004faa:	6099      	str	r1, [r3, #8]
}
 8004fac:	bc10      	pop	{r4}
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004fae:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004fb0:	6002      	str	r2, [r0, #0]
}
 8004fb2:	4770      	bx	lr

08004fb4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fb4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fb6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fb8:	1c6b      	adds	r3, r5, #1
 8004fba:	d010      	beq.n	8004fde <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fbc:	f100 0308 	add.w	r3, r0, #8
 8004fc0:	461c      	mov	r4, r3
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	42aa      	cmp	r2, r5
 8004fc8:	d9fa      	bls.n	8004fc0 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004fca:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fcc:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8004fce:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fd0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fd2:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fd4:	6061      	str	r1, [r4, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004fd6:	6108      	str	r0, [r1, #16]
}
 8004fd8:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 8004fda:	6002      	str	r2, [r0, #0]
}
 8004fdc:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fde:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fe0:	6863      	ldr	r3, [r4, #4]
 8004fe2:	e7f2      	b.n	8004fca <vListInsert+0x16>

08004fe4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004fe4:	6903      	ldr	r3, [r0, #16]
{
 8004fe6:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fe8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fec:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fee:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ff0:	6051      	str	r1, [r2, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004ff2:	2100      	movs	r1, #0
	if( pxList->pxIndex == pxItemToRemove )
 8004ff4:	4284      	cmp	r4, r0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ff6:	bf08      	it	eq
 8004ff8:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8004ffa:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pvContainer = NULL;
 8004ffc:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004ffe:	3a01      	subs	r2, #1
 8005000:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005002:	6818      	ldr	r0, [r3, #0]
}
 8005004:	bc10      	pop	{r4}
 8005006:	4770      	bx	lr

08005008 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800500c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800500e:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005010:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005012:	b92a      	cbnz	r2, 8005020 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005014:	6805      	ldr	r5, [r0, #0]
 8005016:	b34d      	cbz	r5, 800506c <prvCopyDataToQueue+0x64>
BaseType_t xReturn = pdFALSE;
 8005018:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800501a:	3601      	adds	r6, #1
 800501c:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800501e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8005020:	b97d      	cbnz	r5, 8005042 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005022:	6880      	ldr	r0, [r0, #8]
 8005024:	f001 fdb0 	bl	8006b88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005028:	68a3      	ldr	r3, [r4, #8]
 800502a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800502c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800502e:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005030:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005032:	4293      	cmp	r3, r2
 8005034:	d3f0      	bcc.n	8005018 <prvCopyDataToQueue+0x10>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005036:	6823      	ldr	r3, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005038:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800503a:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800503c:	60a3      	str	r3, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800503e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005040:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005042:	68c0      	ldr	r0, [r0, #12]
 8005044:	f001 fda0 	bl	8006b88 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005048:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800504a:	68e3      	ldr	r3, [r4, #12]
 800504c:	4251      	negs	r1, r2
 800504e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005050:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005052:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005054:	4293      	cmp	r3, r2
 8005056:	d202      	bcs.n	800505e <prvCopyDataToQueue+0x56>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005058:	6863      	ldr	r3, [r4, #4]
 800505a:	440b      	add	r3, r1
 800505c:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800505e:	2d02      	cmp	r5, #2
 8005060:	d1da      	bne.n	8005018 <prvCopyDataToQueue+0x10>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005062:	2e01      	cmp	r6, #1
 8005064:	bf38      	it	cc
 8005066:	2601      	movcc	r6, #1
BaseType_t xReturn = pdFALSE;
 8005068:	2000      	movs	r0, #0
 800506a:	e7d7      	b.n	800501c <prvCopyDataToQueue+0x14>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800506c:	6840      	ldr	r0, [r0, #4]
 800506e:	f001 f83d 	bl	80060ec <xTaskPriorityDisinherit>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005072:	3601      	adds	r6, #1
				pxQueue->pxMutexHolder = NULL;
 8005074:	6065      	str	r5, [r4, #4]
 8005076:	e7d1      	b.n	800501c <prvCopyDataToQueue+0x14>

08005078 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800507c:	f001 fb4a 	bl	8006714 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005080:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8005084:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005086:	2c00      	cmp	r4, #0
 8005088:	dd14      	ble.n	80050b4 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800508a:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800508e:	e003      	b.n	8005098 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005090:	1e63      	subs	r3, r4, #1
 8005092:	b2da      	uxtb	r2, r3
 8005094:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005096:	b16a      	cbz	r2, 80050b4 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005098:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800509a:	b15b      	cbz	r3, 80050b4 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800509c:	4630      	mov	r0, r6
 800509e:	f000 ff77 	bl	8005f90 <xTaskRemoveFromEventList>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d0f4      	beq.n	8005090 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80050a6:	f001 f80b 	bl	80060c0 <vTaskMissedYield>
			--cTxLock;
 80050aa:	1e63      	subs	r3, r4, #1
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050b0:	2a00      	cmp	r2, #0
 80050b2:	d1f1      	bne.n	8005098 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050b4:	23ff      	movs	r3, #255	; 0xff
 80050b6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80050ba:	f001 fb4d 	bl	8006758 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050be:	f001 fb29 	bl	8006714 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050c2:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 80050c6:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050c8:	2c00      	cmp	r4, #0
 80050ca:	dd14      	ble.n	80050f6 <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050cc:	f105 0610 	add.w	r6, r5, #16
 80050d0:	e003      	b.n	80050da <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050d2:	1e63      	subs	r3, r4, #1
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050d8:	b16a      	cbz	r2, 80050f6 <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050da:	692b      	ldr	r3, [r5, #16]
 80050dc:	b15b      	cbz	r3, 80050f6 <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050de:	4630      	mov	r0, r6
 80050e0:	f000 ff56 	bl	8005f90 <xTaskRemoveFromEventList>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	d0f4      	beq.n	80050d2 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 80050e8:	f000 ffea 	bl	80060c0 <vTaskMissedYield>
				--cRxLock;
 80050ec:	1e63      	subs	r3, r4, #1
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050f2:	2a00      	cmp	r2, #0
 80050f4:	d1f1      	bne.n	80050da <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050f6:	23ff      	movs	r3, #255	; 0xff
 80050f8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80050fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8005100:	f001 bb2a 	b.w	8006758 <vPortExitCritical>

08005104 <xQueueGenericReset>:
{
 8005104:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8005106:	b1e0      	cbz	r0, 8005142 <xQueueGenericReset+0x3e>
 8005108:	4604      	mov	r4, r0
 800510a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800510c:	f001 fb02 	bl	8006714 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005110:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800511a:	1a59      	subs	r1, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800511c:	4413      	add	r3, r2
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800511e:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005120:	6063      	str	r3, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005122:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 8005124:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005126:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005128:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800512a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800512c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005130:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8005134:	b975      	cbnz	r5, 8005154 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005136:	6923      	ldr	r3, [r4, #16]
 8005138:	b9c3      	cbnz	r3, 800516c <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 800513a:	f001 fb0d 	bl	8006758 <vPortExitCritical>
}
 800513e:	2001      	movs	r0, #1
 8005140:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005152:	e7fe      	b.n	8005152 <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005154:	f104 0010 	add.w	r0, r4, #16
 8005158:	f7ff ff0e 	bl	8004f78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800515c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005160:	f7ff ff0a 	bl	8004f78 <vListInitialise>
	taskEXIT_CRITICAL();
 8005164:	f001 faf8 	bl	8006758 <vPortExitCritical>
}
 8005168:	2001      	movs	r0, #1
 800516a:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800516c:	f104 0010 	add.w	r0, r4, #16
 8005170:	f000 ff0e 	bl	8005f90 <xTaskRemoveFromEventList>
 8005174:	2800      	cmp	r0, #0
 8005176:	d0e0      	beq.n	800513a <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8005178:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800517c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005180:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	e7d5      	b.n	800513a <xQueueGenericReset+0x36>
 800518e:	bf00      	nop

08005190 <xQueueGenericCreateStatic>:
	{
 8005190:	b530      	push	{r4, r5, lr}
 8005192:	b085      	sub	sp, #20
 8005194:	f89d 4020 	ldrb.w	r4, [sp, #32]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005198:	b940      	cbnz	r0, 80051ac <xQueueGenericCreateStatic+0x1c>
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	e7fe      	b.n	80051aa <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 80051ac:	b183      	cbz	r3, 80051d0 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051ae:	460d      	mov	r5, r1
 80051b0:	b302      	cbz	r2, 80051f4 <xQueueGenericCreateStatic+0x64>
 80051b2:	b1b1      	cbz	r1, 80051e2 <xQueueGenericCreateStatic+0x52>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051b4:	2150      	movs	r1, #80	; 0x50
 80051b6:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051b8:	9903      	ldr	r1, [sp, #12]
 80051ba:	2950      	cmp	r1, #80	; 0x50
 80051bc:	d025      	beq.n	800520a <xQueueGenericCreateStatic+0x7a>
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	e7fe      	b.n	80051ce <xQueueGenericCreateStatic+0x3e>
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80051e0:	e7fe      	b.n	80051e0 <xQueueGenericCreateStatic+0x50>
 80051e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051f2:	e7fe      	b.n	80051f2 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051f4:	b9d1      	cbnz	r1, 800522c <xQueueGenericCreateStatic+0x9c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051f6:	2250      	movs	r2, #80	; 0x50
 80051f8:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051fa:	9a03      	ldr	r2, [sp, #12]
 80051fc:	2a50      	cmp	r2, #80	; 0x50
 80051fe:	d1de      	bne.n	80051be <xQueueGenericCreateStatic+0x2e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005200:	2101      	movs	r1, #1
 8005202:	461a      	mov	r2, r3
 8005204:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005208:	e002      	b.n	8005210 <xQueueGenericCreateStatic+0x80>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800520a:	2101      	movs	r1, #1
 800520c:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8005210:	e9c3 050f 	strd	r0, r5, [r3, #60]	; 0x3c
 8005214:	601a      	str	r2, [r3, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005216:	2101      	movs	r1, #1
 8005218:	4618      	mov	r0, r3
 800521a:	9301      	str	r3, [sp, #4]
 800521c:	f7ff ff72 	bl	8005104 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005220:	9b01      	ldr	r3, [sp, #4]
	}
 8005222:	4618      	mov	r0, r3
		pxNewQueue->ucQueueType = ucQueueType;
 8005224:	f883 404c 	strb.w	r4, [r3, #76]	; 0x4c
	}
 8005228:	b005      	add	sp, #20
 800522a:	bd30      	pop	{r4, r5, pc}
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800523c:	e7fe      	b.n	800523c <xQueueGenericCreateStatic+0xac>
 800523e:	bf00      	nop

08005240 <xQueueGenericCreate>:
	{
 8005240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005242:	b940      	cbnz	r0, 8005256 <xQueueGenericCreate+0x16>
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	e7fe      	b.n	8005254 <xQueueGenericCreate+0x14>
 8005256:	4605      	mov	r5, r0
 8005258:	460e      	mov	r6, r1
 800525a:	4617      	mov	r7, r2
		if( uxItemSize == ( UBaseType_t ) 0 )
 800525c:	b989      	cbnz	r1, 8005282 <xQueueGenericCreate+0x42>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800525e:	2050      	movs	r0, #80	; 0x50
 8005260:	f001 fb9a 	bl	8006998 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005264:	4604      	mov	r4, r0
 8005266:	b1d0      	cbz	r0, 800529e <xQueueGenericCreate+0x5e>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005268:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800526c:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800526e:	2101      	movs	r1, #1
 8005270:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8005272:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005276:	f7ff ff45 	bl	8005104 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800527a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800527e:	4620      	mov	r0, r4
 8005280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005282:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005286:	3050      	adds	r0, #80	; 0x50
 8005288:	f001 fb86 	bl	8006998 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800528c:	4604      	mov	r4, r0
 800528e:	b130      	cbz	r0, 800529e <xQueueGenericCreate+0x5e>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005290:	2300      	movs	r3, #0
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005292:	f100 0250 	add.w	r2, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005296:	6002      	str	r2, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005298:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800529c:	e7e7      	b.n	800526e <xQueueGenericCreate+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800529e:	2400      	movs	r4, #0
	}
 80052a0:	4620      	mov	r0, r4
 80052a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080052a4 <xQueueGenericSend>:
{
 80052a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052a8:	b085      	sub	sp, #20
 80052aa:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80052ac:	2800      	cmp	r0, #0
 80052ae:	d075      	beq.n	800539c <xQueueGenericSend+0xf8>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052b0:	4604      	mov	r4, r0
 80052b2:	4688      	mov	r8, r1
 80052b4:	461e      	mov	r6, r3
 80052b6:	2900      	cmp	r1, #0
 80052b8:	d064      	beq.n	8005384 <xQueueGenericSend+0xe0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052ba:	2e02      	cmp	r6, #2
 80052bc:	d10b      	bne.n	80052d6 <xQueueGenericSend+0x32>
 80052be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d008      	beq.n	80052d6 <xQueueGenericSend+0x32>
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	e7fe      	b.n	80052d4 <xQueueGenericSend+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052d6:	f000 fef9 	bl	80060cc <xTaskGetSchedulerState>
 80052da:	4605      	mov	r5, r0
 80052dc:	2800      	cmp	r0, #0
 80052de:	d066      	beq.n	80053ae <xQueueGenericSend+0x10a>
 80052e0:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80052e2:	f04f 0900 	mov.w	r9, #0
 80052e6:	e007      	b.n	80052f8 <xQueueGenericSend+0x54>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80052e8:	f001 fa36 	bl	8006758 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80052ec:	4620      	mov	r0, r4
 80052ee:	f7ff fec3 	bl	8005078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052f2:	f000 fd8b 	bl	8005e0c <xTaskResumeAll>
 80052f6:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 80052f8:	f001 fa0c 	bl	8006714 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80052fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005300:	429a      	cmp	r2, r3
 8005302:	d364      	bcc.n	80053ce <xQueueGenericSend+0x12a>
 8005304:	2e02      	cmp	r6, #2
 8005306:	d062      	beq.n	80053ce <xQueueGenericSend+0x12a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005308:	9f01      	ldr	r7, [sp, #4]
 800530a:	2f00      	cmp	r7, #0
 800530c:	d077      	beq.n	80053fe <xQueueGenericSend+0x15a>
				else if( xEntryTimeSet == pdFALSE )
 800530e:	2d00      	cmp	r5, #0
 8005310:	d059      	beq.n	80053c6 <xQueueGenericSend+0x122>
		taskEXIT_CRITICAL();
 8005312:	f001 fa21 	bl	8006758 <vPortExitCritical>
		vTaskSuspendAll();
 8005316:	f000 fc31 	bl	8005b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800531a:	f001 f9fb 	bl	8006714 <vPortEnterCritical>
 800531e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005322:	2bff      	cmp	r3, #255	; 0xff
 8005324:	bf08      	it	eq
 8005326:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 800532a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800532e:	2bff      	cmp	r3, #255	; 0xff
 8005330:	bf08      	it	eq
 8005332:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8005336:	f001 fa0f 	bl	8006758 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800533a:	a901      	add	r1, sp, #4
 800533c:	a802      	add	r0, sp, #8
 800533e:	f000 fe79 	bl	8006034 <xTaskCheckForTimeOut>
 8005342:	2800      	cmp	r0, #0
 8005344:	d15f      	bne.n	8005406 <xQueueGenericSend+0x162>
	taskENTER_CRITICAL();
 8005346:	f001 f9e5 	bl	8006714 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800534a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800534c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800534e:	429a      	cmp	r2, r3
 8005350:	d1ca      	bne.n	80052e8 <xQueueGenericSend+0x44>
	taskEXIT_CRITICAL();
 8005352:	f001 fa01 	bl	8006758 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005356:	9901      	ldr	r1, [sp, #4]
 8005358:	f104 0010 	add.w	r0, r4, #16
 800535c:	f000 fdde 	bl	8005f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005360:	4620      	mov	r0, r4
 8005362:	f7ff fe89 	bl	8005078 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005366:	f000 fd51 	bl	8005e0c <xTaskResumeAll>
 800536a:	2800      	cmp	r0, #0
 800536c:	d1c3      	bne.n	80052f6 <xQueueGenericSend+0x52>
					portYIELD_WITHIN_API();
 800536e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005376:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	e7b8      	b.n	80052f6 <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005384:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	d097      	beq.n	80052ba <xQueueGenericSend+0x16>
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	e7fe      	b.n	800539a <xQueueGenericSend+0xf6>
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80053ac:	e7fe      	b.n	80053ac <xQueueGenericSend+0x108>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053ae:	9b01      	ldr	r3, [sp, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d096      	beq.n	80052e2 <xQueueGenericSend+0x3e>
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	e7fe      	b.n	80053c4 <xQueueGenericSend+0x120>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053c6:	a802      	add	r0, sp, #8
 80053c8:	f000 fe28 	bl	800601c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053cc:	e7a1      	b.n	8005312 <xQueueGenericSend+0x6e>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053ce:	4632      	mov	r2, r6
 80053d0:	4641      	mov	r1, r8
 80053d2:	4620      	mov	r0, r4
 80053d4:	f7ff fe18 	bl	8005008 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053da:	b9db      	cbnz	r3, 8005414 <xQueueGenericSend+0x170>
					else if( xYieldRequired != pdFALSE )
 80053dc:	b148      	cbz	r0, 80053f2 <xQueueGenericSend+0x14e>
						queueYIELD_IF_USING_PREEMPTION();
 80053de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80053e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80053f2:	f001 f9b1 	bl	8006758 <vPortExitCritical>
				return pdPASS;
 80053f6:	2001      	movs	r0, #1
}
 80053f8:	b005      	add	sp, #20
 80053fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 80053fe:	f001 f9ab 	bl	8006758 <vPortExitCritical>
					return errQUEUE_FULL;
 8005402:	4638      	mov	r0, r7
 8005404:	e7f8      	b.n	80053f8 <xQueueGenericSend+0x154>
			prvUnlockQueue( pxQueue );
 8005406:	4620      	mov	r0, r4
 8005408:	f7ff fe36 	bl	8005078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800540c:	f000 fcfe 	bl	8005e0c <xTaskResumeAll>
			return errQUEUE_FULL;
 8005410:	2000      	movs	r0, #0
 8005412:	e7f1      	b.n	80053f8 <xQueueGenericSend+0x154>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005414:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005418:	f000 fdba 	bl	8005f90 <xTaskRemoveFromEventList>
 800541c:	2800      	cmp	r0, #0
 800541e:	d0e8      	beq.n	80053f2 <xQueueGenericSend+0x14e>
 8005420:	e7dd      	b.n	80053de <xQueueGenericSend+0x13a>
 8005422:	bf00      	nop

08005424 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8005424:	2800      	cmp	r0, #0
 8005426:	d04a      	beq.n	80054be <xQueueGenericSendFromISR+0x9a>
{
 8005428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800542c:	4604      	mov	r4, r0
 800542e:	460e      	mov	r6, r1
 8005430:	4617      	mov	r7, r2
 8005432:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005434:	b321      	cbz	r1, 8005480 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005436:	2d02      	cmp	r5, #2
 8005438:	d10b      	bne.n	8005452 <xQueueGenericSendFromISR+0x2e>
 800543a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800543c:	2b01      	cmp	r3, #1
 800543e:	d008      	beq.n	8005452 <xQueueGenericSendFromISR+0x2e>
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	e7fe      	b.n	8005450 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005452:	f001 fa43 	bl	80068dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005456:	f3ef 8811 	mrs	r8, BASEPRI
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800546a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800546c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800546e:	429a      	cmp	r2, r3
 8005470:	d312      	bcc.n	8005498 <xQueueGenericSendFromISR+0x74>
 8005472:	2d02      	cmp	r5, #2
 8005474:	d010      	beq.n	8005498 <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
 8005476:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005478:	f388 8811 	msr	BASEPRI, r8
}
 800547c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005480:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0d7      	beq.n	8005436 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	e7fe      	b.n	8005496 <xQueueGenericSendFromISR+0x72>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005498:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 800549a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800549e:	4631      	mov	r1, r6
 80054a0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80054a2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054a4:	f7ff fdb0 	bl	8005008 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80054a8:	1c6b      	adds	r3, r5, #1
 80054aa:	d011      	beq.n	80054d0 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054ac:	1c6b      	adds	r3, r5, #1
 80054ae:	b25b      	sxtb	r3, r3
			xReturn = pdPASS;
 80054b0:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 80054b6:	f388 8811 	msr	BASEPRI, r8
}
 80054ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80054ce:	e7fe      	b.n	80054ce <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054d2:	b90b      	cbnz	r3, 80054d8 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 80054d4:	2001      	movs	r0, #1
 80054d6:	e7cf      	b.n	8005478 <xQueueGenericSendFromISR+0x54>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80054dc:	f000 fd58 	bl	8005f90 <xTaskRemoveFromEventList>
 80054e0:	2800      	cmp	r0, #0
 80054e2:	d0f7      	beq.n	80054d4 <xQueueGenericSendFromISR+0xb0>
							if( pxHigherPriorityTaskWoken != NULL )
 80054e4:	2f00      	cmp	r7, #0
 80054e6:	d0f5      	beq.n	80054d4 <xQueueGenericSendFromISR+0xb0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054e8:	2301      	movs	r3, #1
			xReturn = pdPASS;
 80054ea:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054ec:	603b      	str	r3, [r7, #0]
 80054ee:	e7c3      	b.n	8005478 <xQueueGenericSendFromISR+0x54>

080054f0 <xQueueReceive>:
{
 80054f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054f4:	b085      	sub	sp, #20
 80054f6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80054f8:	2800      	cmp	r0, #0
 80054fa:	f000 80a1 	beq.w	8005640 <xQueueReceive+0x150>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054fe:	4604      	mov	r4, r0
 8005500:	460d      	mov	r5, r1
 8005502:	2900      	cmp	r1, #0
 8005504:	d047      	beq.n	8005596 <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005506:	f000 fde1 	bl	80060cc <xTaskGetSchedulerState>
 800550a:	2800      	cmp	r0, #0
 800550c:	d04f      	beq.n	80055ae <xQueueReceive+0xbe>
		taskENTER_CRITICAL();
 800550e:	f001 f901 	bl	8006714 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005512:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005514:	2e00      	cmp	r6, #0
 8005516:	d167      	bne.n	80055e8 <xQueueReceive+0xf8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005518:	9b01      	ldr	r3, [sp, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d035      	beq.n	800558a <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800551e:	a802      	add	r0, sp, #8
 8005520:	f000 fd7c 	bl	800601c <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 8005524:	4637      	mov	r7, r6
					portYIELD_WITHIN_API();
 8005526:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800552a:	f104 0824 	add.w	r8, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 800552e:	f001 f913 	bl	8006758 <vPortExitCritical>
		vTaskSuspendAll();
 8005532:	f000 fb23 	bl	8005b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005536:	f001 f8ed 	bl	8006714 <vPortEnterCritical>
 800553a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800553e:	2bff      	cmp	r3, #255	; 0xff
 8005540:	bf08      	it	eq
 8005542:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8005546:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800554a:	2bff      	cmp	r3, #255	; 0xff
 800554c:	bf08      	it	eq
 800554e:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8005552:	f001 f901 	bl	8006758 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005556:	a901      	add	r1, sp, #4
 8005558:	a802      	add	r0, sp, #8
 800555a:	f000 fd6b 	bl	8006034 <xTaskCheckForTimeOut>
 800555e:	2800      	cmp	r0, #0
 8005560:	d131      	bne.n	80055c6 <xQueueReceive+0xd6>
	taskENTER_CRITICAL();
 8005562:	f001 f8d7 	bl	8006714 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005566:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005568:	2b00      	cmp	r3, #0
 800556a:	d053      	beq.n	8005614 <xQueueReceive+0x124>
	taskEXIT_CRITICAL();
 800556c:	f001 f8f4 	bl	8006758 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005570:	4620      	mov	r0, r4
 8005572:	f7ff fd81 	bl	8005078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005576:	f000 fc49 	bl	8005e0c <xTaskResumeAll>
		taskENTER_CRITICAL();
 800557a:	f001 f8cb 	bl	8006714 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800557e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005580:	2e00      	cmp	r6, #0
 8005582:	d131      	bne.n	80055e8 <xQueueReceive+0xf8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005584:	9b01      	ldr	r3, [sp, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1d1      	bne.n	800552e <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 800558a:	f001 f8e5 	bl	8006758 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800558e:	2000      	movs	r0, #0
}
 8005590:	b005      	add	sp, #20
 8005592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005596:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0b4      	beq.n	8005506 <xQueueReceive+0x16>
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	e7fe      	b.n	80055ac <xQueueReceive+0xbc>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055ae:	9b01      	ldr	r3, [sp, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0ac      	beq.n	800550e <xQueueReceive+0x1e>
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	e7fe      	b.n	80055c4 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 80055c6:	4620      	mov	r0, r4
 80055c8:	f7ff fd56 	bl	8005078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055cc:	f000 fc1e 	bl	8005e0c <xTaskResumeAll>
	taskENTER_CRITICAL();
 80055d0:	f001 f8a0 	bl	8006714 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0d7      	beq.n	800558a <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 80055da:	f001 f8bd 	bl	8006758 <vPortExitCritical>
		taskENTER_CRITICAL();
 80055de:	f001 f899 	bl	8006714 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055e2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055e4:	2e00      	cmp	r6, #0
 80055e6:	d0cd      	beq.n	8005584 <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80055ea:	b15a      	cbz	r2, 8005604 <xQueueReceive+0x114>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80055ec:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055ee:	6863      	ldr	r3, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80055f0:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055f2:	4299      	cmp	r1, r3
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80055f4:	60e1      	str	r1, [r4, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80055f6:	bf28      	it	cs
 80055f8:	6821      	ldrcs	r1, [r4, #0]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80055fa:	4628      	mov	r0, r5
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80055fc:	bf28      	it	cs
 80055fe:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005600:	f001 fac2 	bl	8006b88 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005604:	3e01      	subs	r6, #1
 8005606:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005608:	6923      	ldr	r3, [r4, #16]
 800560a:	bb13      	cbnz	r3, 8005652 <xQueueReceive+0x162>
				taskEXIT_CRITICAL();
 800560c:	f001 f8a4 	bl	8006758 <vPortExitCritical>
				return pdPASS;
 8005610:	2001      	movs	r0, #1
 8005612:	e7bd      	b.n	8005590 <xQueueReceive+0xa0>
	taskEXIT_CRITICAL();
 8005614:	f001 f8a0 	bl	8006758 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005618:	4640      	mov	r0, r8
 800561a:	9901      	ldr	r1, [sp, #4]
 800561c:	f000 fc7e 	bl	8005f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005620:	4620      	mov	r0, r4
 8005622:	f7ff fd29 	bl	8005078 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005626:	f000 fbf1 	bl	8005e0c <xTaskResumeAll>
 800562a:	2800      	cmp	r0, #0
 800562c:	d1d7      	bne.n	80055de <xQueueReceive+0xee>
					portYIELD_WITHIN_API();
 800562e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005632:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 800563e:	e7ce      	b.n	80055de <xQueueReceive+0xee>
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005650:	e7fe      	b.n	8005650 <xQueueReceive+0x160>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005652:	f104 0010 	add.w	r0, r4, #16
 8005656:	f000 fc9b 	bl	8005f90 <xTaskRemoveFromEventList>
 800565a:	2800      	cmp	r0, #0
 800565c:	d0d6      	beq.n	800560c <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 800565e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005666:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	e7cb      	b.n	800560c <xQueueReceive+0x11c>

08005674 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005674:	2300      	movs	r3, #0
	{
 8005676:	b410      	push	{r4}
 8005678:	4c07      	ldr	r4, [pc, #28]	; (8005698 <vQueueAddToRegistry+0x24>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800567a:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 800567e:	b122      	cbz	r2, 800568a <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005680:	3301      	adds	r3, #1
 8005682:	2b0a      	cmp	r3, #10
 8005684:	d1f9      	bne.n	800567a <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005686:	bc10      	pop	{r4}
 8005688:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 800568a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800568e:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005692:	6050      	str	r0, [r2, #4]
	}
 8005694:	bc10      	pop	{r4}
 8005696:	4770      	bx	lr
 8005698:	20000fb0 	.word	0x20000fb0

0800569c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800569c:	b570      	push	{r4, r5, r6, lr}
 800569e:	4604      	mov	r4, r0
 80056a0:	460e      	mov	r6, r1
 80056a2:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056a4:	f001 f836 	bl	8006714 <vPortEnterCritical>
 80056a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80056ac:	2bff      	cmp	r3, #255	; 0xff
 80056ae:	bf04      	itt	eq
 80056b0:	2300      	moveq	r3, #0
 80056b2:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80056b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80056ba:	2bff      	cmp	r3, #255	; 0xff
 80056bc:	bf04      	itt	eq
 80056be:	2300      	moveq	r3, #0
 80056c0:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80056c4:	f001 f848 	bl	8006758 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80056c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056ca:	b123      	cbz	r3, 80056d6 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80056cc:	4620      	mov	r0, r4
	}
 80056ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80056d2:	f7ff bcd1 	b.w	8005078 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80056d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80056da:	462a      	mov	r2, r5
 80056dc:	4631      	mov	r1, r6
 80056de:	f000 fc37 	bl	8005f50 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 80056e2:	4620      	mov	r0, r4
	}
 80056e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80056e8:	f7ff bcc6 	b.w	8005078 <prvUnlockQueue>

080056ec <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056f0:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056f2:	f001 f80f 	bl	8006714 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056f6:	4a34      	ldr	r2, [pc, #208]	; (80057c8 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 80056f8:	4e34      	ldr	r6, [pc, #208]	; (80057cc <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 80056fa:	6813      	ldr	r3, [r2, #0]
 80056fc:	3301      	adds	r3, #1
 80056fe:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005700:	6833      	ldr	r3, [r6, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d032      	beq.n	800576c <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005706:	4c32      	ldr	r4, [pc, #200]	; (80057d0 <prvAddNewTaskToReadyList+0xe4>)
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	b33b      	cbz	r3, 800575c <prvAddNewTaskToReadyList+0x70>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800570c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800570e:	4f31      	ldr	r7, [pc, #196]	; (80057d4 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8005710:	4a31      	ldr	r2, [pc, #196]	; (80057d8 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8005712:	4932      	ldr	r1, [pc, #200]	; (80057dc <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8005714:	6813      	ldr	r3, [r2, #0]
 8005716:	3301      	adds	r3, #1
 8005718:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800571a:	656b      	str	r3, [r5, #84]	; 0x54
		prvAddTaskToReadyList( pxNewTCB );
 800571c:	680b      	ldr	r3, [r1, #0]
 800571e:	4283      	cmp	r3, r0
 8005720:	bf38      	it	cc
 8005722:	6008      	strcc	r0, [r1, #0]
 8005724:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005728:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800572c:	1d29      	adds	r1, r5, #4
 800572e:	f7ff fc33 	bl	8004f98 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005732:	f001 f811 	bl	8006758 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	b173      	cbz	r3, 8005758 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800573a:	6832      	ldr	r2, [r6, #0]
 800573c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800573e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005740:	429a      	cmp	r2, r3
 8005742:	d209      	bcs.n	8005758 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005744:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800574c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800575c:	6833      	ldr	r3, [r6, #0]
 800575e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	4f1c      	ldr	r7, [pc, #112]	; (80057d4 <prvAddNewTaskToReadyList+0xe8>)
 8005764:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8005766:	bf98      	it	ls
 8005768:	6035      	strls	r5, [r6, #0]
 800576a:	e7d1      	b.n	8005710 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 800576c:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800576e:	6813      	ldr	r3, [r2, #0]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d003      	beq.n	800577c <prvAddNewTaskToReadyList+0x90>
		prvAddTaskToReadyList( pxNewTCB );
 8005774:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005776:	4f17      	ldr	r7, [pc, #92]	; (80057d4 <prvAddNewTaskToReadyList+0xe8>)
 8005778:	4c15      	ldr	r4, [pc, #84]	; (80057d0 <prvAddNewTaskToReadyList+0xe4>)
 800577a:	e7c9      	b.n	8005710 <prvAddNewTaskToReadyList+0x24>
 800577c:	4f15      	ldr	r7, [pc, #84]	; (80057d4 <prvAddNewTaskToReadyList+0xe8>)
 800577e:	463c      	mov	r4, r7
 8005780:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005784:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005786:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005788:	f7ff fbf6 	bl	8004f78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800578c:	45a0      	cmp	r8, r4
 800578e:	d1f9      	bne.n	8005784 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005790:	f8df 904c 	ldr.w	r9, [pc, #76]	; 80057e0 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8005794:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80057e4 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList1 );
 8005798:	4648      	mov	r0, r9
 800579a:	f7ff fbed 	bl	8004f78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800579e:	4640      	mov	r0, r8
 80057a0:	f7ff fbea 	bl	8004f78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057a4:	4810      	ldr	r0, [pc, #64]	; (80057e8 <prvAddNewTaskToReadyList+0xfc>)
 80057a6:	f7ff fbe7 	bl	8004f78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057aa:	4810      	ldr	r0, [pc, #64]	; (80057ec <prvAddNewTaskToReadyList+0x100>)
 80057ac:	f7ff fbe4 	bl	8004f78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057b0:	480f      	ldr	r0, [pc, #60]	; (80057f0 <prvAddNewTaskToReadyList+0x104>)
 80057b2:	f7ff fbe1 	bl	8004f78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057b6:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <prvAddNewTaskToReadyList+0x108>)
 80057b8:	4c05      	ldr	r4, [pc, #20]	; (80057d0 <prvAddNewTaskToReadyList+0xe4>)
 80057ba:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057be:	4b0e      	ldr	r3, [pc, #56]	; (80057f8 <prvAddNewTaskToReadyList+0x10c>)
		prvAddTaskToReadyList( pxNewTCB );
 80057c0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057c2:	f8c3 8000 	str.w	r8, [r3]
}
 80057c6:	e7a3      	b.n	8005710 <prvAddNewTaskToReadyList+0x24>
 80057c8:	2000146c 	.word	0x2000146c
 80057cc:	20001000 	.word	0x20001000
 80057d0:	200014c8 	.word	0x200014c8
 80057d4:	2000100c 	.word	0x2000100c
 80057d8:	2000147c 	.word	0x2000147c
 80057dc:	20001480 	.word	0x20001480
 80057e0:	20001484 	.word	0x20001484
 80057e4:	20001498 	.word	0x20001498
 80057e8:	200014b4 	.word	0x200014b4
 80057ec:	200014e0 	.word	0x200014e0
 80057f0:	200014cc 	.word	0x200014cc
 80057f4:	20001004 	.word	0x20001004
 80057f8:	20001008 	.word	0x20001008

080057fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fe:	4605      	mov	r5, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005800:	4b15      	ldr	r3, [pc, #84]	; (8005858 <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005802:	4e16      	ldr	r6, [pc, #88]	; (800585c <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 8005804:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005806:	6830      	ldr	r0, [r6, #0]
{
 8005808:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800580a:	3004      	adds	r0, #4
 800580c:	f7ff fbea 	bl	8004fe4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005810:	1c6b      	adds	r3, r5, #1
 8005812:	d017      	beq.n	8005844 <prvAddCurrentTaskToDelayedList+0x48>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005814:	6833      	ldr	r3, [r6, #0]
 8005816:	1964      	adds	r4, r4, r5
 8005818:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800581a:	d307      	bcc.n	800582c <prvAddCurrentTaskToDelayedList+0x30>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800581c:	4b10      	ldr	r3, [pc, #64]	; (8005860 <prvAddCurrentTaskToDelayedList+0x64>)
 800581e:	6818      	ldr	r0, [r3, #0]
 8005820:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005822:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005826:	3104      	adds	r1, #4
 8005828:	f7ff bbc4 	b.w	8004fb4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800582c:	4b0d      	ldr	r3, [pc, #52]	; (8005864 <prvAddCurrentTaskToDelayedList+0x68>)
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	6831      	ldr	r1, [r6, #0]
 8005832:	3104      	adds	r1, #4
 8005834:	f7ff fbbe 	bl	8004fb4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005838:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <prvAddCurrentTaskToDelayedList+0x6c>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800583e:	bf88      	it	hi
 8005840:	601c      	strhi	r4, [r3, #0]
}
 8005842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005844:	2f00      	cmp	r7, #0
 8005846:	d0e5      	beq.n	8005814 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005848:	6831      	ldr	r1, [r6, #0]
 800584a:	4808      	ldr	r0, [pc, #32]	; (800586c <prvAddCurrentTaskToDelayedList+0x70>)
 800584c:	3104      	adds	r1, #4
}
 800584e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005852:	f7ff bba1 	b.w	8004f98 <vListInsertEnd>
 8005856:	bf00      	nop
 8005858:	200014f4 	.word	0x200014f4
 800585c:	20001000 	.word	0x20001000
 8005860:	20001008 	.word	0x20001008
 8005864:	20001004 	.word	0x20001004
 8005868:	200014ac 	.word	0x200014ac
 800586c:	200014cc 	.word	0x200014cc

08005870 <prvDeleteTCB>:
	{
 8005870:	b510      	push	{r4, lr}
 8005872:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005874:	3064      	adds	r0, #100	; 0x64
 8005876:	f001 f9ab 	bl	8006bd0 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800587a:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
 800587e:	b163      	cbz	r3, 800589a <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005880:	2b01      	cmp	r3, #1
 8005882:	d013      	beq.n	80058ac <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005884:	2b02      	cmp	r3, #2
 8005886:	d010      	beq.n	80058aa <prvDeleteTCB+0x3a>
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	e7fe      	b.n	8005898 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800589a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800589c:	f001 f90e 	bl	8006abc <vPortFree>
				vPortFree( pxTCB );
 80058a0:	4620      	mov	r0, r4
	}
 80058a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80058a6:	f001 b909 	b.w	8006abc <vPortFree>
	}
 80058aa:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80058ac:	4620      	mov	r0, r4
	}
 80058ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80058b2:	f001 b903 	b.w	8006abc <vPortFree>
 80058b6:	bf00      	nop

080058b8 <prvIdleTask>:
				taskYIELD();
 80058b8:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80058bc:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	4c13      	ldr	r4, [pc, #76]	; (8005910 <prvIdleTask+0x58>)
 80058c4:	4e13      	ldr	r6, [pc, #76]	; (8005914 <prvIdleTask+0x5c>)
 80058c6:	4d14      	ldr	r5, [pc, #80]	; (8005918 <prvIdleTask+0x60>)
 80058c8:	f8df a050 	ldr.w	sl, [pc, #80]	; 800591c <prvIdleTask+0x64>
 80058cc:	e011      	b.n	80058f2 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80058ce:	f000 ff21 	bl	8006714 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80058d2:	68f3      	ldr	r3, [r6, #12]
 80058d4:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058d6:	1d38      	adds	r0, r7, #4
 80058d8:	f7ff fb84 	bl	8004fe4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	3b01      	subs	r3, #1
 80058e0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80058e8:	f000 ff36 	bl	8006758 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80058ec:	4638      	mov	r0, r7
 80058ee:	f7ff ffbf 	bl	8005870 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1ea      	bne.n	80058ce <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058f8:	f8da 3000 	ldr.w	r3, [sl]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d9f8      	bls.n	80058f2 <prvIdleTask+0x3a>
				taskYIELD();
 8005900:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	e7f1      	b.n	80058f2 <prvIdleTask+0x3a>
 800590e:	bf00      	nop
 8005910:	20001470 	.word	0x20001470
 8005914:	200014e0 	.word	0x200014e0
 8005918:	2000146c 	.word	0x2000146c
 800591c:	2000100c 	.word	0x2000100c

08005920 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005924:	4689      	mov	r9, r1
 8005926:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005928:	ea4f 0882 	mov.w	r8, r2, lsl #2
 800592c:	21a5      	movs	r1, #165	; 0xa5
 800592e:	4642      	mov	r2, r8
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005930:	4605      	mov	r5, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005932:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005934:	461e      	mov	r6, r3
 8005936:	9f09      	ldr	r7, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005938:	f001 f934 	bl	8006ba4 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800593c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800593e:	f1a8 0804 	sub.w	r8, r8, #4
 8005942:	4498      	add	r8, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005944:	f028 0807 	bic.w	r8, r8, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005948:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 800594c:	f109 3cff 	add.w	ip, r9, #4294967295
 8005950:	f109 011f 	add.w	r1, r9, #31
 8005954:	e001      	b.n	800595a <prvInitialiseNewTask.constprop.0+0x3a>
 8005956:	458c      	cmp	ip, r1
 8005958:	d005      	beq.n	8005966 <prvInitialiseNewTask.constprop.0+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800595a:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 800595e:	f80e 2f01 	strb.w	r2, [lr, #1]!
		if( pcName[ x ] == 0x00 )
 8005962:	2a00      	cmp	r2, #0
 8005964:	d1f7      	bne.n	8005956 <prvInitialiseNewTask.constprop.0+0x36>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005966:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800596a:	f04f 0a00 	mov.w	sl, #0
 800596e:	f1b9 0f37 	cmp.w	r9, #55	; 0x37
 8005972:	bf28      	it	cs
 8005974:	f04f 0937 	movcs.w	r9, #55	; 0x37
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005978:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 800597a:	e9c4 9a17 	strd	r9, sl, [r4, #92]	; 0x5c
	pxNewTCB->uxPriority = uxPriority;
 800597e:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005982:	f884 a053 	strb.w	sl, [r4, #83]	; 0x53
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005986:	f7ff fb03 	bl	8004f90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800598a:	f104 0018 	add.w	r0, r4, #24
 800598e:	f7ff faff 	bl	8004f90 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005992:	f1c9 0338 	rsb	r3, r9, #56	; 0x38
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005996:	4651      	mov	r1, sl
 8005998:	2260      	movs	r2, #96	; 0x60
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800599a:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 800599c:	f8c4 a0c4 	str.w	sl, [r4, #196]	; 0xc4
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059a0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059a2:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059a4:	f884 a0c8 	strb.w	sl, [r4, #200]	; 0xc8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80059a8:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80059ac:	f001 f8fa 	bl	8006ba4 <memset>
 80059b0:	4b07      	ldr	r3, [pc, #28]	; (80059d0 <prvInitialiseNewTask.constprop.0+0xb0>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059b2:	4632      	mov	r2, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80059b4:	66a3      	str	r3, [r4, #104]	; 0x68
 80059b6:	4b07      	ldr	r3, [pc, #28]	; (80059d4 <prvInitialiseNewTask.constprop.0+0xb4>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059b8:	4629      	mov	r1, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80059ba:	66e3      	str	r3, [r4, #108]	; 0x6c
 80059bc:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <prvInitialiseNewTask.constprop.0+0xb8>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059be:	4640      	mov	r0, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80059c0:	6723      	str	r3, [r4, #112]	; 0x70
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059c2:	f000 fe7f 	bl	80066c4 <pxPortInitialiseStack>
 80059c6:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80059c8:	b107      	cbz	r7, 80059cc <prvInitialiseNewTask.constprop.0+0xac>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059ca:	603c      	str	r4, [r7, #0]
}
 80059cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d0:	0800750c 	.word	0x0800750c
 80059d4:	0800752c 	.word	0x0800752c
 80059d8:	080074ec 	.word	0x080074ec

080059dc <xTaskCreateStatic>:
	{
 80059dc:	b530      	push	{r4, r5, lr}
 80059de:	b087      	sub	sp, #28
 80059e0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80059e2:	b1c4      	cbz	r4, 8005a16 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 80059e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059e6:	b16d      	cbz	r5, 8005a04 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 80059e8:	25cc      	movs	r5, #204	; 0xcc
 80059ea:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059ec:	9d05      	ldr	r5, [sp, #20]
 80059ee:	2dcc      	cmp	r5, #204	; 0xcc
 80059f0:	d01a      	beq.n	8005a28 <xTaskCreateStatic+0x4c>
 80059f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	e7fe      	b.n	8005a02 <xTaskCreateStatic+0x26>
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8005a14:	e7fe      	b.n	8005a14 <xTaskCreateStatic+0x38>
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8005a26:	e7fe      	b.n	8005a26 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a2a:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a2c:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a2e:	9502      	str	r5, [sp, #8]
 8005a30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005a32:	9500      	str	r5, [sp, #0]
 8005a34:	ad04      	add	r5, sp, #16
 8005a36:	9501      	str	r5, [sp, #4]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a3a:	f885 40c9 	strb.w	r4, [r5, #201]	; 0xc9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a3e:	f7ff ff6f 	bl	8005920 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a42:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005a44:	f7ff fe52 	bl	80056ec <prvAddNewTaskToReadyList>
	}
 8005a48:	9804      	ldr	r0, [sp, #16]
 8005a4a:	b007      	add	sp, #28
 8005a4c:	bd30      	pop	{r4, r5, pc}
 8005a4e:	bf00      	nop

08005a50 <xTaskCreate>:
	{
 8005a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a54:	4607      	mov	r7, r0
 8005a56:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a58:	0090      	lsls	r0, r2, #2
	{
 8005a5a:	4615      	mov	r5, r2
 8005a5c:	4688      	mov	r8, r1
 8005a5e:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a60:	f000 ff9a 	bl	8006998 <pvPortMalloc>
			if( pxStack != NULL )
 8005a64:	b1d8      	cbz	r0, 8005a9e <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005a66:	4604      	mov	r4, r0
 8005a68:	20cc      	movs	r0, #204	; 0xcc
 8005a6a:	f000 ff95 	bl	8006998 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005a6e:	4606      	mov	r6, r0
 8005a70:	b1d0      	cbz	r0, 8005aa8 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 8005a72:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a74:	2400      	movs	r4, #0
 8005a76:	f886 40c9 	strb.w	r4, [r6, #201]	; 0xc9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a7a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005a7c:	464b      	mov	r3, r9
 8005a7e:	9401      	str	r4, [sp, #4]
 8005a80:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005a82:	462a      	mov	r2, r5
 8005a84:	4641      	mov	r1, r8
 8005a86:	4638      	mov	r0, r7
 8005a88:	9602      	str	r6, [sp, #8]
 8005a8a:	9400      	str	r4, [sp, #0]
 8005a8c:	f7ff ff48 	bl	8005920 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a90:	4630      	mov	r0, r6
 8005a92:	f7ff fe2b 	bl	80056ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a96:	2001      	movs	r0, #1
	}
 8005a98:	b005      	add	sp, #20
 8005a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a9e:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8005aa2:	b005      	add	sp, #20
 8005aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f001 f807 	bl	8006abc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005aae:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab2:	e7f1      	b.n	8005a98 <xTaskCreate+0x48>

08005ab4 <uxTaskPriorityGet>:
	{
 8005ab4:	b510      	push	{r4, lr}
 8005ab6:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8005ab8:	f000 fe2c 	bl	8006714 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 8005abc:	b124      	cbz	r4, 8005ac8 <uxTaskPriorityGet+0x14>
			uxReturn = pxTCB->uxPriority;
 8005abe:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 8005ac0:	f000 fe4a 	bl	8006758 <vPortExitCritical>
	}
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 8005ac8:	4b03      	ldr	r3, [pc, #12]	; (8005ad8 <uxTaskPriorityGet+0x24>)
 8005aca:	681c      	ldr	r4, [r3, #0]
			uxReturn = pxTCB->uxPriority;
 8005acc:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 8005ace:	f000 fe43 	bl	8006758 <vPortExitCritical>
	}
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	bd10      	pop	{r4, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20001000 	.word	0x20001000

08005adc <vTaskStartScheduler>:
{
 8005adc:	b530      	push	{r4, r5, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ade:	2400      	movs	r4, #0
{
 8005ae0:	b089      	sub	sp, #36	; 0x24
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ae2:	aa07      	add	r2, sp, #28
 8005ae4:	a906      	add	r1, sp, #24
 8005ae6:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ae8:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005aec:	f7ff fa28 	bl	8004f40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005af0:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8005af4:	4623      	mov	r3, r4
 8005af6:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8005afa:	9a07      	ldr	r2, [sp, #28]
 8005afc:	4918      	ldr	r1, [pc, #96]	; (8005b60 <vTaskStartScheduler+0x84>)
 8005afe:	4819      	ldr	r0, [pc, #100]	; (8005b64 <vTaskStartScheduler+0x88>)
 8005b00:	9400      	str	r4, [sp, #0]
 8005b02:	f7ff ff6b 	bl	80059dc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8005b06:	b1e8      	cbz	r0, 8005b44 <vTaskStartScheduler+0x68>
			xReturn = xTimerCreateTimerTask();
 8005b08:	f000 fb6a 	bl	80061e0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8005b0c:	2801      	cmp	r0, #1
 8005b0e:	d11b      	bne.n	8005b48 <vTaskStartScheduler+0x6c>
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b20:	f04f 35ff 	mov.w	r5, #4294967295
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b24:	4b10      	ldr	r3, [pc, #64]	; (8005b68 <vTaskStartScheduler+0x8c>)
 8005b26:	4a11      	ldr	r2, [pc, #68]	; (8005b6c <vTaskStartScheduler+0x90>)
 8005b28:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b2a:	4911      	ldr	r1, [pc, #68]	; (8005b70 <vTaskStartScheduler+0x94>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b2c:	3364      	adds	r3, #100	; 0x64
 8005b2e:	6013      	str	r3, [r2, #0]
		xSchedulerRunning = pdTRUE;
 8005b30:	4a10      	ldr	r2, [pc, #64]	; (8005b74 <vTaskStartScheduler+0x98>)
		xTickCount = ( TickType_t ) 0U;
 8005b32:	4b11      	ldr	r3, [pc, #68]	; (8005b78 <vTaskStartScheduler+0x9c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b34:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8005b36:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8005b38:	601c      	str	r4, [r3, #0]
}
 8005b3a:	b009      	add	sp, #36	; 0x24
 8005b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8005b40:	f000 be6c 	b.w	800681c <xPortStartScheduler>
}
 8005b44:	b009      	add	sp, #36	; 0x24
 8005b46:	bd30      	pop	{r4, r5, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b48:	3001      	adds	r0, #1
 8005b4a:	d1fb      	bne.n	8005b44 <vTaskStartScheduler+0x68>
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	e7fe      	b.n	8005b5c <vTaskStartScheduler+0x80>
 8005b5e:	bf00      	nop
 8005b60:	080074d4 	.word	0x080074d4
 8005b64:	080058b9 	.word	0x080058b9
 8005b68:	20001000 	.word	0x20001000
 8005b6c:	20000034 	.word	0x20000034
 8005b70:	200014ac 	.word	0x200014ac
 8005b74:	200014c8 	.word	0x200014c8
 8005b78:	200014f4 	.word	0x200014f4

08005b7c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005b7c:	4a02      	ldr	r2, [pc, #8]	; (8005b88 <vTaskSuspendAll+0xc>)
 8005b7e:	6813      	ldr	r3, [r2, #0]
 8005b80:	3301      	adds	r3, #1
 8005b82:	6013      	str	r3, [r2, #0]
}
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	20001478 	.word	0x20001478

08005b8c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8005b8c:	4b01      	ldr	r3, [pc, #4]	; (8005b94 <xTaskGetTickCount+0x8>)
 8005b8e:	6818      	ldr	r0, [r3, #0]
}
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	200014f4 	.word	0x200014f4

08005b98 <xTaskIncrementTick>:
{
 8005b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b9c:	4b4c      	ldr	r3, [pc, #304]	; (8005cd0 <xTaskIncrementTick+0x138>)
{
 8005b9e:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d145      	bne.n	8005c32 <xTaskIncrementTick+0x9a>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ba6:	4b4b      	ldr	r3, [pc, #300]	; (8005cd4 <xTaskIncrementTick+0x13c>)
 8005ba8:	681e      	ldr	r6, [r3, #0]
 8005baa:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8005bac:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005bae:	2e00      	cmp	r6, #0
 8005bb0:	d04d      	beq.n	8005c4e <xTaskIncrementTick+0xb6>
 8005bb2:	4b49      	ldr	r3, [pc, #292]	; (8005cd8 <xTaskIncrementTick+0x140>)
 8005bb4:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005bb6:	9b01      	ldr	r3, [sp, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	42b3      	cmp	r3, r6
 8005bbc:	d854      	bhi.n	8005c68 <xTaskIncrementTick+0xd0>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bbe:	4f47      	ldr	r7, [pc, #284]	; (8005cdc <xTaskIncrementTick+0x144>)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681d      	ldr	r5, [r3, #0]
 8005bc4:	2d00      	cmp	r5, #0
 8005bc6:	d072      	beq.n	8005cae <xTaskIncrementTick+0x116>
BaseType_t xSwitchRequired = pdFALSE;
 8005bc8:	2500      	movs	r5, #0
 8005bca:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8005ce0 <xTaskIncrementTick+0x148>
 8005bce:	f8df a114 	ldr.w	sl, [pc, #276]	; 8005ce4 <xTaskIncrementTick+0x14c>
					prvAddTaskToReadyList( pxTCB );
 8005bd2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8005ce8 <xTaskIncrementTick+0x150>
 8005bd6:	e021      	b.n	8005c1c <xTaskIncrementTick+0x84>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bd8:	4658      	mov	r0, fp
 8005bda:	f7ff fa03 	bl	8004fe4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005be0:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005be4:	b10b      	cbz	r3, 8005bea <xTaskIncrementTick+0x52>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005be6:	f7ff f9fd 	bl	8004fe4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005bec:	f8d8 3000 	ldr.w	r3, [r8]
 8005bf0:	4659      	mov	r1, fp
 8005bf2:	4298      	cmp	r0, r3
 8005bf4:	bf88      	it	hi
 8005bf6:	f8c8 0000 	strhi.w	r0, [r8]
 8005bfa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bfe:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8005c02:	f7ff f9c9 	bl	8004f98 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c06:	f8da 3000 	ldr.w	r3, [sl]
 8005c0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	bf28      	it	cs
 8005c12:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d04c      	beq.n	8005cb6 <xTaskIncrementTick+0x11e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c22:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c24:	f104 0b04 	add.w	fp, r4, #4
					if( xConstTickCount < xItemValue )
 8005c28:	429e      	cmp	r6, r3
 8005c2a:	d2d5      	bcs.n	8005bd8 <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 8005c2c:	9a01      	ldr	r2, [sp, #4]
 8005c2e:	6013      	str	r3, [r2, #0]
						break;
 8005c30:	e01f      	b.n	8005c72 <xTaskIncrementTick+0xda>
BaseType_t xSwitchRequired = pdFALSE;
 8005c32:	2500      	movs	r5, #0
		++uxPendedTicks;
 8005c34:	4a2d      	ldr	r2, [pc, #180]	; (8005cec <xTaskIncrementTick+0x154>)
 8005c36:	6813      	ldr	r3, [r2, #0]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 8005c3c:	4b2c      	ldr	r3, [pc, #176]	; (8005cf0 <xTaskIncrementTick+0x158>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8005c40:	2b00      	cmp	r3, #0
}
 8005c42:	bf0c      	ite	eq
 8005c44:	4628      	moveq	r0, r5
 8005c46:	2001      	movne	r0, #1
 8005c48:	b003      	add	sp, #12
 8005c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8005c4e:	4b23      	ldr	r3, [pc, #140]	; (8005cdc <xTaskIncrementTick+0x144>)
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	6812      	ldr	r2, [r2, #0]
 8005c54:	b1ca      	cbz	r2, 8005c8a <xTaskIncrementTick+0xf2>
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	e7fe      	b.n	8005c66 <xTaskIncrementTick+0xce>
BaseType_t xSwitchRequired = pdFALSE;
 8005c68:	2500      	movs	r5, #0
 8005c6a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8005ce0 <xTaskIncrementTick+0x148>
 8005c6e:	f8df a074 	ldr.w	sl, [pc, #116]	; 8005ce4 <xTaskIncrementTick+0x14c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c72:	f8da 3000 	ldr.w	r3, [sl]
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	f859 3003 	ldr.w	r3, [r9, r3]
				xSwitchRequired = pdTRUE;
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	bf28      	it	cs
 8005c86:	2501      	movcs	r5, #1
 8005c88:	e7d8      	b.n	8005c3c <xTaskIncrementTick+0xa4>
			taskSWITCH_DELAYED_LISTS();
 8005c8a:	4a1a      	ldr	r2, [pc, #104]	; (8005cf4 <xTaskIncrementTick+0x15c>)
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	6811      	ldr	r1, [r2, #0]
 8005c90:	6019      	str	r1, [r3, #0]
 8005c92:	4919      	ldr	r1, [pc, #100]	; (8005cf8 <xTaskIncrementTick+0x160>)
 8005c94:	6010      	str	r0, [r2, #0]
 8005c96:	680a      	ldr	r2, [r1, #0]
 8005c98:	3201      	adds	r2, #1
 8005c9a:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	b972      	cbnz	r2, 8005cc0 <xTaskIncrementTick+0x128>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca6:	4a0c      	ldr	r2, [pc, #48]	; (8005cd8 <xTaskIncrementTick+0x140>)
 8005ca8:	9201      	str	r2, [sp, #4]
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	e783      	b.n	8005bb6 <xTaskIncrementTick+0x1e>
 8005cae:	f8df 9030 	ldr.w	r9, [pc, #48]	; 8005ce0 <xTaskIncrementTick+0x148>
 8005cb2:	f8df a030 	ldr.w	sl, [pc, #48]	; 8005ce4 <xTaskIncrementTick+0x14c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cba:	9a01      	ldr	r2, [sp, #4]
 8005cbc:	6013      	str	r3, [r2, #0]
					break;
 8005cbe:	e7d8      	b.n	8005c72 <xTaskIncrementTick+0xda>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005cc0:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cc2:	4a05      	ldr	r2, [pc, #20]	; (8005cd8 <xTaskIncrementTick+0x140>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005cc4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cc6:	9201      	str	r2, [sp, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	6013      	str	r3, [r2, #0]
}
 8005cce:	e772      	b.n	8005bb6 <xTaskIncrementTick+0x1e>
 8005cd0:	20001478 	.word	0x20001478
 8005cd4:	200014f4 	.word	0x200014f4
 8005cd8:	200014ac 	.word	0x200014ac
 8005cdc:	20001004 	.word	0x20001004
 8005ce0:	2000100c 	.word	0x2000100c
 8005ce4:	20001000 	.word	0x20001000
 8005ce8:	20001480 	.word	0x20001480
 8005cec:	20001474 	.word	0x20001474
 8005cf0:	200014f8 	.word	0x200014f8
 8005cf4:	20001008 	.word	0x20001008
 8005cf8:	200014b0 	.word	0x200014b0

08005cfc <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8005cfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
 8005d00:	f000 fd08 	bl	8006714 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005d04:	4b37      	ldr	r3, [pc, #220]	; (8005de4 <xTaskResumeAll.part.0+0xe8>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	3a01      	subs	r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d159      	bne.n	8005dc6 <xTaskResumeAll.part.0+0xca>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d12:	4b35      	ldr	r3, [pc, #212]	; (8005de8 <xTaskResumeAll.part.0+0xec>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d055      	beq.n	8005dc6 <xTaskResumeAll.part.0+0xca>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d1a:	4d34      	ldr	r5, [pc, #208]	; (8005dec <xTaskResumeAll.part.0+0xf0>)
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d05c      	beq.n	8005ddc <xTaskResumeAll.part.0+0xe0>
						xYieldPending = pdTRUE;
 8005d22:	f04f 0a01 	mov.w	sl, #1
 8005d26:	4e32      	ldr	r6, [pc, #200]	; (8005df0 <xTaskResumeAll.part.0+0xf4>)
 8005d28:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8005df4 <xTaskResumeAll.part.0+0xf8>
 8005d2c:	4f32      	ldr	r7, [pc, #200]	; (8005df8 <xTaskResumeAll.part.0+0xfc>)
 8005d2e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8005dfc <xTaskResumeAll.part.0+0x100>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005d32:	68eb      	ldr	r3, [r5, #12]
 8005d34:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d36:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d3a:	f104 0018 	add.w	r0, r4, #24
 8005d3e:	f7ff f951 	bl	8004fe4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d42:	4658      	mov	r0, fp
 8005d44:	f7ff f94e 	bl	8004fe4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005d4a:	6832      	ldr	r2, [r6, #0]
 8005d4c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005d50:	4293      	cmp	r3, r2
 8005d52:	4659      	mov	r1, fp
 8005d54:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8005d58:	bf88      	it	hi
 8005d5a:	6033      	strhi	r3, [r6, #0]
 8005d5c:	f7ff f91c 	bl	8004f98 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d66:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8005d68:	bf28      	it	cs
 8005d6a:	f8c9 a000 	strcs.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d6e:	682b      	ldr	r3, [r5, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1de      	bne.n	8005d32 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d74:	4b22      	ldr	r3, [pc, #136]	; (8005e00 <xTaskResumeAll.part.0+0x104>)
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	6812      	ldr	r2, [r2, #0]
 8005d7a:	b352      	cbz	r2, 8005dd2 <xTaskResumeAll.part.0+0xd6>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d7c:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d7e:	4b21      	ldr	r3, [pc, #132]	; (8005e04 <xTaskResumeAll.part.0+0x108>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d80:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d82:	68d2      	ldr	r2, [r2, #12]
 8005d84:	6852      	ldr	r2, [r2, #4]
 8005d86:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005d88:	4e1f      	ldr	r6, [pc, #124]	; (8005e08 <xTaskResumeAll.part.0+0x10c>)
 8005d8a:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005d8c:	b144      	cbz	r4, 8005da0 <xTaskResumeAll.part.0+0xa4>
								xYieldPending = pdTRUE;
 8005d8e:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8005d90:	f7ff ff02 	bl	8005b98 <xTaskIncrementTick>
 8005d94:	b108      	cbz	r0, 8005d9a <xTaskResumeAll.part.0+0x9e>
								xYieldPending = pdTRUE;
 8005d96:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d9a:	3c01      	subs	r4, #1
 8005d9c:	d1f8      	bne.n	8005d90 <xTaskResumeAll.part.0+0x94>
						uxPendedTicks = 0;
 8005d9e:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8005da0:	f8d9 3000 	ldr.w	r3, [r9]
 8005da4:	b17b      	cbz	r3, 8005dc6 <xTaskResumeAll.part.0+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 8005da6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005dba:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8005dbc:	f000 fccc 	bl	8006758 <vPortExitCritical>
}
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8005dc6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005dc8:	f000 fcc6 	bl	8006758 <vPortExitCritical>
}
 8005dcc:	4620      	mov	r0, r4
 8005dce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <xTaskResumeAll.part.0+0x108>)
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	e7d5      	b.n	8005d88 <xTaskResumeAll.part.0+0x8c>
 8005ddc:	f8df 901c 	ldr.w	r9, [pc, #28]	; 8005dfc <xTaskResumeAll.part.0+0x100>
 8005de0:	e7d2      	b.n	8005d88 <xTaskResumeAll.part.0+0x8c>
 8005de2:	bf00      	nop
 8005de4:	20001478 	.word	0x20001478
 8005de8:	2000146c 	.word	0x2000146c
 8005dec:	200014b4 	.word	0x200014b4
 8005df0:	20001480 	.word	0x20001480
 8005df4:	2000100c 	.word	0x2000100c
 8005df8:	20001000 	.word	0x20001000
 8005dfc:	200014f8 	.word	0x200014f8
 8005e00:	20001004 	.word	0x20001004
 8005e04:	200014ac 	.word	0x200014ac
 8005e08:	20001474 	.word	0x20001474

08005e0c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8005e0c:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <xTaskResumeAll+0x1c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	b943      	cbnz	r3, 8005e24 <xTaskResumeAll+0x18>
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	e7fe      	b.n	8005e22 <xTaskResumeAll+0x16>
 8005e24:	f7ff bf6a 	b.w	8005cfc <xTaskResumeAll.part.0>
 8005e28:	20001478 	.word	0x20001478

08005e2c <vTaskDelay>:
	{
 8005e2c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e2e:	b950      	cbnz	r0, 8005e46 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8005e30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e38:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	f3bf 8f6f 	isb	sy
	}
 8005e44:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8005e46:	4c10      	ldr	r4, [pc, #64]	; (8005e88 <vTaskDelay+0x5c>)
 8005e48:	6821      	ldr	r1, [r4, #0]
 8005e4a:	b141      	cbz	r1, 8005e5e <vTaskDelay+0x32>
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	e7fe      	b.n	8005e5c <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	3301      	adds	r3, #1
 8005e62:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e64:	f7ff fcca 	bl	80057fc <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	b943      	cbnz	r3, 8005e7e <vTaskDelay+0x52>
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	e7fe      	b.n	8005e7c <vTaskDelay+0x50>
 8005e7e:	f7ff ff3d 	bl	8005cfc <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d0d4      	beq.n	8005e30 <vTaskDelay+0x4>
	}
 8005e86:	bd10      	pop	{r4, pc}
 8005e88:	20001478 	.word	0x20001478

08005e8c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e8c:	4b1d      	ldr	r3, [pc, #116]	; (8005f04 <vTaskSwitchContext+0x78>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	b11b      	cbz	r3, 8005e9a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8005e92:	2201      	movs	r2, #1
 8005e94:	4b1c      	ldr	r3, [pc, #112]	; (8005f08 <vTaskSwitchContext+0x7c>)
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8005e9a:	4a1b      	ldr	r2, [pc, #108]	; (8005f08 <vTaskSwitchContext+0x7c>)
{
 8005e9c:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005e9e:	4c1b      	ldr	r4, [pc, #108]	; (8005f0c <vTaskSwitchContext+0x80>)
		xYieldPending = pdFALSE;
 8005ea0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	491a      	ldr	r1, [pc, #104]	; (8005f10 <vTaskSwitchContext+0x84>)
 8005ea6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005eaa:	0092      	lsls	r2, r2, #2
 8005eac:	588a      	ldr	r2, [r1, r2]
 8005eae:	0098      	lsls	r0, r3, #2
 8005eb0:	b942      	cbnz	r2, 8005ec4 <vTaskSwitchContext+0x38>
 8005eb2:	b1f3      	cbz	r3, 8005ef2 <vTaskSwitchContext+0x66>
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005eba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005ebe:	0098      	lsls	r0, r3, #2
 8005ec0:	2a00      	cmp	r2, #0
 8005ec2:	d0f6      	beq.n	8005eb2 <vTaskSwitchContext+0x26>
 8005ec4:	18c2      	adds	r2, r0, r3
 8005ec6:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8005eca:	4602      	mov	r2, r0
 8005ecc:	6841      	ldr	r1, [r0, #4]
 8005ece:	3208      	adds	r2, #8
 8005ed0:	6849      	ldr	r1, [r1, #4]
 8005ed2:	4291      	cmp	r1, r2
 8005ed4:	6041      	str	r1, [r0, #4]
 8005ed6:	bf08      	it	eq
 8005ed8:	6849      	ldreq	r1, [r1, #4]
 8005eda:	4a0e      	ldr	r2, [pc, #56]	; (8005f14 <vTaskSwitchContext+0x88>)
 8005edc:	bf08      	it	eq
 8005ede:	6041      	streq	r1, [r0, #4]
 8005ee0:	68c8      	ldr	r0, [r1, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ee2:	490d      	ldr	r1, [pc, #52]	; (8005f18 <vTaskSwitchContext+0x8c>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005ee4:	6010      	str	r0, [r2, #0]
 8005ee6:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ee8:	6813      	ldr	r3, [r2, #0]
}
 8005eea:	bc10      	pop	{r4}
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005eec:	3364      	adds	r3, #100	; 0x64
 8005eee:	600b      	str	r3, [r1, #0]
}
 8005ef0:	4770      	bx	lr
 8005ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005f02:	e7fe      	b.n	8005f02 <vTaskSwitchContext+0x76>
 8005f04:	20001478 	.word	0x20001478
 8005f08:	200014f8 	.word	0x200014f8
 8005f0c:	20001480 	.word	0x20001480
 8005f10:	2000100c 	.word	0x2000100c
 8005f14:	20001000 	.word	0x20001000
 8005f18:	20000034 	.word	0x20000034

08005f1c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8005f1c:	b160      	cbz	r0, 8005f38 <vTaskPlaceOnEventList+0x1c>
{
 8005f1e:	b510      	push	{r4, lr}
 8005f20:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f22:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <vTaskPlaceOnEventList+0x30>)
 8005f24:	6819      	ldr	r1, [r3, #0]
 8005f26:	3118      	adds	r1, #24
 8005f28:	f7ff f844 	bl	8004fb4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f2c:	4620      	mov	r0, r4
}
 8005f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f32:	2101      	movs	r1, #1
 8005f34:	f7ff bc62 	b.w	80057fc <prvAddCurrentTaskToDelayedList>
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8005f48:	e7fe      	b.n	8005f48 <vTaskPlaceOnEventList+0x2c>
 8005f4a:	bf00      	nop
 8005f4c:	20001000 	.word	0x20001000

08005f50 <vTaskPlaceOnEventListRestricted>:
	{
 8005f50:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8005f52:	b188      	cbz	r0, 8005f78 <vTaskPlaceOnEventListRestricted+0x28>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f54:	4614      	mov	r4, r2
 8005f56:	460d      	mov	r5, r1
 8005f58:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <vTaskPlaceOnEventListRestricted+0x3c>)
 8005f5a:	6819      	ldr	r1, [r3, #0]
 8005f5c:	3118      	adds	r1, #24
 8005f5e:	f7ff f81b 	bl	8004f98 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8005f62:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f64:	4621      	mov	r1, r4
 8005f66:	bf08      	it	eq
 8005f68:	4628      	moveq	r0, r5
	}
 8005f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f6e:	bf18      	it	ne
 8005f70:	f04f 30ff 	movne.w	r0, #4294967295
 8005f74:	f7ff bc42 	b.w	80057fc <prvAddCurrentTaskToDelayedList>
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8005f88:	e7fe      	b.n	8005f88 <vTaskPlaceOnEventListRestricted+0x38>
 8005f8a:	bf00      	nop
 8005f8c:	20001000 	.word	0x20001000

08005f90 <xTaskRemoveFromEventList>:
{
 8005f90:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005f92:	68c3      	ldr	r3, [r0, #12]
 8005f94:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005f96:	b34c      	cbz	r4, 8005fec <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f98:	f104 0518 	add.w	r5, r4, #24
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	f7ff f821 	bl	8004fe4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fa2:	4b18      	ldr	r3, [pc, #96]	; (8006004 <xTaskRemoveFromEventList+0x74>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	b173      	cbz	r3, 8005fc6 <xTaskRemoveFromEventList+0x36>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fa8:	4629      	mov	r1, r5
 8005faa:	4817      	ldr	r0, [pc, #92]	; (8006008 <xTaskRemoveFromEventList+0x78>)
 8005fac:	f7fe fff4 	bl	8004f98 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fb0:	4b16      	ldr	r3, [pc, #88]	; (800600c <xTaskRemoveFromEventList+0x7c>)
 8005fb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d920      	bls.n	8005ffe <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	4a14      	ldr	r2, [pc, #80]	; (8006010 <xTaskRemoveFromEventList+0x80>)
		xReturn = pdTRUE;
 8005fc0:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8005fc2:	6013      	str	r3, [r2, #0]
}
 8005fc4:	bd38      	pop	{r3, r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fc6:	1d25      	adds	r5, r4, #4
 8005fc8:	4628      	mov	r0, r5
 8005fca:	f7ff f80b 	bl	8004fe4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fce:	4a11      	ldr	r2, [pc, #68]	; (8006014 <xTaskRemoveFromEventList+0x84>)
 8005fd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005fd2:	6811      	ldr	r1, [r2, #0]
 8005fd4:	4810      	ldr	r0, [pc, #64]	; (8006018 <xTaskRemoveFromEventList+0x88>)
 8005fd6:	428b      	cmp	r3, r1
 8005fd8:	bf88      	it	hi
 8005fda:	6013      	strhi	r3, [r2, #0]
 8005fdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005fe6:	f7fe ffd7 	bl	8004f98 <vListInsertEnd>
 8005fea:	e7e1      	b.n	8005fb0 <xTaskRemoveFromEventList+0x20>
 8005fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8005ffc:	e7fe      	b.n	8005ffc <xTaskRemoveFromEventList+0x6c>
		xReturn = pdFALSE;
 8005ffe:	2000      	movs	r0, #0
}
 8006000:	bd38      	pop	{r3, r4, r5, pc}
 8006002:	bf00      	nop
 8006004:	20001478 	.word	0x20001478
 8006008:	200014b4 	.word	0x200014b4
 800600c:	20001000 	.word	0x20001000
 8006010:	200014f8 	.word	0x200014f8
 8006014:	20001480 	.word	0x20001480
 8006018:	2000100c 	.word	0x2000100c

0800601c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800601c:	4a03      	ldr	r2, [pc, #12]	; (800602c <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800601e:	4b04      	ldr	r3, [pc, #16]	; (8006030 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006020:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	e9c0 2300 	strd	r2, r3, [r0]
}
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	200014b0 	.word	0x200014b0
 8006030:	200014f4 	.word	0x200014f4

08006034 <xTaskCheckForTimeOut>:
{
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8006036:	b1f8      	cbz	r0, 8006078 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
 8006038:	460d      	mov	r5, r1
 800603a:	b1a1      	cbz	r1, 8006066 <xTaskCheckForTimeOut+0x32>
 800603c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800603e:	f000 fb69 	bl	8006714 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8006042:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8006044:	4a1c      	ldr	r2, [pc, #112]	; (80060b8 <xTaskCheckForTimeOut+0x84>)
			if( *pxTicksToWait == portMAX_DELAY )
 8006046:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8006048:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800604a:	d02b      	beq.n	80060a4 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800604c:	e9d4 c000 	ldrd	ip, r0, [r4]
 8006050:	4e1a      	ldr	r6, [pc, #104]	; (80060bc <xTaskCheckForTimeOut+0x88>)
 8006052:	6837      	ldr	r7, [r6, #0]
 8006054:	45bc      	cmp	ip, r7
 8006056:	d018      	beq.n	800608a <xTaskCheckForTimeOut+0x56>
 8006058:	4288      	cmp	r0, r1
 800605a:	d816      	bhi.n	800608a <xTaskCheckForTimeOut+0x56>
			xReturn = pdTRUE;
 800605c:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
 800605e:	f000 fb7b 	bl	8006758 <vPortExitCritical>
}
 8006062:	4630      	mov	r0, r6
 8006064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8006076:	e7fe      	b.n	8006076 <xTaskCheckForTimeOut+0x42>
 8006078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8006088:	e7fe      	b.n	8006088 <xTaskCheckForTimeOut+0x54>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800608a:	eba1 0c00 	sub.w	ip, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800608e:	4563      	cmp	r3, ip
 8006090:	d90d      	bls.n	80060ae <xTaskCheckForTimeOut+0x7a>
			*pxTicksToWait -= xElapsedTime;
 8006092:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006094:	6831      	ldr	r1, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006096:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8006098:	4403      	add	r3, r0
 800609a:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 800609c:	2600      	movs	r6, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 800609e:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 80060a2:	e7dc      	b.n	800605e <xTaskCheckForTimeOut+0x2a>
				xReturn = pdFALSE;
 80060a4:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 80060a6:	f000 fb57 	bl	8006758 <vPortExitCritical>
}
 80060aa:	4630      	mov	r0, r6
 80060ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 80060ae:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 80060b0:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 80060b2:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80060b4:	e7d3      	b.n	800605e <xTaskCheckForTimeOut+0x2a>
 80060b6:	bf00      	nop
 80060b8:	200014f4 	.word	0x200014f4
 80060bc:	200014b0 	.word	0x200014b0

080060c0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80060c0:	2201      	movs	r2, #1
 80060c2:	4b01      	ldr	r3, [pc, #4]	; (80060c8 <vTaskMissedYield+0x8>)
 80060c4:	601a      	str	r2, [r3, #0]
}
 80060c6:	4770      	bx	lr
 80060c8:	200014f8 	.word	0x200014f8

080060cc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80060cc:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <xTaskGetSchedulerState+0x18>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	b133      	cbz	r3, 80060e0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060d2:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <xTaskGetSchedulerState+0x1c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	bf0c      	ite	eq
 80060da:	2002      	moveq	r0, #2
 80060dc:	2000      	movne	r0, #0
 80060de:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060e0:	2001      	movs	r0, #1
	}
 80060e2:	4770      	bx	lr
 80060e4:	200014c8 	.word	0x200014c8
 80060e8:	20001478 	.word	0x20001478

080060ec <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80060ec:	b308      	cbz	r0, 8006132 <xTaskPriorityDisinherit+0x46>
	{
 80060ee:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80060f0:	4b1d      	ldr	r3, [pc, #116]	; (8006168 <xTaskPriorityDisinherit+0x7c>)
 80060f2:	681c      	ldr	r4, [r3, #0]
 80060f4:	4284      	cmp	r4, r0
 80060f6:	d008      	beq.n	800610a <xTaskPriorityDisinherit+0x1e>
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	e7fe      	b.n	8006108 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
 800610a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800610c:	b143      	cbz	r3, 8006120 <xTaskPriorityDisinherit+0x34>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800610e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006110:	6de2      	ldr	r2, [r4, #92]	; 0x5c
			( pxTCB->uxMutexesHeld )--;
 8006112:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006114:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8006116:	6623      	str	r3, [r4, #96]	; 0x60
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006118:	d000      	beq.n	800611c <xTaskPriorityDisinherit+0x30>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800611a:	b163      	cbz	r3, 8006136 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800611c:	2000      	movs	r0, #0
	}
 800611e:	bd38      	pop	{r3, r4, r5, pc}
 8006120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8006130:	e7fe      	b.n	8006130 <xTaskPriorityDisinherit+0x44>
	BaseType_t xReturn = pdFALSE;
 8006132:	2000      	movs	r0, #0
	}
 8006134:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006136:	1d25      	adds	r5, r4, #4
 8006138:	4628      	mov	r0, r5
 800613a:	f7fe ff53 	bl	8004fe4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800613e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
					prvAddTaskToReadyList( pxTCB );
 8006140:	4a0a      	ldr	r2, [pc, #40]	; (800616c <xTaskPriorityDisinherit+0x80>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006142:	f1c3 0038 	rsb	r0, r3, #56	; 0x38
 8006146:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006148:	6810      	ldr	r0, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800614a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800614c:	4283      	cmp	r3, r0
 800614e:	4808      	ldr	r0, [pc, #32]	; (8006170 <xTaskPriorityDisinherit+0x84>)
 8006150:	bf88      	it	hi
 8006152:	6013      	strhi	r3, [r2, #0]
 8006154:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006158:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800615c:	4629      	mov	r1, r5
 800615e:	f7fe ff1b 	bl	8004f98 <vListInsertEnd>
					xReturn = pdTRUE;
 8006162:	2001      	movs	r0, #1
	}
 8006164:	bd38      	pop	{r3, r4, r5, pc}
 8006166:	bf00      	nop
 8006168:	20001000 	.word	0x20001000
 800616c:	20001480 	.word	0x20001480
 8006170:	2000100c 	.word	0x2000100c

08006174 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006174:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8006176:	4c12      	ldr	r4, [pc, #72]	; (80061c0 <prvCheckForValidListAndQueue+0x4c>)
{
 8006178:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 800617a:	f000 facb 	bl	8006714 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800617e:	6825      	ldr	r5, [r4, #0]
 8006180:	b125      	cbz	r5, 800618c <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8006182:	b003      	add	sp, #12
 8006184:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8006188:	f000 bae6 	b.w	8006758 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 800618c:	4f0d      	ldr	r7, [pc, #52]	; (80061c4 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 800618e:	4e0e      	ldr	r6, [pc, #56]	; (80061c8 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8006190:	4638      	mov	r0, r7
 8006192:	f7fe fef1 	bl	8004f78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006196:	4630      	mov	r0, r6
 8006198:	f7fe feee 	bl	8004f78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800619c:	4a0b      	ldr	r2, [pc, #44]	; (80061cc <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800619e:	9500      	str	r5, [sp, #0]
			pxCurrentTimerList = &xActiveTimerList1;
 80061a0:	6017      	str	r7, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061a2:	4a0b      	ldr	r2, [pc, #44]	; (80061d0 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061a4:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 80061a6:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061a8:	200a      	movs	r0, #10
 80061aa:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <prvCheckForValidListAndQueue+0x60>)
 80061ac:	4a0a      	ldr	r2, [pc, #40]	; (80061d8 <prvCheckForValidListAndQueue+0x64>)
 80061ae:	f7fe ffef 	bl	8005190 <xQueueGenericCreateStatic>
 80061b2:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d0e4      	beq.n	8006182 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061b8:	4908      	ldr	r1, [pc, #32]	; (80061dc <prvCheckForValidListAndQueue+0x68>)
 80061ba:	f7ff fa5b 	bl	8005674 <vQueueAddToRegistry>
 80061be:	e7e0      	b.n	8006182 <prvCheckForValidListAndQueue+0xe>
 80061c0:	20001620 	.word	0x20001620
 80061c4:	200015a4 	.word	0x200015a4
 80061c8:	200015b8 	.word	0x200015b8
 80061cc:	200014fc 	.word	0x200014fc
 80061d0:	20001500 	.word	0x20001500
 80061d4:	200015d0 	.word	0x200015d0
 80061d8:	20001504 	.word	0x20001504
 80061dc:	080074dc 	.word	0x080074dc

080061e0 <xTimerCreateTimerTask>:
{
 80061e0:	b530      	push	{r4, r5, lr}
 80061e2:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 80061e4:	f7ff ffc6 	bl	8006174 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80061e8:	4b12      	ldr	r3, [pc, #72]	; (8006234 <xTimerCreateTimerTask+0x54>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	b1cb      	cbz	r3, 8006222 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061ee:	2400      	movs	r4, #0
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80061f0:	2502      	movs	r5, #2
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061f2:	aa07      	add	r2, sp, #28
 80061f4:	a906      	add	r1, sp, #24
 80061f6:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80061f8:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061fc:	f7fe feae 	bl	8004f5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006200:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8006204:	4623      	mov	r3, r4
 8006206:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800620a:	9a07      	ldr	r2, [sp, #28]
 800620c:	490a      	ldr	r1, [pc, #40]	; (8006238 <xTimerCreateTimerTask+0x58>)
 800620e:	480b      	ldr	r0, [pc, #44]	; (800623c <xTimerCreateTimerTask+0x5c>)
 8006210:	9500      	str	r5, [sp, #0]
 8006212:	f7ff fbe3 	bl	80059dc <xTaskCreateStatic>
 8006216:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <xTimerCreateTimerTask+0x60>)
 8006218:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800621a:	b110      	cbz	r0, 8006222 <xTimerCreateTimerTask+0x42>
}
 800621c:	2001      	movs	r0, #1
 800621e:	b009      	add	sp, #36	; 0x24
 8006220:	bd30      	pop	{r4, r5, pc}
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8006232:	e7fe      	b.n	8006232 <xTimerCreateTimerTask+0x52>
 8006234:	20001620 	.word	0x20001620
 8006238:	080074e4 	.word	0x080074e4
 800623c:	08006401 	.word	0x08006401
 8006240:	20001624 	.word	0x20001624

08006244 <xTimerCreate>:
	{
 8006244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006248:	4607      	mov	r7, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800624a:	2030      	movs	r0, #48	; 0x30
	{
 800624c:	460d      	mov	r5, r1
 800624e:	4690      	mov	r8, r2
 8006250:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8006252:	f000 fba1 	bl	8006998 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8006256:	4604      	mov	r4, r0
 8006258:	b1b8      	cbz	r0, 800628a <xTimerCreate+0x46>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800625a:	b945      	cbnz	r5, 800626e <xTimerCreate+0x2a>
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	e7fe      	b.n	800626c <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 800626e:	f7ff ff81 	bl	8006174 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006272:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8006274:	e9c4 5806 	strd	r5, r8, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006278:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 800627a:	6027      	str	r7, [r4, #0]
		pxNewTimer->pvTimerID = pvTimerID;
 800627c:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800627e:	1d20      	adds	r0, r4, #4
 8006280:	f7fe fe86 	bl	8004f90 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8006284:	2300      	movs	r3, #0
 8006286:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
 800628a:	4620      	mov	r0, r4
 800628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006290 <xTimerCreateStatic>:
	{
 8006290:	b530      	push	{r4, r5, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006292:	2430      	movs	r4, #48	; 0x30
	{
 8006294:	b087      	sub	sp, #28
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006296:	9405      	str	r4, [sp, #20]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006298:	9d05      	ldr	r5, [sp, #20]
 800629a:	2d30      	cmp	r5, #48	; 0x30
 800629c:	d008      	beq.n	80062b0 <xTimerCreateStatic+0x20>
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	e7fe      	b.n	80062ae <xTimerCreateStatic+0x1e>
		configASSERT( pxTimerBuffer );
 80062b0:	4604      	mov	r4, r0
 80062b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80062b4:	b148      	cbz	r0, 80062ca <xTimerCreateStatic+0x3a>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80062b6:	b989      	cbnz	r1, 80062dc <xTimerCreateStatic+0x4c>
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	e7fe      	b.n	80062c8 <xTimerCreateStatic+0x38>
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTimerBuffer );
 80062da:	e7fe      	b.n	80062da <xTimerCreateStatic+0x4a>
		prvCheckForValidListAndQueue();
 80062dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062e0:	9101      	str	r1, [sp, #4]
 80062e2:	f7ff ff47 	bl	8006174 <prvCheckForValidListAndQueue>
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80062e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTimer->uxAutoReload = uxAutoReload;
 80062e8:	9a02      	ldr	r2, [sp, #8]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80062ea:	9901      	ldr	r1, [sp, #4]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80062ec:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80062ee:	461a      	mov	r2, r3
		pxNewTimer->pcTimerName = pcTimerName;
 80062f0:	601c      	str	r4, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80062f2:	6199      	str	r1, [r3, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80062f4:	1d18      	adds	r0, r3, #4
		pxNewTimer->pvTimerID = pvTimerID;
 80062f6:	9b03      	ldr	r3, [sp, #12]
 80062f8:	6213      	str	r3, [r2, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80062fa:	4613      	mov	r3, r2
 80062fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062fe:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006300:	f7fe fe46 	bl	8004f90 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8006304:	2301      	movs	r3, #1
	}
 8006306:	980b      	ldr	r0, [sp, #44]	; 0x2c
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8006308:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
	}
 800630c:	b007      	add	sp, #28
 800630e:	bd30      	pop	{r4, r5, pc}

08006310 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8006310:	b1d0      	cbz	r0, 8006348 <xTimerGenericCommand+0x38>
{
 8006312:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8006314:	4d18      	ldr	r5, [pc, #96]	; (8006378 <xTimerGenericCommand+0x68>)
 8006316:	460c      	mov	r4, r1
 8006318:	6829      	ldr	r1, [r5, #0]
{
 800631a:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 800631c:	b189      	cbz	r1, 8006342 <xTimerGenericCommand+0x32>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800631e:	2c05      	cmp	r4, #5
		xMessage.xMessageID = xCommandID;
 8006320:	e9cd 4200 	strd	r4, r2, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006324:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006326:	dc18      	bgt.n	800635a <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006328:	f7ff fed0 	bl	80060cc <xTaskGetSchedulerState>
 800632c:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800632e:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006332:	d01b      	beq.n	800636c <xTimerGenericCommand+0x5c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006334:	4669      	mov	r1, sp
 8006336:	461a      	mov	r2, r3
 8006338:	6828      	ldr	r0, [r5, #0]
 800633a:	f7fe ffb3 	bl	80052a4 <xQueueGenericSend>
}
 800633e:	b005      	add	sp, #20
 8006340:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8006342:	4608      	mov	r0, r1
}
 8006344:	b005      	add	sp, #20
 8006346:	bd30      	pop	{r4, r5, pc}
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8006358:	e7fe      	b.n	8006358 <xTimerGenericCommand+0x48>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800635a:	469c      	mov	ip, r3
 800635c:	4608      	mov	r0, r1
 800635e:	2300      	movs	r3, #0
 8006360:	4662      	mov	r2, ip
 8006362:	4669      	mov	r1, sp
 8006364:	f7ff f85e 	bl	8005424 <xQueueGenericSendFromISR>
}
 8006368:	b005      	add	sp, #20
 800636a:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800636c:	4669      	mov	r1, sp
 800636e:	9a08      	ldr	r2, [sp, #32]
 8006370:	6828      	ldr	r0, [r5, #0]
 8006372:	f7fe ff97 	bl	80052a4 <xQueueGenericSend>
 8006376:	e7e5      	b.n	8006344 <xTimerGenericCommand+0x34>
 8006378:	20001620 	.word	0x20001620

0800637c <prvSwitchTimerLists>:
{
 800637c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006380:	f04f 0800 	mov.w	r8, #0
 8006384:	4e1c      	ldr	r6, [pc, #112]	; (80063f8 <prvSwitchTimerLists+0x7c>)
{
 8006386:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006388:	e00c      	b.n	80063a4 <prvSwitchTimerLists+0x28>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800638a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800638c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800638e:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006390:	1d25      	adds	r5, r4, #4
 8006392:	4628      	mov	r0, r5
 8006394:	f7fe fe26 	bl	8004fe4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800639a:	4620      	mov	r0, r4
 800639c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800639e:	69e3      	ldr	r3, [r4, #28]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d00a      	beq.n	80063ba <prvSwitchTimerLists+0x3e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063a4:	6833      	ldr	r3, [r6, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	2a00      	cmp	r2, #0
 80063aa:	d1ee      	bne.n	800638a <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 80063ac:	4a13      	ldr	r2, [pc, #76]	; (80063fc <prvSwitchTimerLists+0x80>)
 80063ae:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80063b0:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80063b2:	6031      	str	r1, [r6, #0]
}
 80063b4:	b002      	add	sp, #8
 80063b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063ba:	69a3      	ldr	r3, [r4, #24]
 80063bc:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 80063be:	429f      	cmp	r7, r3
 80063c0:	d206      	bcs.n	80063d0 <prvSwitchTimerLists+0x54>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063c2:	4629      	mov	r1, r5
 80063c4:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063c6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063c8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063ca:	f7fe fdf3 	bl	8004fb4 <vListInsert>
 80063ce:	e7e9      	b.n	80063a4 <prvSwitchTimerLists+0x28>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063d0:	2300      	movs	r3, #0
 80063d2:	463a      	mov	r2, r7
 80063d4:	4620      	mov	r0, r4
 80063d6:	4619      	mov	r1, r3
 80063d8:	f8cd 8000 	str.w	r8, [sp]
 80063dc:	f7ff ff98 	bl	8006310 <xTimerGenericCommand>
				configASSERT( xResult );
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d1df      	bne.n	80063a4 <prvSwitchTimerLists+0x28>
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	e7fe      	b.n	80063f4 <prvSwitchTimerLists+0x78>
 80063f6:	bf00      	nop
 80063f8:	200014fc 	.word	0x200014fc
 80063fc:	20001500 	.word	0x20001500

08006400 <prvTimerTask>:
{
 8006400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					portYIELD_WITHIN_API();
 8006404:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8006408:	4e88      	ldr	r6, [pc, #544]	; (800662c <prvTimerTask+0x22c>)
 800640a:	4d89      	ldr	r5, [pc, #548]	; (8006630 <prvTimerTask+0x230>)
 800640c:	4c89      	ldr	r4, [pc, #548]	; (8006634 <prvTimerTask+0x234>)
{
 800640e:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006410:	6833      	ldr	r3, [r6, #0]
 8006412:	f8d3 8000 	ldr.w	r8, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8006416:	f1b8 0f00 	cmp.w	r8, #0
 800641a:	f000 809a 	beq.w	8006552 <prvTimerTask+0x152>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8006424:	f7ff fbaa 	bl	8005b7c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8006428:	f7ff fbb0 	bl	8005b8c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800642c:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 800642e:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8006430:	4290      	cmp	r0, r2
 8006432:	f0c0 809f 	bcc.w	8006574 <prvTimerTask+0x174>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006436:	4580      	cmp	r8, r0
	xLastTime = xTimeNow;
 8006438:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800643a:	f240 80ae 	bls.w	800659a <prvTimerTask+0x19a>
 800643e:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006440:	6820      	ldr	r0, [r4, #0]
 8006442:	eba8 010a 	sub.w	r1, r8, sl
 8006446:	f7ff f929 	bl	800569c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800644a:	f7ff fcdf 	bl	8005e0c <xTaskResumeAll>
 800644e:	b938      	cbnz	r0, 8006460 <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
 8006450:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006454:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006460:	2200      	movs	r2, #0
 8006462:	6820      	ldr	r0, [r4, #0]
 8006464:	a904      	add	r1, sp, #16
 8006466:	f7ff f843 	bl	80054f0 <xQueueReceive>
 800646a:	2800      	cmp	r0, #0
 800646c:	d0d0      	beq.n	8006410 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800646e:	9b04      	ldr	r3, [sp, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	db66      	blt.n	8006542 <prvTimerTask+0x142>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006474:	9f06      	ldr	r7, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	b113      	cbz	r3, 8006480 <prvTimerTask+0x80>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800647a:	1d38      	adds	r0, r7, #4
 800647c:	f7fe fdb2 	bl	8004fe4 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8006480:	f7ff fb84 	bl	8005b8c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006484:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8006486:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8006488:	4298      	cmp	r0, r3
 800648a:	d37a      	bcc.n	8006582 <prvTimerTask+0x182>
			switch( xMessage.xMessageID )
 800648c:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
 800648e:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8006492:	2b09      	cmp	r3, #9
 8006494:	d8e4      	bhi.n	8006460 <prvTimerTask+0x60>
 8006496:	a201      	add	r2, pc, #4	; (adr r2, 800649c <prvTimerTask+0x9c>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	080064c5 	.word	0x080064c5
 80064a0:	080064c5 	.word	0x080064c5
 80064a4:	080064c5 	.word	0x080064c5
 80064a8:	08006461 	.word	0x08006461
 80064ac:	08006515 	.word	0x08006515
 80064b0:	08006533 	.word	0x08006533
 80064b4:	080064c5 	.word	0x080064c5
 80064b8:	080064c5 	.word	0x080064c5
 80064bc:	08006461 	.word	0x08006461
 80064c0:	08006515 	.word	0x08006515
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064c4:	9b05      	ldr	r3, [sp, #20]
 80064c6:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064c8:	613f      	str	r7, [r7, #16]
 80064ca:	1899      	adds	r1, r3, r2
 80064cc:	bf2c      	ite	cs
 80064ce:	2001      	movcs	r0, #1
 80064d0:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 80064d2:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064d4:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 80064d6:	d857      	bhi.n	8006588 <prvTimerTask+0x188>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d8:	eba8 0303 	sub.w	r3, r8, r3
 80064dc:	429a      	cmp	r2, r3
 80064de:	d822      	bhi.n	8006526 <prvTimerTask+0x126>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	4638      	mov	r0, r7
 80064e4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d1b9      	bne.n	8006460 <prvTimerTask+0x60>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064ec:	2300      	movs	r3, #0
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	9905      	ldr	r1, [sp, #20]
 80064f2:	4638      	mov	r0, r7
 80064f4:	440a      	add	r2, r1
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	4619      	mov	r1, r3
 80064fa:	f7ff ff09 	bl	8006310 <xTimerGenericCommand>
							configASSERT( xResult );
 80064fe:	2800      	cmp	r0, #0
 8006500:	d1ae      	bne.n	8006460 <prvTimerTask+0x60>
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	e7fe      	b.n	8006512 <prvTimerTask+0x112>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006514:	9b05      	ldr	r3, [sp, #20]
 8006516:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006518:	2b00      	cmp	r3, #0
 800651a:	d078      	beq.n	800660e <prvTimerTask+0x20e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800651c:	4443      	add	r3, r8
	if( xNextExpiryTime <= xTimeNow )
 800651e:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006520:	607b      	str	r3, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006522:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8006524:	d834      	bhi.n	8006590 <prvTimerTask+0x190>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006526:	4b44      	ldr	r3, [pc, #272]	; (8006638 <prvTimerTask+0x238>)
 8006528:	1d39      	adds	r1, r7, #4
 800652a:	6818      	ldr	r0, [r3, #0]
 800652c:	f7fe fd42 	bl	8004fb4 <vListInsert>
	return xProcessTimerNow;
 8006530:	e796      	b.n	8006460 <prvTimerTask+0x60>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006532:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006536:	2b00      	cmp	r3, #0
 8006538:	d192      	bne.n	8006460 <prvTimerTask+0x60>
							vPortFree( pxTimer );
 800653a:	4638      	mov	r0, r7
 800653c:	f000 fabe 	bl	8006abc <vPortFree>
 8006540:	e78e      	b.n	8006460 <prvTimerTask+0x60>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006542:	9b05      	ldr	r3, [sp, #20]
 8006544:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006548:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800654a:	9b04      	ldr	r3, [sp, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	db87      	blt.n	8006460 <prvTimerTask+0x60>
 8006550:	e790      	b.n	8006474 <prvTimerTask+0x74>
	vTaskSuspendAll();
 8006552:	f7ff fb13 	bl	8005b7c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8006556:	f7ff fb19 	bl	8005b8c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800655a:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 800655c:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 800655e:	4290      	cmp	r0, r2
 8006560:	d308      	bcc.n	8006574 <prvTimerTask+0x174>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006562:	4b35      	ldr	r3, [pc, #212]	; (8006638 <prvTimerTask+0x238>)
	xLastTime = xTimeNow;
 8006564:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	6812      	ldr	r2, [r2, #0]
 800656c:	fab2 f282 	clz	r2, r2
 8006570:	0952      	lsrs	r2, r2, #5
 8006572:	e765      	b.n	8006440 <prvTimerTask+0x40>
		prvSwitchTimerLists();
 8006574:	f7ff ff02 	bl	800637c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8006578:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 800657c:	f7ff fc46 	bl	8005e0c <xTaskResumeAll>
 8006580:	e76e      	b.n	8006460 <prvTimerTask+0x60>
		prvSwitchTimerLists();
 8006582:	f7ff fefb 	bl	800637c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006586:	e781      	b.n	800648c <prvTimerTask+0x8c>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006588:	4543      	cmp	r3, r8
 800658a:	d901      	bls.n	8006590 <prvTimerTask+0x190>
 800658c:	2800      	cmp	r0, #0
 800658e:	d0a7      	beq.n	80064e0 <prvTimerTask+0xe0>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006590:	6830      	ldr	r0, [r6, #0]
 8006592:	1d39      	adds	r1, r7, #4
 8006594:	f7fe fd0e 	bl	8004fb4 <vListInsert>
 8006598:	e762      	b.n	8006460 <prvTimerTask+0x60>
				( void ) xTaskResumeAll();
 800659a:	f7ff fc37 	bl	8005e0c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800659e:	6832      	ldr	r2, [r6, #0]
 80065a0:	68d2      	ldr	r2, [r2, #12]
 80065a2:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065a6:	f10b 0104 	add.w	r1, fp, #4
 80065aa:	4608      	mov	r0, r1
 80065ac:	9103      	str	r1, [sp, #12]
 80065ae:	f7fe fd19 	bl	8004fe4 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80065b2:	f8db 001c 	ldr.w	r0, [fp, #28]
 80065b6:	9903      	ldr	r1, [sp, #12]
 80065b8:	2801      	cmp	r0, #1
 80065ba:	d004      	beq.n	80065c6 <prvTimerTask+0x1c6>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065bc:	4658      	mov	r0, fp
 80065be:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 80065c2:	4798      	blx	r3
}
 80065c4:	e74c      	b.n	8006460 <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80065c6:	f8db 0018 	ldr.w	r0, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065ca:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80065ce:	eb08 0300 	add.w	r3, r8, r0
	if( xNextExpiryTime <= xTimeNow )
 80065d2:	4553      	cmp	r3, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065d4:	f8cb 3004 	str.w	r3, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 80065d8:	d903      	bls.n	80065e2 <prvTimerTask+0x1e2>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065da:	6830      	ldr	r0, [r6, #0]
 80065dc:	f7fe fcea 	bl	8004fb4 <vListInsert>
	return xProcessTimerNow;
 80065e0:	e7ec      	b.n	80065bc <prvTimerTask+0x1bc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065e2:	ebaa 0308 	sub.w	r3, sl, r8
 80065e6:	4298      	cmp	r0, r3
 80065e8:	d81a      	bhi.n	8006620 <prvTimerTask+0x220>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065ea:	2300      	movs	r3, #0
 80065ec:	4642      	mov	r2, r8
 80065ee:	4658      	mov	r0, fp
 80065f0:	4619      	mov	r1, r3
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	f7ff fe8c 	bl	8006310 <xTimerGenericCommand>
			configASSERT( xResult );
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d1df      	bne.n	80065bc <prvTimerTask+0x1bc>
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	e7fe      	b.n	800660c <prvTimerTask+0x20c>
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800661e:	e7fe      	b.n	800661e <prvTimerTask+0x21e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006620:	4b05      	ldr	r3, [pc, #20]	; (8006638 <prvTimerTask+0x238>)
 8006622:	6818      	ldr	r0, [r3, #0]
 8006624:	f7fe fcc6 	bl	8004fb4 <vListInsert>
	return xProcessTimerNow;
 8006628:	e7c8      	b.n	80065bc <prvTimerTask+0x1bc>
 800662a:	bf00      	nop
 800662c:	200014fc 	.word	0x200014fc
 8006630:	200015cc 	.word	0x200015cc
 8006634:	20001620 	.word	0x20001620
 8006638:	20001500 	.word	0x20001500

0800663c <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800663c:	b140      	cbz	r0, 8006650 <pvTimerGetTimerID+0x14>
{
 800663e:	b510      	push	{r4, lr}
 8006640:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
 8006642:	f000 f867 	bl	8006714 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006646:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 8006648:	f000 f886 	bl	8006758 <vPortExitCritical>

	return pvReturn;
}
 800664c:	4620      	mov	r0, r4
 800664e:	bd10      	pop	{r4, pc}
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8006660:	e7fe      	b.n	8006660 <pvTimerGetTimerID+0x24>
 8006662:	bf00      	nop

08006664 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006664:	4806      	ldr	r0, [pc, #24]	; (8006680 <prvPortStartFirstTask+0x1c>)
 8006666:	6800      	ldr	r0, [r0, #0]
 8006668:	6800      	ldr	r0, [r0, #0]
 800666a:	f380 8808 	msr	MSP, r0
 800666e:	b662      	cpsie	i
 8006670:	b661      	cpsie	f
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	df00      	svc	0
 800667c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800667e:	0000      	.short	0x0000
 8006680:	e000ed08 	.word	0xe000ed08

08006684 <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 8006684:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8006686:	4b0e      	ldr	r3, [pc, #56]	; (80066c0 <prvTaskExitError+0x3c>)
{
 8006688:	b082      	sub	sp, #8
	configASSERT( uxCriticalNesting == ~0UL );
 800668a:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0UL;
 800668c:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800668e:	3301      	adds	r3, #1
 8006690:	d008      	beq.n	80066a4 <prvTaskExitError+0x20>
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	e7fe      	b.n	80066a2 <prvTaskExitError+0x1e>
 80066a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80066b4:	9b01      	ldr	r3, [sp, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0fc      	beq.n	80066b4 <prvTaskExitError+0x30>
}
 80066ba:	b002      	add	sp, #8
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	20000030 	.word	0x20000030

080066c4 <pxPortInitialiseStack>:
{
 80066c4:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066c6:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066ca:	4b06      	ldr	r3, [pc, #24]	; (80066e4 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066cc:	f021 0101 	bic.w	r1, r1, #1
 80066d0:	e940 1402 	strd	r1, r4, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066d4:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066d8:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80066dc:	bc10      	pop	{r4}
 80066de:	3840      	subs	r0, #64	; 0x40
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	08006685 	.word	0x08006685
	...

080066f0 <SVC_Handler>:
	__asm volatile (
 80066f0:	4b07      	ldr	r3, [pc, #28]	; (8006710 <pxCurrentTCBConst2>)
 80066f2:	6819      	ldr	r1, [r3, #0]
 80066f4:	6808      	ldr	r0, [r1, #0]
 80066f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066fa:	f380 8809 	msr	PSP, r0
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f04f 0000 	mov.w	r0, #0
 8006706:	f380 8811 	msr	BASEPRI, r0
 800670a:	f04e 0e0d 	orr.w	lr, lr, #13
 800670e:	4770      	bx	lr

08006710 <pxCurrentTCBConst2>:
 8006710:	20001000 	.word	0x20001000

08006714 <vPortEnterCritical>:
 8006714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006724:	4a0b      	ldr	r2, [pc, #44]	; (8006754 <vPortEnterCritical+0x40>)
 8006726:	6813      	ldr	r3, [r2, #0]
 8006728:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800672a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800672c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800672e:	d000      	beq.n	8006732 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8006730:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006732:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006736:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0f7      	beq.n	8006730 <vPortEnterCritical+0x1c>
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	e7fe      	b.n	8006750 <vPortEnterCritical+0x3c>
 8006752:	bf00      	nop
 8006754:	20000030 	.word	0x20000030

08006758 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8006758:	4a08      	ldr	r2, [pc, #32]	; (800677c <vPortExitCritical+0x24>)
 800675a:	6813      	ldr	r3, [r2, #0]
 800675c:	b943      	cbnz	r3, 8006770 <vPortExitCritical+0x18>
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	e7fe      	b.n	800676e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006770:	3b01      	subs	r3, #1
 8006772:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006774:	b90b      	cbnz	r3, 800677a <vPortExitCritical+0x22>
	__asm volatile
 8006776:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800677a:	4770      	bx	lr
 800677c:	20000030 	.word	0x20000030

08006780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006780:	f3ef 8009 	mrs	r0, PSP
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	4b0d      	ldr	r3, [pc, #52]	; (80067c0 <pxCurrentTCBConst>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006790:	6010      	str	r0, [r2, #0]
 8006792:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006796:	f04f 0050 	mov.w	r0, #80	; 0x50
 800679a:	f380 8811 	msr	BASEPRI, r0
 800679e:	f7ff fb75 	bl	8005e8c <vTaskSwitchContext>
 80067a2:	f04f 0000 	mov.w	r0, #0
 80067a6:	f380 8811 	msr	BASEPRI, r0
 80067aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80067ae:	6819      	ldr	r1, [r3, #0]
 80067b0:	6808      	ldr	r0, [r1, #0]
 80067b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80067b6:	f380 8809 	msr	PSP, r0
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	4770      	bx	lr

080067c0 <pxCurrentTCBConst>:
 80067c0:	20001000 	.word	0x20001000

080067c4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067c4:	b508      	push	{r3, lr}
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067d6:	f7ff f9df 	bl	8005b98 <xTaskIncrementTick>
 80067da:	b128      	cbz	r0, 80067e8 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80067e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80067e8:	2300      	movs	r3, #0
 80067ea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80067ee:	bd08      	pop	{r3, pc}

080067f0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067f0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80067f4:	2100      	movs	r1, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067f6:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067f8:	4b06      	ldr	r3, [pc, #24]	; (8006814 <vPortSetupTimerInterrupt+0x24>)
{
 80067fa:	b410      	push	{r4}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067fc:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067fe:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4c05      	ldr	r4, [pc, #20]	; (8006818 <vPortSetupTimerInterrupt+0x28>)
 8006804:	fba4 1303 	umull	r1, r3, r4, r3
 8006808:	099b      	lsrs	r3, r3, #6
 800680a:	3b01      	subs	r3, #1
 800680c:	6153      	str	r3, [r2, #20]
}
 800680e:	bc10      	pop	{r4}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006810:	6110      	str	r0, [r2, #16]
}
 8006812:	4770      	bx	lr
 8006814:	20000024 	.word	0x20000024
 8006818:	10624dd3 	.word	0x10624dd3

0800681c <xPortStartScheduler>:
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800681c:	f04f 0cff 	mov.w	ip, #255	; 0xff
{
 8006820:	b530      	push	{r4, r5, lr}
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006822:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006824:	4b29      	ldr	r3, [pc, #164]	; (80068cc <xPortStartScheduler+0xb0>)
{
 8006826:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006828:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800682a:	4929      	ldr	r1, [pc, #164]	; (80068d0 <xPortStartScheduler+0xb4>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006830:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006834:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006836:	4827      	ldr	r0, [pc, #156]	; (80068d4 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006838:	b2db      	uxtb	r3, r3
 800683a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800683e:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006842:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006846:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800684a:	0612      	lsls	r2, r2, #24
 800684c:	bf48      	it	mi
 800684e:	2206      	movmi	r2, #6
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006850:	6004      	str	r4, [r0, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006852:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006854:	d50e      	bpl.n	8006874 <xPortStartScheduler+0x58>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006856:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800685a:	4611      	mov	r1, r2
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006864:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006868:	3a01      	subs	r2, #1
 800686a:	061b      	lsls	r3, r3, #24
 800686c:	d4f3      	bmi.n	8006856 <xPortStartScheduler+0x3a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800686e:	2903      	cmp	r1, #3
 8006870:	d009      	beq.n	8006886 <xPortStartScheduler+0x6a>
 8006872:	6001      	str	r1, [r0, #0]
	__asm volatile
 8006874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	e7fe      	b.n	8006884 <xPortStartScheduler+0x68>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006886:	f44f 7540 	mov.w	r5, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800688a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 800688e:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006890:	9a01      	ldr	r2, [sp, #4]
 8006892:	490e      	ldr	r1, [pc, #56]	; (80068cc <xPortStartScheduler+0xb0>)
 8006894:	b2d2      	uxtb	r2, r2
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006896:	6005      	str	r5, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006898:	700a      	strb	r2, [r1, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800689a:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800689e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80068a2:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068a6:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80068aa:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80068ae:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80068b2:	f7ff ff9d 	bl	80067f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80068b6:	4b08      	ldr	r3, [pc, #32]	; (80068d8 <xPortStartScheduler+0xbc>)
 80068b8:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80068ba:	f7ff fed3 	bl	8006664 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80068be:	f7ff fae5 	bl	8005e8c <vTaskSwitchContext>
}
 80068c2:	4620      	mov	r0, r4
	prvTaskExitError();
 80068c4:	f7ff fede 	bl	8006684 <prvTaskExitError>
}
 80068c8:	b003      	add	sp, #12
 80068ca:	bd30      	pop	{r4, r5, pc}
 80068cc:	e000e400 	.word	0xe000e400
 80068d0:	20001628 	.word	0x20001628
 80068d4:	2000162c 	.word	0x2000162c
 80068d8:	20000030 	.word	0x20000030

080068dc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068dc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068e0:	2b0f      	cmp	r3, #15
 80068e2:	d90e      	bls.n	8006902 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068e4:	4911      	ldr	r1, [pc, #68]	; (800692c <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068e6:	4a12      	ldr	r2, [pc, #72]	; (8006930 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068e8:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068ea:	7812      	ldrb	r2, [r2, #0]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d908      	bls.n	8006902 <vPortValidateInterruptPriority+0x26>
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	e7fe      	b.n	8006900 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006902:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006906:	4a0b      	ldr	r2, [pc, #44]	; (8006934 <vPortValidateInterruptPriority+0x58>)
 8006908:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800690c:	6812      	ldr	r2, [r2, #0]
 800690e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006912:	4293      	cmp	r3, r2
 8006914:	d908      	bls.n	8006928 <vPortValidateInterruptPriority+0x4c>
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	e7fe      	b.n	8006926 <vPortValidateInterruptPriority+0x4a>
	}
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	e000e3f0 	.word	0xe000e3f0
 8006930:	20001628 	.word	0x20001628
 8006934:	2000162c 	.word	0x2000162c

08006938 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006938:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800693a:	4b15      	ldr	r3, [pc, #84]	; (8006990 <prvInsertBlockIntoFreeList+0x58>)
 800693c:	461a      	mov	r2, r3
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4283      	cmp	r3, r0
 8006942:	d3fb      	bcc.n	800693c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006944:	6851      	ldr	r1, [r2, #4]
 8006946:	eb02 0c01 	add.w	ip, r2, r1
 800694a:	4560      	cmp	r0, ip
 800694c:	d00a      	beq.n	8006964 <prvInsertBlockIntoFreeList+0x2c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800694e:	6841      	ldr	r1, [r0, #4]
 8006950:	eb00 0c01 	add.w	ip, r0, r1
 8006954:	4563      	cmp	r3, ip
 8006956:	d00d      	beq.n	8006974 <prvInsertBlockIntoFreeList+0x3c>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006958:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800695a:	6003      	str	r3, [r0, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800695c:	bc10      	pop	{r4}
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800695e:	bf18      	it	ne
 8006960:	6010      	strne	r0, [r2, #0]
}
 8006962:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006964:	6844      	ldr	r4, [r0, #4]
 8006966:	4610      	mov	r0, r2
 8006968:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800696a:	eb00 0c01 	add.w	ip, r0, r1
 800696e:	4563      	cmp	r3, ip
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006970:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006972:	d1f1      	bne.n	8006958 <prvInsertBlockIntoFreeList+0x20>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006974:	4c07      	ldr	r4, [pc, #28]	; (8006994 <prvInsertBlockIntoFreeList+0x5c>)
 8006976:	6824      	ldr	r4, [r4, #0]
 8006978:	42a3      	cmp	r3, r4
 800697a:	d0ed      	beq.n	8006958 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800697c:	cb18      	ldmia	r3, {r3, r4}
	if( pxIterator != pxBlockToInsert )
 800697e:	4290      	cmp	r0, r2
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006980:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006982:	e9c0 3100 	strd	r3, r1, [r0]
}
 8006986:	bc10      	pop	{r4}
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006988:	bf18      	it	ne
 800698a:	6010      	strne	r0, [r2, #0]
}
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	20003198 	.word	0x20003198
 8006994:	20001630 	.word	0x20001630

08006998 <pvPortMalloc>:
{
 8006998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 800699c:	4d40      	ldr	r5, [pc, #256]	; (8006aa0 <pvPortMalloc+0x108>)
{
 800699e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80069a0:	f7ff f8ec 	bl	8005b7c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d058      	beq.n	8006a5c <pvPortMalloc+0xc4>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069aa:	4b3e      	ldr	r3, [pc, #248]	; (8006aa4 <pvPortMalloc+0x10c>)
 80069ac:	681f      	ldr	r7, [r3, #0]
 80069ae:	423c      	tst	r4, r7
 80069b0:	d130      	bne.n	8006a14 <pvPortMalloc+0x7c>
			if( xWantedSize > 0 )
 80069b2:	b37c      	cbz	r4, 8006a14 <pvPortMalloc+0x7c>
				xWantedSize += xHeapStructSize;
 80069b4:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069b8:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069ba:	bf1c      	itt	ne
 80069bc:	f021 0107 	bicne.w	r1, r1, #7
 80069c0:	3108      	addne	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069c2:	b339      	cbz	r1, 8006a14 <pvPortMalloc+0x7c>
 80069c4:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8006aa8 <pvPortMalloc+0x110>
 80069c8:	f8d8 6000 	ldr.w	r6, [r8]
 80069cc:	428e      	cmp	r6, r1
 80069ce:	d321      	bcc.n	8006a14 <pvPortMalloc+0x7c>
				pxBlock = xStart.pxNextFreeBlock;
 80069d0:	4b36      	ldr	r3, [pc, #216]	; (8006aac <pvPortMalloc+0x114>)
				pxPreviousBlock = &xStart;
 80069d2:	4618      	mov	r0, r3
				pxBlock = xStart.pxNextFreeBlock;
 80069d4:	681c      	ldr	r4, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069d6:	e003      	b.n	80069e0 <pvPortMalloc+0x48>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	b123      	cbz	r3, 80069e6 <pvPortMalloc+0x4e>
 80069dc:	4620      	mov	r0, r4
 80069de:	461c      	mov	r4, r3
 80069e0:	6862      	ldr	r2, [r4, #4]
 80069e2:	428a      	cmp	r2, r1
 80069e4:	d3f8      	bcc.n	80069d8 <pvPortMalloc+0x40>
				if( pxBlock != pxEnd )
 80069e6:	682b      	ldr	r3, [r5, #0]
 80069e8:	42a3      	cmp	r3, r4
 80069ea:	d013      	beq.n	8006a14 <pvPortMalloc+0x7c>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069ec:	6823      	ldr	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069ee:	6805      	ldr	r5, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069f0:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069f2:	1a53      	subs	r3, r2, r1
 80069f4:	2b10      	cmp	r3, #16
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069f6:	f105 0508 	add.w	r5, r5, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069fa:	d916      	bls.n	8006a2a <pvPortMalloc+0x92>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069fc:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069fe:	0742      	lsls	r2, r0, #29
 8006a00:	d00e      	beq.n	8006a20 <pvPortMalloc+0x88>
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	e7fe      	b.n	8006a12 <pvPortMalloc+0x7a>
	( void ) xTaskResumeAll();
 8006a14:	f7ff f9fa 	bl	8005e0c <xTaskResumeAll>
 8006a18:	2500      	movs	r5, #0
}
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a20:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a22:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a24:	f7ff ff88 	bl	8006938 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a28:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a2a:	4b21      	ldr	r3, [pc, #132]	; (8006ab0 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a2c:	1ab6      	subs	r6, r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a2e:	6819      	ldr	r1, [r3, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a30:	433a      	orrs	r2, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a32:	428e      	cmp	r6, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a34:	bf38      	it	cc
 8006a36:	601e      	strcc	r6, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	e9c4 3200 	strd	r3, r2, [r4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a3e:	f8c8 6000 	str.w	r6, [r8]
	( void ) xTaskResumeAll();
 8006a42:	f7ff f9e3 	bl	8005e0c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a46:	076b      	lsls	r3, r5, #29
 8006a48:	d0e7      	beq.n	8006a1a <pvPortMalloc+0x82>
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	e7fe      	b.n	8006a5a <pvPortMalloc+0xc2>
	uxAddress = ( size_t ) ucHeap;
 8006a5c:	4b15      	ldr	r3, [pc, #84]	; (8006ab4 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a5e:	075e      	lsls	r6, r3, #29
 8006a60:	d118      	bne.n	8006a94 <pvPortMalloc+0xfc>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a62:	4619      	mov	r1, r3
 8006a64:	4a14      	ldr	r2, [pc, #80]	; (8006ab8 <pvPortMalloc+0x120>)
	xStart.xBlockSize = ( size_t ) 0;
 8006a66:	2000      	movs	r0, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a68:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	uxAddress -= xHeapStructSize;
 8006a6c:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a6e:	f022 0207 	bic.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a72:	4f0e      	ldr	r7, [pc, #56]	; (8006aac <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a74:	1ad3      	subs	r3, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 8006a76:	e9c7 1000 	strd	r1, r0, [r7]
	pxEnd = ( void * ) uxAddress;
 8006a7a:	602a      	str	r2, [r5, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8006a7c:	e9c2 0000 	strd	r0, r0, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a80:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a84:	4a0a      	ldr	r2, [pc, #40]	; (8006ab0 <pvPortMalloc+0x118>)
}
 8006a86:	4637      	mov	r7, r6
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a88:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a8a:	4a07      	ldr	r2, [pc, #28]	; (8006aa8 <pvPortMalloc+0x110>)
 8006a8c:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a8e:	4b05      	ldr	r3, [pc, #20]	; (8006aa4 <pvPortMalloc+0x10c>)
 8006a90:	601e      	str	r6, [r3, #0]
}
 8006a92:	e78c      	b.n	80069ae <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a94:	3307      	adds	r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a96:	f023 0307 	bic.w	r3, r3, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	4a06      	ldr	r2, [pc, #24]	; (8006ab8 <pvPortMalloc+0x120>)
 8006a9e:	e7e2      	b.n	8006a66 <pvPortMalloc+0xce>
 8006aa0:	20001630 	.word	0x20001630
 8006aa4:	2000318c 	.word	0x2000318c
 8006aa8:	20003190 	.word	0x20003190
 8006aac:	20003198 	.word	0x20003198
 8006ab0:	20003194 	.word	0x20003194
 8006ab4:	20001634 	.word	0x20001634
 8006ab8:	2000318c 	.word	0x2000318c

08006abc <vPortFree>:
	if( pv != NULL )
 8006abc:	b1d0      	cbz	r0, 8006af4 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006abe:	4a1a      	ldr	r2, [pc, #104]	; (8006b28 <vPortFree+0x6c>)
 8006ac0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006ac4:	6812      	ldr	r2, [r2, #0]
 8006ac6:	4213      	tst	r3, r2
 8006ac8:	d00b      	beq.n	8006ae2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006aca:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006ace:	b191      	cbz	r1, 8006af6 <vPortFree+0x3a>
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	e7fe      	b.n	8006ae0 <vPortFree+0x24>
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006af2:	e7fe      	b.n	8006af2 <vPortFree+0x36>
 8006af4:	4770      	bx	lr
{
 8006af6:	b500      	push	{lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006af8:	ea23 0302 	bic.w	r3, r3, r2
{
 8006afc:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006afe:	f840 3c04 	str.w	r3, [r0, #-4]
 8006b02:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8006b04:	f7ff f83a 	bl	8005b7c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b08:	4a08      	ldr	r2, [pc, #32]	; (8006b2c <vPortFree+0x70>)
 8006b0a:	9801      	ldr	r0, [sp, #4]
 8006b0c:	6811      	ldr	r1, [r2, #0]
 8006b0e:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b12:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b14:	440b      	add	r3, r1
 8006b16:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b18:	f7ff ff0e 	bl	8006938 <prvInsertBlockIntoFreeList>
}
 8006b1c:	b003      	add	sp, #12
 8006b1e:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8006b22:	f7ff b973 	b.w	8005e0c <xTaskResumeAll>
 8006b26:	bf00      	nop
 8006b28:	2000318c 	.word	0x2000318c
 8006b2c:	20003190 	.word	0x20003190

08006b30 <__errno>:
 8006b30:	4b01      	ldr	r3, [pc, #4]	; (8006b38 <__errno+0x8>)
 8006b32:	6818      	ldr	r0, [r3, #0]
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	20000034 	.word	0x20000034

08006b3c <__libc_init_array>:
 8006b3c:	b570      	push	{r4, r5, r6, lr}
 8006b3e:	2600      	movs	r6, #0
 8006b40:	4d0c      	ldr	r5, [pc, #48]	; (8006b74 <__libc_init_array+0x38>)
 8006b42:	4c0d      	ldr	r4, [pc, #52]	; (8006b78 <__libc_init_array+0x3c>)
 8006b44:	1b64      	subs	r4, r4, r5
 8006b46:	10a4      	asrs	r4, r4, #2
 8006b48:	42a6      	cmp	r6, r4
 8006b4a:	d109      	bne.n	8006b60 <__libc_init_array+0x24>
 8006b4c:	f000 faf0 	bl	8007130 <_init>
 8006b50:	2600      	movs	r6, #0
 8006b52:	4d0a      	ldr	r5, [pc, #40]	; (8006b7c <__libc_init_array+0x40>)
 8006b54:	4c0a      	ldr	r4, [pc, #40]	; (8006b80 <__libc_init_array+0x44>)
 8006b56:	1b64      	subs	r4, r4, r5
 8006b58:	10a4      	asrs	r4, r4, #2
 8006b5a:	42a6      	cmp	r6, r4
 8006b5c:	d105      	bne.n	8006b6a <__libc_init_array+0x2e>
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}
 8006b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b64:	4798      	blx	r3
 8006b66:	3601      	adds	r6, #1
 8006b68:	e7ee      	b.n	8006b48 <__libc_init_array+0xc>
 8006b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b6e:	4798      	blx	r3
 8006b70:	3601      	adds	r6, #1
 8006b72:	e7f2      	b.n	8006b5a <__libc_init_array+0x1e>
 8006b74:	08007550 	.word	0x08007550
 8006b78:	08007550 	.word	0x08007550
 8006b7c:	08007550 	.word	0x08007550
 8006b80:	08007554 	.word	0x08007554

08006b84 <__retarget_lock_acquire_recursive>:
 8006b84:	4770      	bx	lr

08006b86 <__retarget_lock_release_recursive>:
 8006b86:	4770      	bx	lr

08006b88 <memcpy>:
 8006b88:	440a      	add	r2, r1
 8006b8a:	4291      	cmp	r1, r2
 8006b8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b90:	d100      	bne.n	8006b94 <memcpy+0xc>
 8006b92:	4770      	bx	lr
 8006b94:	b510      	push	{r4, lr}
 8006b96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b9a:	4291      	cmp	r1, r2
 8006b9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ba0:	d1f9      	bne.n	8006b96 <memcpy+0xe>
 8006ba2:	bd10      	pop	{r4, pc}

08006ba4 <memset>:
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	4402      	add	r2, r0
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d100      	bne.n	8006bae <memset+0xa>
 8006bac:	4770      	bx	lr
 8006bae:	f803 1b01 	strb.w	r1, [r3], #1
 8006bb2:	e7f9      	b.n	8006ba8 <memset+0x4>

08006bb4 <cleanup_glue>:
 8006bb4:	b538      	push	{r3, r4, r5, lr}
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	6809      	ldr	r1, [r1, #0]
 8006bba:	4605      	mov	r5, r0
 8006bbc:	b109      	cbz	r1, 8006bc2 <cleanup_glue+0xe>
 8006bbe:	f7ff fff9 	bl	8006bb4 <cleanup_glue>
 8006bc2:	4621      	mov	r1, r4
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bca:	f000 b87f 	b.w	8006ccc <_free_r>
	...

08006bd0 <_reclaim_reent>:
 8006bd0:	4b2c      	ldr	r3, [pc, #176]	; (8006c84 <_reclaim_reent+0xb4>)
 8006bd2:	b570      	push	{r4, r5, r6, lr}
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	4283      	cmp	r3, r0
 8006bda:	d051      	beq.n	8006c80 <_reclaim_reent+0xb0>
 8006bdc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006bde:	b143      	cbz	r3, 8006bf2 <_reclaim_reent+0x22>
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d14a      	bne.n	8006c7c <_reclaim_reent+0xac>
 8006be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006be8:	6819      	ldr	r1, [r3, #0]
 8006bea:	b111      	cbz	r1, 8006bf2 <_reclaim_reent+0x22>
 8006bec:	4620      	mov	r0, r4
 8006bee:	f000 f86d 	bl	8006ccc <_free_r>
 8006bf2:	6961      	ldr	r1, [r4, #20]
 8006bf4:	b111      	cbz	r1, 8006bfc <_reclaim_reent+0x2c>
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f000 f868 	bl	8006ccc <_free_r>
 8006bfc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006bfe:	b111      	cbz	r1, 8006c06 <_reclaim_reent+0x36>
 8006c00:	4620      	mov	r0, r4
 8006c02:	f000 f863 	bl	8006ccc <_free_r>
 8006c06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c08:	b111      	cbz	r1, 8006c10 <_reclaim_reent+0x40>
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f000 f85e 	bl	8006ccc <_free_r>
 8006c10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006c12:	b111      	cbz	r1, 8006c1a <_reclaim_reent+0x4a>
 8006c14:	4620      	mov	r0, r4
 8006c16:	f000 f859 	bl	8006ccc <_free_r>
 8006c1a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006c1c:	b111      	cbz	r1, 8006c24 <_reclaim_reent+0x54>
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f000 f854 	bl	8006ccc <_free_r>
 8006c24:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006c26:	b111      	cbz	r1, 8006c2e <_reclaim_reent+0x5e>
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f000 f84f 	bl	8006ccc <_free_r>
 8006c2e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006c30:	b111      	cbz	r1, 8006c38 <_reclaim_reent+0x68>
 8006c32:	4620      	mov	r0, r4
 8006c34:	f000 f84a 	bl	8006ccc <_free_r>
 8006c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c3a:	b111      	cbz	r1, 8006c42 <_reclaim_reent+0x72>
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f000 f845 	bl	8006ccc <_free_r>
 8006c42:	69a3      	ldr	r3, [r4, #24]
 8006c44:	b1e3      	cbz	r3, 8006c80 <_reclaim_reent+0xb0>
 8006c46:	4620      	mov	r0, r4
 8006c48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c4a:	4798      	blx	r3
 8006c4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006c4e:	b1b9      	cbz	r1, 8006c80 <_reclaim_reent+0xb0>
 8006c50:	4620      	mov	r0, r4
 8006c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c56:	f7ff bfad 	b.w	8006bb4 <cleanup_glue>
 8006c5a:	5949      	ldr	r1, [r1, r5]
 8006c5c:	b941      	cbnz	r1, 8006c70 <_reclaim_reent+0xa0>
 8006c5e:	3504      	adds	r5, #4
 8006c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c62:	2d80      	cmp	r5, #128	; 0x80
 8006c64:	68d9      	ldr	r1, [r3, #12]
 8006c66:	d1f8      	bne.n	8006c5a <_reclaim_reent+0x8a>
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f000 f82f 	bl	8006ccc <_free_r>
 8006c6e:	e7ba      	b.n	8006be6 <_reclaim_reent+0x16>
 8006c70:	680e      	ldr	r6, [r1, #0]
 8006c72:	4620      	mov	r0, r4
 8006c74:	f000 f82a 	bl	8006ccc <_free_r>
 8006c78:	4631      	mov	r1, r6
 8006c7a:	e7ef      	b.n	8006c5c <_reclaim_reent+0x8c>
 8006c7c:	2500      	movs	r5, #0
 8006c7e:	e7ef      	b.n	8006c60 <_reclaim_reent+0x90>
 8006c80:	bd70      	pop	{r4, r5, r6, pc}
 8006c82:	bf00      	nop
 8006c84:	20000034 	.word	0x20000034

08006c88 <strstr>:
 8006c88:	780a      	ldrb	r2, [r1, #0]
 8006c8a:	b570      	push	{r4, r5, r6, lr}
 8006c8c:	b96a      	cbnz	r2, 8006caa <strstr+0x22>
 8006c8e:	bd70      	pop	{r4, r5, r6, pc}
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d109      	bne.n	8006ca8 <strstr+0x20>
 8006c94:	460c      	mov	r4, r1
 8006c96:	4605      	mov	r5, r0
 8006c98:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0f6      	beq.n	8006c8e <strstr+0x6>
 8006ca0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006ca4:	429e      	cmp	r6, r3
 8006ca6:	d0f7      	beq.n	8006c98 <strstr+0x10>
 8006ca8:	3001      	adds	r0, #1
 8006caa:	7803      	ldrb	r3, [r0, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1ef      	bne.n	8006c90 <strstr+0x8>
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	e7ec      	b.n	8006c8e <strstr+0x6>

08006cb4 <__malloc_lock>:
 8006cb4:	4801      	ldr	r0, [pc, #4]	; (8006cbc <__malloc_lock+0x8>)
 8006cb6:	f7ff bf65 	b.w	8006b84 <__retarget_lock_acquire_recursive>
 8006cba:	bf00      	nop
 8006cbc:	200031a0 	.word	0x200031a0

08006cc0 <__malloc_unlock>:
 8006cc0:	4801      	ldr	r0, [pc, #4]	; (8006cc8 <__malloc_unlock+0x8>)
 8006cc2:	f7ff bf60 	b.w	8006b86 <__retarget_lock_release_recursive>
 8006cc6:	bf00      	nop
 8006cc8:	200031a0 	.word	0x200031a0

08006ccc <_free_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4605      	mov	r5, r0
 8006cd0:	2900      	cmp	r1, #0
 8006cd2:	d040      	beq.n	8006d56 <_free_r+0x8a>
 8006cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cd8:	1f0c      	subs	r4, r1, #4
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	bfb8      	it	lt
 8006cde:	18e4      	addlt	r4, r4, r3
 8006ce0:	f7ff ffe8 	bl	8006cb4 <__malloc_lock>
 8006ce4:	4a1c      	ldr	r2, [pc, #112]	; (8006d58 <_free_r+0x8c>)
 8006ce6:	6813      	ldr	r3, [r2, #0]
 8006ce8:	b933      	cbnz	r3, 8006cf8 <_free_r+0x2c>
 8006cea:	6063      	str	r3, [r4, #4]
 8006cec:	6014      	str	r4, [r2, #0]
 8006cee:	4628      	mov	r0, r5
 8006cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cf4:	f7ff bfe4 	b.w	8006cc0 <__malloc_unlock>
 8006cf8:	42a3      	cmp	r3, r4
 8006cfa:	d908      	bls.n	8006d0e <_free_r+0x42>
 8006cfc:	6820      	ldr	r0, [r4, #0]
 8006cfe:	1821      	adds	r1, r4, r0
 8006d00:	428b      	cmp	r3, r1
 8006d02:	bf01      	itttt	eq
 8006d04:	6819      	ldreq	r1, [r3, #0]
 8006d06:	685b      	ldreq	r3, [r3, #4]
 8006d08:	1809      	addeq	r1, r1, r0
 8006d0a:	6021      	streq	r1, [r4, #0]
 8006d0c:	e7ed      	b.n	8006cea <_free_r+0x1e>
 8006d0e:	461a      	mov	r2, r3
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	b10b      	cbz	r3, 8006d18 <_free_r+0x4c>
 8006d14:	42a3      	cmp	r3, r4
 8006d16:	d9fa      	bls.n	8006d0e <_free_r+0x42>
 8006d18:	6811      	ldr	r1, [r2, #0]
 8006d1a:	1850      	adds	r0, r2, r1
 8006d1c:	42a0      	cmp	r0, r4
 8006d1e:	d10b      	bne.n	8006d38 <_free_r+0x6c>
 8006d20:	6820      	ldr	r0, [r4, #0]
 8006d22:	4401      	add	r1, r0
 8006d24:	1850      	adds	r0, r2, r1
 8006d26:	4283      	cmp	r3, r0
 8006d28:	6011      	str	r1, [r2, #0]
 8006d2a:	d1e0      	bne.n	8006cee <_free_r+0x22>
 8006d2c:	6818      	ldr	r0, [r3, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	4401      	add	r1, r0
 8006d32:	6011      	str	r1, [r2, #0]
 8006d34:	6053      	str	r3, [r2, #4]
 8006d36:	e7da      	b.n	8006cee <_free_r+0x22>
 8006d38:	d902      	bls.n	8006d40 <_free_r+0x74>
 8006d3a:	230c      	movs	r3, #12
 8006d3c:	602b      	str	r3, [r5, #0]
 8006d3e:	e7d6      	b.n	8006cee <_free_r+0x22>
 8006d40:	6820      	ldr	r0, [r4, #0]
 8006d42:	1821      	adds	r1, r4, r0
 8006d44:	428b      	cmp	r3, r1
 8006d46:	bf01      	itttt	eq
 8006d48:	6819      	ldreq	r1, [r3, #0]
 8006d4a:	685b      	ldreq	r3, [r3, #4]
 8006d4c:	1809      	addeq	r1, r1, r0
 8006d4e:	6021      	streq	r1, [r4, #0]
 8006d50:	6063      	str	r3, [r4, #4]
 8006d52:	6054      	str	r4, [r2, #4]
 8006d54:	e7cb      	b.n	8006cee <_free_r+0x22>
 8006d56:	bd38      	pop	{r3, r4, r5, pc}
 8006d58:	200031a4 	.word	0x200031a4

08006d5c <log>:
 8006d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5e:	4604      	mov	r4, r0
 8006d60:	460d      	mov	r5, r1
 8006d62:	f000 f82d 	bl	8006dc0 <__ieee754_log>
 8006d66:	4622      	mov	r2, r4
 8006d68:	4606      	mov	r6, r0
 8006d6a:	460f      	mov	r7, r1
 8006d6c:	462b      	mov	r3, r5
 8006d6e:	4620      	mov	r0, r4
 8006d70:	4629      	mov	r1, r5
 8006d72:	f7f9 fe4b 	bl	8000a0c <__aeabi_dcmpun>
 8006d76:	b998      	cbnz	r0, 8006da0 <log+0x44>
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	4629      	mov	r1, r5
 8006d80:	f7f9 fe3a 	bl	80009f8 <__aeabi_dcmpgt>
 8006d84:	b960      	cbnz	r0, 8006da0 <log+0x44>
 8006d86:	2200      	movs	r2, #0
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	f7f9 fe0b 	bl	80009a8 <__aeabi_dcmpeq>
 8006d92:	b140      	cbz	r0, 8006da6 <log+0x4a>
 8006d94:	f7ff fecc 	bl	8006b30 <__errno>
 8006d98:	2322      	movs	r3, #34	; 0x22
 8006d9a:	2600      	movs	r6, #0
 8006d9c:	4f06      	ldr	r7, [pc, #24]	; (8006db8 <log+0x5c>)
 8006d9e:	6003      	str	r3, [r0, #0]
 8006da0:	4630      	mov	r0, r6
 8006da2:	4639      	mov	r1, r7
 8006da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006da6:	f7ff fec3 	bl	8006b30 <__errno>
 8006daa:	2321      	movs	r3, #33	; 0x21
 8006dac:	6003      	str	r3, [r0, #0]
 8006dae:	4803      	ldr	r0, [pc, #12]	; (8006dbc <log+0x60>)
 8006db0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006db4:	f000 b9b6 	b.w	8007124 <nan>
 8006db8:	fff00000 	.word	0xfff00000
 8006dbc:	0800754c 	.word	0x0800754c

08006dc0 <__ieee754_log>:
 8006dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	460d      	mov	r5, r1
 8006dce:	b087      	sub	sp, #28
 8006dd0:	da24      	bge.n	8006e1c <__ieee754_log+0x5c>
 8006dd2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8006dd6:	4304      	orrs	r4, r0
 8006dd8:	d108      	bne.n	8006dec <__ieee754_log+0x2c>
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2300      	movs	r3, #0
 8006dde:	2000      	movs	r0, #0
 8006de0:	49cb      	ldr	r1, [pc, #812]	; (8007110 <__ieee754_log+0x350>)
 8006de2:	f7f9 fca3 	bl	800072c <__aeabi_ddiv>
 8006de6:	b007      	add	sp, #28
 8006de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dec:	2900      	cmp	r1, #0
 8006dee:	da04      	bge.n	8006dfa <__ieee754_log+0x3a>
 8006df0:	f7f9 f9ba 	bl	8000168 <__aeabi_dsub>
 8006df4:	2200      	movs	r2, #0
 8006df6:	2300      	movs	r3, #0
 8006df8:	e7f3      	b.n	8006de2 <__ieee754_log+0x22>
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	4bc5      	ldr	r3, [pc, #788]	; (8007114 <__ieee754_log+0x354>)
 8006dfe:	f7f9 fb6b 	bl	80004d8 <__aeabi_dmul>
 8006e02:	f06f 0635 	mvn.w	r6, #53	; 0x35
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	460d      	mov	r5, r1
 8006e0c:	49c2      	ldr	r1, [pc, #776]	; (8007118 <__ieee754_log+0x358>)
 8006e0e:	428d      	cmp	r5, r1
 8006e10:	dd06      	ble.n	8006e20 <__ieee754_log+0x60>
 8006e12:	4610      	mov	r0, r2
 8006e14:	4619      	mov	r1, r3
 8006e16:	f7f9 f9a9 	bl	800016c <__adddf3>
 8006e1a:	e7e4      	b.n	8006de6 <__ieee754_log+0x26>
 8006e1c:	2600      	movs	r6, #0
 8006e1e:	e7f5      	b.n	8006e0c <__ieee754_log+0x4c>
 8006e20:	152c      	asrs	r4, r5, #20
 8006e22:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006e26:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8006e2a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006e2e:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 8006e32:	4426      	add	r6, r4
 8006e34:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8006e38:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8006e3c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8006e40:	ea41 0305 	orr.w	r3, r1, r5
 8006e44:	4610      	mov	r0, r2
 8006e46:	4619      	mov	r1, r3
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4bb4      	ldr	r3, [pc, #720]	; (800711c <__ieee754_log+0x35c>)
 8006e4c:	f7f9 f98c 	bl	8000168 <__aeabi_dsub>
 8006e50:	1cab      	adds	r3, r5, #2
 8006e52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	4682      	mov	sl, r0
 8006e5a:	468b      	mov	fp, r1
 8006e5c:	f04f 0200 	mov.w	r2, #0
 8006e60:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8006e64:	dc53      	bgt.n	8006f0e <__ieee754_log+0x14e>
 8006e66:	2300      	movs	r3, #0
 8006e68:	f7f9 fd9e 	bl	80009a8 <__aeabi_dcmpeq>
 8006e6c:	b1d0      	cbz	r0, 8006ea4 <__ieee754_log+0xe4>
 8006e6e:	2c00      	cmp	r4, #0
 8006e70:	f000 8122 	beq.w	80070b8 <__ieee754_log+0x2f8>
 8006e74:	4620      	mov	r0, r4
 8006e76:	f7f9 fac5 	bl	8000404 <__aeabi_i2d>
 8006e7a:	a391      	add	r3, pc, #580	; (adr r3, 80070c0 <__ieee754_log+0x300>)
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	4606      	mov	r6, r0
 8006e82:	460f      	mov	r7, r1
 8006e84:	f7f9 fb28 	bl	80004d8 <__aeabi_dmul>
 8006e88:	a38f      	add	r3, pc, #572	; (adr r3, 80070c8 <__ieee754_log+0x308>)
 8006e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8e:	4604      	mov	r4, r0
 8006e90:	460d      	mov	r5, r1
 8006e92:	4630      	mov	r0, r6
 8006e94:	4639      	mov	r1, r7
 8006e96:	f7f9 fb1f 	bl	80004d8 <__aeabi_dmul>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	e7b8      	b.n	8006e16 <__ieee754_log+0x56>
 8006ea4:	a38a      	add	r3, pc, #552	; (adr r3, 80070d0 <__ieee754_log+0x310>)
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	4650      	mov	r0, sl
 8006eac:	4659      	mov	r1, fp
 8006eae:	f7f9 fb13 	bl	80004d8 <__aeabi_dmul>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	4999      	ldr	r1, [pc, #612]	; (8007120 <__ieee754_log+0x360>)
 8006eba:	f7f9 f955 	bl	8000168 <__aeabi_dsub>
 8006ebe:	4652      	mov	r2, sl
 8006ec0:	4606      	mov	r6, r0
 8006ec2:	460f      	mov	r7, r1
 8006ec4:	465b      	mov	r3, fp
 8006ec6:	4650      	mov	r0, sl
 8006ec8:	4659      	mov	r1, fp
 8006eca:	f7f9 fb05 	bl	80004d8 <__aeabi_dmul>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	4639      	mov	r1, r7
 8006ed6:	f7f9 faff 	bl	80004d8 <__aeabi_dmul>
 8006eda:	4606      	mov	r6, r0
 8006edc:	460f      	mov	r7, r1
 8006ede:	b914      	cbnz	r4, 8006ee6 <__ieee754_log+0x126>
 8006ee0:	4632      	mov	r2, r6
 8006ee2:	463b      	mov	r3, r7
 8006ee4:	e0a2      	b.n	800702c <__ieee754_log+0x26c>
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f7f9 fa8c 	bl	8000404 <__aeabi_i2d>
 8006eec:	a374      	add	r3, pc, #464	; (adr r3, 80070c0 <__ieee754_log+0x300>)
 8006eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef2:	4680      	mov	r8, r0
 8006ef4:	4689      	mov	r9, r1
 8006ef6:	f7f9 faef 	bl	80004d8 <__aeabi_dmul>
 8006efa:	a373      	add	r3, pc, #460	; (adr r3, 80070c8 <__ieee754_log+0x308>)
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	4604      	mov	r4, r0
 8006f02:	460d      	mov	r5, r1
 8006f04:	4640      	mov	r0, r8
 8006f06:	4649      	mov	r1, r9
 8006f08:	f7f9 fae6 	bl	80004d8 <__aeabi_dmul>
 8006f0c:	e0a7      	b.n	800705e <__ieee754_log+0x29e>
 8006f0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f12:	f7f9 f92b 	bl	800016c <__adddf3>
 8006f16:	4602      	mov	r2, r0
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4650      	mov	r0, sl
 8006f1c:	4659      	mov	r1, fp
 8006f1e:	f7f9 fc05 	bl	800072c <__aeabi_ddiv>
 8006f22:	e9cd 0100 	strd	r0, r1, [sp]
 8006f26:	4620      	mov	r0, r4
 8006f28:	f7f9 fa6c 	bl	8000404 <__aeabi_i2d>
 8006f2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f34:	4610      	mov	r0, r2
 8006f36:	4619      	mov	r1, r3
 8006f38:	f7f9 face 	bl	80004d8 <__aeabi_dmul>
 8006f3c:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8006f40:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8006f44:	4602      	mov	r2, r0
 8006f46:	9305      	str	r3, [sp, #20]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	460f      	mov	r7, r1
 8006f4e:	f7f9 fac3 	bl	80004d8 <__aeabi_dmul>
 8006f52:	a361      	add	r3, pc, #388	; (adr r3, 80070d8 <__ieee754_log+0x318>)
 8006f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f58:	4680      	mov	r8, r0
 8006f5a:	4689      	mov	r9, r1
 8006f5c:	f7f9 fabc 	bl	80004d8 <__aeabi_dmul>
 8006f60:	a35f      	add	r3, pc, #380	; (adr r3, 80070e0 <__ieee754_log+0x320>)
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	f7f9 f901 	bl	800016c <__adddf3>
 8006f6a:	4642      	mov	r2, r8
 8006f6c:	464b      	mov	r3, r9
 8006f6e:	f7f9 fab3 	bl	80004d8 <__aeabi_dmul>
 8006f72:	a35d      	add	r3, pc, #372	; (adr r3, 80070e8 <__ieee754_log+0x328>)
 8006f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f78:	f7f9 f8f8 	bl	800016c <__adddf3>
 8006f7c:	4642      	mov	r2, r8
 8006f7e:	464b      	mov	r3, r9
 8006f80:	f7f9 faaa 	bl	80004d8 <__aeabi_dmul>
 8006f84:	a35a      	add	r3, pc, #360	; (adr r3, 80070f0 <__ieee754_log+0x330>)
 8006f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8a:	f7f9 f8ef 	bl	800016c <__adddf3>
 8006f8e:	4632      	mov	r2, r6
 8006f90:	463b      	mov	r3, r7
 8006f92:	f7f9 faa1 	bl	80004d8 <__aeabi_dmul>
 8006f96:	a358      	add	r3, pc, #352	; (adr r3, 80070f8 <__ieee754_log+0x338>)
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	4606      	mov	r6, r0
 8006f9e:	460f      	mov	r7, r1
 8006fa0:	4640      	mov	r0, r8
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	f7f9 fa98 	bl	80004d8 <__aeabi_dmul>
 8006fa8:	a355      	add	r3, pc, #340	; (adr r3, 8007100 <__ieee754_log+0x340>)
 8006faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fae:	f7f9 f8dd 	bl	800016c <__adddf3>
 8006fb2:	4642      	mov	r2, r8
 8006fb4:	464b      	mov	r3, r9
 8006fb6:	f7f9 fa8f 	bl	80004d8 <__aeabi_dmul>
 8006fba:	a353      	add	r3, pc, #332	; (adr r3, 8007108 <__ieee754_log+0x348>)
 8006fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc0:	f7f9 f8d4 	bl	800016c <__adddf3>
 8006fc4:	4642      	mov	r2, r8
 8006fc6:	464b      	mov	r3, r9
 8006fc8:	f7f9 fa86 	bl	80004d8 <__aeabi_dmul>
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4602      	mov	r2, r0
 8006fd0:	4639      	mov	r1, r7
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f7f9 f8ca 	bl	800016c <__adddf3>
 8006fd8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8006fdc:	9b05      	ldr	r3, [sp, #20]
 8006fde:	3551      	adds	r5, #81	; 0x51
 8006fe0:	431d      	orrs	r5, r3
 8006fe2:	2d00      	cmp	r5, #0
 8006fe4:	4680      	mov	r8, r0
 8006fe6:	4689      	mov	r9, r1
 8006fe8:	dd48      	ble.n	800707c <__ieee754_log+0x2bc>
 8006fea:	2200      	movs	r2, #0
 8006fec:	4b4c      	ldr	r3, [pc, #304]	; (8007120 <__ieee754_log+0x360>)
 8006fee:	4650      	mov	r0, sl
 8006ff0:	4659      	mov	r1, fp
 8006ff2:	f7f9 fa71 	bl	80004d8 <__aeabi_dmul>
 8006ff6:	4652      	mov	r2, sl
 8006ff8:	465b      	mov	r3, fp
 8006ffa:	f7f9 fa6d 	bl	80004d8 <__aeabi_dmul>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4606      	mov	r6, r0
 8007004:	460f      	mov	r7, r1
 8007006:	4640      	mov	r0, r8
 8007008:	4649      	mov	r1, r9
 800700a:	f7f9 f8af 	bl	800016c <__adddf3>
 800700e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007012:	f7f9 fa61 	bl	80004d8 <__aeabi_dmul>
 8007016:	4680      	mov	r8, r0
 8007018:	4689      	mov	r9, r1
 800701a:	b964      	cbnz	r4, 8007036 <__ieee754_log+0x276>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	4630      	mov	r0, r6
 8007022:	4639      	mov	r1, r7
 8007024:	f7f9 f8a0 	bl	8000168 <__aeabi_dsub>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	4650      	mov	r0, sl
 800702e:	4659      	mov	r1, fp
 8007030:	f7f9 f89a 	bl	8000168 <__aeabi_dsub>
 8007034:	e6d7      	b.n	8006de6 <__ieee754_log+0x26>
 8007036:	a322      	add	r3, pc, #136	; (adr r3, 80070c0 <__ieee754_log+0x300>)
 8007038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007040:	f7f9 fa4a 	bl	80004d8 <__aeabi_dmul>
 8007044:	a320      	add	r3, pc, #128	; (adr r3, 80070c8 <__ieee754_log+0x308>)
 8007046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704a:	4604      	mov	r4, r0
 800704c:	460d      	mov	r5, r1
 800704e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007052:	f7f9 fa41 	bl	80004d8 <__aeabi_dmul>
 8007056:	4642      	mov	r2, r8
 8007058:	464b      	mov	r3, r9
 800705a:	f7f9 f887 	bl	800016c <__adddf3>
 800705e:	4602      	mov	r2, r0
 8007060:	460b      	mov	r3, r1
 8007062:	4630      	mov	r0, r6
 8007064:	4639      	mov	r1, r7
 8007066:	f7f9 f87f 	bl	8000168 <__aeabi_dsub>
 800706a:	4652      	mov	r2, sl
 800706c:	465b      	mov	r3, fp
 800706e:	f7f9 f87b 	bl	8000168 <__aeabi_dsub>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	4620      	mov	r0, r4
 8007078:	4629      	mov	r1, r5
 800707a:	e7d9      	b.n	8007030 <__ieee754_log+0x270>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	4650      	mov	r0, sl
 8007082:	4659      	mov	r1, fp
 8007084:	f7f9 f870 	bl	8000168 <__aeabi_dsub>
 8007088:	e9dd 2300 	ldrd	r2, r3, [sp]
 800708c:	f7f9 fa24 	bl	80004d8 <__aeabi_dmul>
 8007090:	4606      	mov	r6, r0
 8007092:	460f      	mov	r7, r1
 8007094:	2c00      	cmp	r4, #0
 8007096:	f43f af23 	beq.w	8006ee0 <__ieee754_log+0x120>
 800709a:	a309      	add	r3, pc, #36	; (adr r3, 80070c0 <__ieee754_log+0x300>)
 800709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070a4:	f7f9 fa18 	bl	80004d8 <__aeabi_dmul>
 80070a8:	a307      	add	r3, pc, #28	; (adr r3, 80070c8 <__ieee754_log+0x308>)
 80070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ae:	4604      	mov	r4, r0
 80070b0:	460d      	mov	r5, r1
 80070b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070b6:	e727      	b.n	8006f08 <__ieee754_log+0x148>
 80070b8:	2000      	movs	r0, #0
 80070ba:	2100      	movs	r1, #0
 80070bc:	e693      	b.n	8006de6 <__ieee754_log+0x26>
 80070be:	bf00      	nop
 80070c0:	fee00000 	.word	0xfee00000
 80070c4:	3fe62e42 	.word	0x3fe62e42
 80070c8:	35793c76 	.word	0x35793c76
 80070cc:	3dea39ef 	.word	0x3dea39ef
 80070d0:	55555555 	.word	0x55555555
 80070d4:	3fd55555 	.word	0x3fd55555
 80070d8:	df3e5244 	.word	0xdf3e5244
 80070dc:	3fc2f112 	.word	0x3fc2f112
 80070e0:	96cb03de 	.word	0x96cb03de
 80070e4:	3fc74664 	.word	0x3fc74664
 80070e8:	94229359 	.word	0x94229359
 80070ec:	3fd24924 	.word	0x3fd24924
 80070f0:	55555593 	.word	0x55555593
 80070f4:	3fe55555 	.word	0x3fe55555
 80070f8:	d078c69f 	.word	0xd078c69f
 80070fc:	3fc39a09 	.word	0x3fc39a09
 8007100:	1d8e78af 	.word	0x1d8e78af
 8007104:	3fcc71c5 	.word	0x3fcc71c5
 8007108:	9997fa04 	.word	0x9997fa04
 800710c:	3fd99999 	.word	0x3fd99999
 8007110:	c3500000 	.word	0xc3500000
 8007114:	43500000 	.word	0x43500000
 8007118:	7fefffff 	.word	0x7fefffff
 800711c:	3ff00000 	.word	0x3ff00000
 8007120:	3fe00000 	.word	0x3fe00000

08007124 <nan>:
 8007124:	2000      	movs	r0, #0
 8007126:	4901      	ldr	r1, [pc, #4]	; (800712c <nan+0x8>)
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	7ff80000 	.word	0x7ff80000

08007130 <_init>:
 8007130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007132:	bf00      	nop
 8007134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007136:	bc08      	pop	{r3}
 8007138:	469e      	mov	lr, r3
 800713a:	4770      	bx	lr

0800713c <_fini>:
 800713c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713e:	bf00      	nop
 8007140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007142:	bc08      	pop	{r3}
 8007144:	469e      	mov	lr, r3
 8007146:	4770      	bx	lr
